{
	"id": 0,
	"name": "leo-sdk",
	"kind": 1,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "index",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2325,
					"name": "BatchOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 9
						}
					],
					"target": 616
				},
				{
					"id": 2320,
					"name": "BotInvocationEvent",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1892
				},
				{
					"id": 2319,
					"name": "BotInvocationEvent2",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1886
				},
				{
					"id": 2323,
					"name": "Checkpoint",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1912
				},
				{
					"id": 2322,
					"name": "Checkpoints",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1903
				},
				{
					"id": 3225,
					"name": "CommandWrapFunction",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 569
				},
				{
					"id": 3227,
					"name": "CommandWrapOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 590
				},
				{
					"id": 2318,
					"name": "CorrelationId",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1881
				},
				{
					"id": 2321,
					"name": "Cron",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1895
				},
				{
					"id": 2310,
					"name": "DataCallback",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1820
				},
				{
					"id": 2308,
					"name": "DuplexStream",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1374
				},
				{
					"id": 2311,
					"name": "ErrorCallback",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1827
				},
				{
					"id": 2315,
					"name": "Event",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1856
				},
				{
					"id": 2314,
					"name": "FlushCallback",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1849
				},
				{
					"id": 2326,
					"name": "FromCsvOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 23
						}
					],
					"target": 593
				},
				{
					"id": 3224,
					"name": "ProcessCallback",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 554
				},
				{
					"id": 3226,
					"name": "ProcessCallbackOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 584
				},
				{
					"id": 2327,
					"name": "ProcessFunction",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 39
						}
					],
					"target": 561
				},
				{
					"id": 2324,
					"name": "RStreamsContext",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1918
				},
				{
					"id": 2313,
					"name": "RStreamsTransformFunction",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1840
				},
				{
					"id": 2317,
					"name": "ReadEvent",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1872
				},
				{
					"id": 2306,
					"name": "ReadableStream",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 622
				},
				{
					"id": 2328,
					"name": "ToCsvOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 56
						}
					],
					"target": 611
				},
				{
					"id": 2312,
					"name": "TransformFunction",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1831
				},
				{
					"id": 2309,
					"name": "TransformStream",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1377
				},
				{
					"id": 2307,
					"name": "WritableStream",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 998
				},
				{
					"id": 2316,
					"name": "WriteEvent",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 1864
				},
				{
					"id": 3212,
					"name": "batch",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 481
				},
				{
					"id": 3217,
					"name": "buffer",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 524
				},
				{
					"id": 3207,
					"name": "bufferBackoff",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 450
				},
				{
					"id": 3206,
					"name": "commandWrap",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 444
				},
				{
					"id": 3210,
					"name": "counter",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 466
				},
				{
					"id": 3209,
					"name": "devnull",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 462
				},
				{
					"id": 3204,
					"name": "eventIdFromTimestamp",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 437
				},
				{
					"id": 3205,
					"name": "eventIdToTimestamp",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 441
				},
				{
					"id": 3221,
					"name": "fromCSV",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 539
				},
				{
					"id": 3223,
					"name": "fromS3",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 547
				},
				{
					"id": 3208,
					"name": "log",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 458
				},
				{
					"id": 3219,
					"name": "parse",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 532
				},
				{
					"id": 3213,
					"name": "passthrough",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 485
				},
				{
					"id": 3201,
					"name": "pipe",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 254
				},
				{
					"id": 3202,
					"name": "pipeAsync",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 315
				},
				{
					"id": 3203,
					"name": "pipeline",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 370
				},
				{
					"id": 3211,
					"name": "process",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 474
				},
				{
					"id": 3218,
					"name": "stringify",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 530
				},
				{
					"id": 3214,
					"name": "through",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 490
				},
				{
					"id": 3215,
					"name": "throughAsync",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 501
				},
				{
					"id": 3220,
					"name": "toCSV",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 535
				},
				{
					"id": 3222,
					"name": "toS3",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 543
				},
				{
					"id": 3216,
					"name": "writeWrapped",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 514
				},
				{
					"id": 2865,
					"name": "StreamUtil",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "This namespace encompasses the majority of the functionality of the SDK.\nIt might be helpful to start at [[RStreamsSdk]] which exposes functionality from this namespace\nthat is most commonly used."
					},
					"children": [
						{
							"id": 2946,
							"name": "eventstream",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "For convenience, a re-export of the popular [event-stream library](https://www.npmjs.com/package/event-stream)."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 568,
									"character": 7
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "es"
								}
							}
						},
						{
							"id": 3063,
							"name": "split",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"comment": {
								"shortText": "An export of the super popular [split2](https://www.npmjs.com/package/split2) library.",
								"text": "It's used to turn events in the pipeline into a set of stringified events where each event is separated by a\ncharacter, typically newline.  We use it to make [JSON lines](https://jsonlines.org/) files with a single pipeline step that is then\nfollowed by a step that writes it to an S3 file.\n"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 613,
									"character": 7
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "splitLib"
								}
							}
						},
						{
							"id": 3189,
							"name": "batch",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 995,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3190,
									"name": "batch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step to tell the SDK to micro-batch events received in one pipeline step\nbefore sending them to the next pipeline step.  It's useful to control how many events arrive all\nat once, roughly, to the next pipeline step.  It can be helpful for a pipeline step to receive\na micro-batch of events, say 100 at a time, instead of 1 at a time to leverage economies of scale\nwhen writing to a database, e.g. doing one query to the database to get 100 records back all at once\ninstead of having to do a query to the database for each event as it comes in.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 3191,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data being batched from the previous pipeline step before sending to the next pipeline step"
											}
										}
									],
									"parameters": [
										{
											"id": 3192,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "If a number, then this is how many events to batch up before sending along.  If [[`BatchOptions`]] then\n  this is fine-grained control to ensure events keep flowing smoothly whether there are a few or many at a given moment."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Number",
														"package": "typescript",
														"name": "Number"
													},
													{
														"type": "reference",
														"id": 616,
														"name": "BatchOptions"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 483,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1872,
												"typeArguments": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"id": 483,
															"name": "T"
														}
													}
												],
												"name": "ReadEvent"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2892,
							"name": "checkpoint",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 773,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2893,
									"name": "checkpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that will checkpoint and then pass the events on to the next step in the pipeline.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2894,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Options for when to checkpoint."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2895,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2896,
															"name": "records",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Checkpoint after this number of records or as soon as the `time` condition is met if used and happens sooner."
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 777,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2897,
															"name": "time",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Checkpoint after this amount of time or as soon as the `records` condition is met if used and happens sooner.\nNote, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject."
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 784,
																	"character": 2
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "moment.DurationInputArg1",
																"package": "moment",
																"name": "DurationInputArg1"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2896,
																2897
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								}
							]
						},
						{
							"id": 3114,
							"name": "counter",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 896,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3115,
									"name": "counter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that takes an event, logs it and then passes the event on to the next pipeline step.\nThe log will include the event ID of the event, if it's present.  This is helpful to get visibility into the pipeline.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 3116,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the event that flows in, gets logged and then flows unchanged to the next pipeline step."
											}
										}
									],
									"parameters": [
										{
											"id": 3117,
											"name": "label",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "If present, log statements are prefixed with this string."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3118,
											"name": "records",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If present, only log every Nth event that flows through where N is `records`."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 468,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 468,
												"name": "T"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 3119,
									"name": "counter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that takes an event, logs it and then passes the event on to the next pipeline step.\nThe log will include the event ID of the event, if it's present.  This is helpful to get visibility into the pipeline.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 3120,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the event that flows in, gets logged and then flows unchanged to the next pipeline step."
											}
										}
									],
									"parameters": [
										{
											"id": 3121,
											"name": "records",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If present, only log every Nth event that flows through where N is `records`."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 472,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 472,
												"name": "T"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 3102,
							"name": "devnull",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 855,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3103,
									"name": "devnull",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that can act as a noop sink.",
										"text": "Sometimes you don't care to push data anywhere when you have a pipeline, but you need the fine-grained control\nof making your own pipeline.  When that's the case, use this to create a final pipeline step, a sink, to end your pipeline.\n\nPipelines must have a sink or data won't flow through the pipeline since Node streams pull data starting with the sink\nwho asks the previous pipeline step for data and then that previous step asks the one before it for data and so on.\nSo, no sink means no data flows.  This gives you a noop sink.\n",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 3104,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data sent into this final pipeline step"
											}
										}
									],
									"parameters": [
										{
											"id": 3105,
											"name": "shouldLog",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If a string, logs events that come in, prefixing the log statement with the stream.\n  If this is true, logs the event.  Otherwise, does nothing."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 464,
												"name": "T"
											}
										],
										"name": "WritableStream"
									}
								}
							]
						},
						{
							"id": 2898,
							"name": "enrich",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 810,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2899,
									"name": "enrich",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a callback-based version of the [[`RStreamsSdk.enrichEvents`]] function.",
										"text": "It reads events from one queue and writes them to another queue.  Put another way,\nan enrich operation reads events from a source `inQueue` and then writes them to a destination `outQueue`,\nallowing for side effects or transformation in the process.\n\nThe [[`EnrichOptions.transform`]] function\nis called when events are retrieved from the source queue so you can transform them and send them to the\ndestination queue by calling the callback in the transform function.  The callback here as the second argument\nof this function is meant to be called when all enriching is done on all events (right before it closes down the stream),\nallowing you to do clean up like closing a DB connection or something.\n"
									},
									"typeParameter": [
										{
											"id": 2900,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data event retrieved from the source queue"
											}
										},
										{
											"id": 2901,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data event that is sent to the destination queue"
											}
										}
									],
									"parameters": [
										{
											"id": 2902,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "TThe details of how to enrich and the function that does the work to enrich"
											},
											"type": {
												"type": "reference",
												"id": 2368,
												"typeArguments": [
													{
														"type": "reference",
														"id": 44,
														"name": "T"
													},
													{
														"type": "reference",
														"id": 45,
														"name": "U"
													}
												],
												"name": "EnrichOptions"
											}
										},
										{
											"id": 2903,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A function called when all events have been processed"
											},
											"type": {
												"type": "reference",
												"id": 2329,
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2939,
							"name": "eventIdFromTimestamp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 556,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 2940,
									"name": "eventIdFromTimestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Helper function to turn a timestamp into an RStreams event ID.",
										"returns": "The generated event ID"
									},
									"parameters": [
										{
											"id": 2941,
											"name": "timestamp",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The timestamp you want to turn into an RStreams event ID which can be anything used to construct a Moment object"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "moment.MomentInput",
												"package": "moment",
												"name": "MomentInput"
											}
										},
										{
											"id": 2942,
											"name": "granularity",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Specify the granularity of the event ID, maybe just year/month or year/month/hour, etc."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 2943,
							"name": "eventIdToTimestamp",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 565,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 2944,
									"name": "eventIdToTimestamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Helper function to turn a an RStreams event ID into a timestamp.",
										"returns": "The timestamp as a time since the epoch"
									},
									"parameters": [
										{
											"id": 2945,
											"name": "eid",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The event ID to turn into an epoch timestamp"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							]
						},
						{
							"id": 3197,
							"name": "fromCSV",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 1019,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3198,
									"name": "fromCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that will parse events from a CSV file and send them to the next step.\nUnderneath the covers it uses the popular [fast-csv](https://c2fo.github.io/fast-csv) node library.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 3199,
											"name": "fieldList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "List of fields to transform | true builds the header list dynmaically"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 3200,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "fastCSV options https://c2fo.github.io/fast-csv/docs/parsing/options"
											},
											"type": {
												"type": "reference",
												"id": 593,
												"name": "FromCsvOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2881,
							"name": "fromLeo",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 748,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2882,
									"name": "fromLeo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a pipeline step that reads from the RStreams bus instance queue `inQueue` doing so\nas bot `botId`.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 2883,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of data that will be read from the queue."
											}
										}
									],
									"parameters": [
										{
											"id": 2884,
											"name": "botId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The bot to read as"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2885,
											"name": "inQueue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The queue to read from"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2886,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The options on how to read from this queue"
											},
											"type": {
												"type": "reference",
												"id": 2342,
												"name": "ReadOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1872,
												"typeArguments": [
													{
														"type": "reference",
														"id": 51,
														"name": "T"
													}
												],
												"name": "ReadEvent"
											}
										],
										"name": "ReadableStream"
									}
								}
							]
						},
						{
							"id": 2922,
							"name": "fromS3",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 946,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2923,
									"name": "fromS3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that can act as the first step in a pipeline, the source, which reads data\nfrom an S3 file.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2924,
											"name": "file",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "What to read from."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2925,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2926,
															"name": "bucket",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The name of the S3 bucket to read from"
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 948,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2927,
															"name": "key",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The name of the file in the bucket to read from"
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 951,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2928,
															"name": "range",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "Read from a specific range in the file.  This is a string that must look like this:\n`bytes=<startingByteoffset>-<endingByteOffset>` where `<startingByteoffset>` is the start position to read from\nand `<endingByteOffset>` is the ending position to read from, exclusive."
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 960,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2926,
																2927,
																2928
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "internal.Readable",
										"package": "@types/node",
										"name": "stream.Readable"
									}
								}
							]
						},
						{
							"id": 3111,
							"name": "gunzip",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 883,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3112,
									"name": "gunzip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that uncompresses the data that flows through it.",
										"text": "This is an export of the `zlib` libraries `createGunzip` function which is used to uncompress\ncontent as it moves through a pipeline.\n",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 3113,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "ZlibOptions",
												"package": "@types/node",
												"name": "ZlibOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Gunzip",
										"package": "@types/node",
										"name": "Gunzip"
									}
								}
							]
						},
						{
							"id": 3108,
							"name": "gzip",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 873,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3109,
									"name": "gzip",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that compresses the data that flows through it.",
										"text": "This is an export of the `zlib` libraries `createGzip` function which is used to compress\ncontent as it moves through a pipeline.\n",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 3110,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "ZlibOptions",
												"package": "@types/node",
												"name": "ZlibOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "Gzip",
										"package": "@types/node",
										"name": "Gzip"
									}
								}
							]
						},
						{
							"id": 2909,
							"name": "load",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 838,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2910,
									"name": "load",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that acts as the last step of the pipeline, the sink, writing events sent to the\npipeline step to the queue specified."
									},
									"typeParameter": [
										{
											"id": 2911,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data received by the pipeline step"
											}
										}
									],
									"parameters": [
										{
											"id": 2912,
											"name": "botId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The bot to act as when writing, events will be marked as written by this bot"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2913,
											"name": "outQueue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The queue into which events will be written"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2914,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "An object that contains config values that control the flow of events to outQueue"
											},
											"type": {
												"type": "reference",
												"id": 2336,
												"name": "WriteOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1856,
														"typeArguments": [
															{
																"type": "reference",
																"id": 31,
																"name": "T"
															}
														],
														"name": "Event"
													},
													{
														"type": "reference",
														"id": 31,
														"name": "T"
													}
												]
											}
										],
										"name": "WritableStream"
									}
								}
							]
						},
						{
							"id": 3098,
							"name": "log",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 695,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3099,
									"name": "log",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that will log events as they pass through which can be helpful for debugging in between streaming operations.",
										"returns": "The pipeline step that is ready to be used in a pipeline"
									},
									"typeParameter": [
										{
											"id": 3100,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data that flows through the step to be logged"
											}
										}
									],
									"parameters": [
										{
											"id": 3101,
											"name": "prefix",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If provided, this prefix is included with each log"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 460,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 460,
												"name": "T"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2904,
							"name": "offload",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 826,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2905,
									"name": "offload",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a callback-based version of [[`RStreamsSdk.offloadEvents`]].",
										"text": "It reads events from a queue to do general processing (such as write to an external DB).  It's called\noffload because it is commonly used to process events and offload them to external resources\nsuch as ElasticSearch or other databases that are off of the RStreams Bus.\n\nIt reads from the queue specified in `opts` and then calls the `opts.transform` function passing in the\nevents retrieved so they may be processed.\n"
									},
									"typeParameter": [
										{
											"id": 2906,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data read from the RStreams bus queue"
											}
										}
									],
									"parameters": [
										{
											"id": 2907,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2378,
												"typeArguments": [
													{
														"type": "reference",
														"id": 38,
														"name": "T"
													}
												],
												"name": "OffloadOptions"
											}
										},
										{
											"id": 2908,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2329,
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2866,
							"name": "parse",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 622,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2867,
									"name": "parse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A pipeline step that will split and parse [JSON lines](https://jsonlines.org/), turning them into events.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 2868,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of object produced from parsing the JSON objects."
											}
										}
									],
									"parameters": [
										{
											"id": 2869,
											"name": "skipErrors",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If true and there's a parse error, the error and the JSON line that couldn't be parsed is skipped.  Defaults to false."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"id": 2868,
												"name": "T"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2915,
							"name": "passThrough",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 913,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2916,
									"name": "passThrough",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that allows events to move through the step.  This is only used in special\ncases and most will not have occasion to use this.",
										"text": "I need to preread a database to start generating data.  But I need to give you something you can pipe to.  So, I give you\na passthrough.  It's used if you are the source of you want to put a sink in the middle of a pipe.  So, writing to an S3 file\nis a sink step but we do it in the middle of the stream because we generate many s3 files.  We pipe it to S3 and then we pipe the\nresults of that into a pass through.\n",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2917,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The options for transforming."
											},
											"type": {
												"type": "reference",
												"qualifiedName": "internal.TransformOptions",
												"package": "@types/node",
												"name": "TransformOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "internal.Transform",
										"package": "@types/node",
										"name": "stream.Transform"
									}
								}
							]
						},
						{
							"id": 2947,
							"name": "pipe",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 597,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 2948,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
										"text": "The type definitions make this look daunting.  It's not.  It's merely a set of pipeline steps in a series where\nthe first step in the pipeline is the source that produces content, perhaps by reading it from a queue of the bus,\nand then the data is sent to the next step and so on until the final step, the sink, gets the data.\n\nThe reason the types look so complicated is because there must be a specific type for the exact sequence of\npossible pipeline steps that one might chain together.  The different parameterized types, T1/T2/etc., represent\nthe data type of the data events that are produced and are modified and move down through the pipe.\n\nNote that developers don't really need to understand hardly any of this.  Developers need only ask what type\nof pipe they want to create.  Do I want a pipe that just reads from a queue and doesn't send it anywhere else?\nWell, that's an [[`RStreamsSdk.offload`]] pipe.  Do you want to read from one queue, do some processing and/or\ntransformation and/or filtering and then write the result to another queue?  Well that's an [[`RStreamsSdk.enrich`]] or\n[[`RStreamsSdk.enrichEvents`]].  With these, you don't have to construct a pipe yourself as these helper methods\ncraft one purpose-built for you.\n\nIf you need to do something more involved then this method is for you.  Even then, the SDK dramatically simplifies things\nso you don't have to craft your own pipeline steps.  Instead, you simply call an SDK function to create an instance\nof a pipeline step that does what you want it to.\n"
									},
									"typeParameter": [
										{
											"id": 2949,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2950,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 256,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 2951,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 998,
														"typeArguments": [
															{
																"type": "reference",
																"id": 256,
																"name": "T1"
															}
														],
														"name": "WritableStream"
													},
													{
														"type": "reference",
														"qualifiedName": "internal.Writable",
														"package": "@types/node",
														"name": "Writable"
													}
												]
											}
										},
										{
											"id": 2952,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 256,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "stream.Writable"
											}
										]
									}
								},
								{
									"id": 2953,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
										"text": "The type definitions make this look daunting.  It's not.  It's merely a set of pipeline steps in a series where\nthe first step in the pipeline is the source that produces content, perhaps by reading it from a queue of the bus,\nand then the data is sent to the next step and so on until the final step, the sink, gets the data.\n\nThe reason the types look so complicated is because there must be a specific type for the exact sequence of\npossible pipeline steps that one might chain together.  The different parameterized types, T1/T2/etc., represent\nthe data type of the data events that are produced and are modified and move down through the pipe.\n\nNote that developers don't really need to understand hardly any of this.  Developers need only ask what type\nof pipe they want to create.  Do I want a pipe that just reads from a queue and doesn't send it anywhere else?\nWell, that's an [[`RStreamsSdk.offload`]] pipe.  Do you want to read from one queue, do some processing and/or\ntransformation and/or filtering and then write the result to another queue?  Well that's an [[`RStreamsSdk.enrich`]] or\n[[`RStreamsSdk.enrichEvents`]].  With these, you don't have to construct a pipe yourself as these helper methods\ncraft one purpose-built for you.\n\nIf you need to do something more involved then this method is for you.  Even then, the SDK dramatically simplifies things\nso you don't have to craft your own pipeline steps.  Instead, you simply call an SDK function to create an instance\nof a pipeline step that does what you want it to.\n"
									},
									"typeParameter": [
										{
											"id": 2954,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2955,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2956,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 261,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 2957,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 261,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 262,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2958,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "internal.Writable",
														"package": "@types/node",
														"name": "Writable"
													},
													{
														"type": "reference",
														"id": 998,
														"typeArguments": [
															{
																"type": "reference",
																"id": 262,
																"name": "T2"
															}
														],
														"name": "WritableStream"
													}
												]
											}
										},
										{
											"id": 2959,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 262,
														"name": "T2"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "stream.Writable"
											}
										]
									}
								},
								{
									"id": 2960,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
										"text": "The type definitions make this look daunting.  It's not.  It's merely a set of pipeline steps in a series where\nthe first step in the pipeline is the source that produces content, perhaps by reading it from a queue of the bus,\nand then the data is sent to the next step and so on until the final step, the sink, gets the data.\n\nThe reason the types look so complicated is because there must be a specific type for the exact sequence of\npossible pipeline steps that one might chain together.  The different parameterized types, T1/T2/etc., represent\nthe data type of the data events that are produced and are modified and move down through the pipe.\n\nNote that developers don't really need to understand hardly any of this.  Developers need only ask what type\nof pipe they want to create.  Do I want a pipe that just reads from a queue and doesn't send it anywhere else?\nWell, that's an [[`RStreamsSdk.offload`]] pipe.  Do you want to read from one queue, do some processing and/or\ntransformation and/or filtering and then write the result to another queue?  Well that's an [[`RStreamsSdk.enrich`]] or\n[[`RStreamsSdk.enrichEvents`]].  With these, you don't have to construct a pipe yourself as these helper methods\ncraft one purpose-built for you.\n\nIf you need to do something more involved then this method is for you.  Even then, the SDK dramatically simplifies things\nso you don't have to craft your own pipeline steps.  Instead, you simply call an SDK function to create an instance\nof a pipeline step that does what you want it to.\n"
									},
									"typeParameter": [
										{
											"id": 2961,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2962,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2963,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2964,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 268,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 2965,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 268,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 269,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2966,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 269,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 270,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2967,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "internal.Writable",
														"package": "@types/node",
														"name": "Writable"
													},
													{
														"type": "reference",
														"id": 998,
														"typeArguments": [
															{
																"type": "reference",
																"id": 270,
																"name": "T3"
															}
														],
														"name": "WritableStream"
													}
												]
											}
										},
										{
											"id": 2968,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 270,
														"name": "T3"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "stream.Writable"
											}
										]
									}
								},
								{
									"id": 2969,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
										"text": "The type definitions make this look daunting.  It's not.  It's merely a set of pipeline steps in a series where\nthe first step in the pipeline is the source that produces content, perhaps by reading it from a queue of the bus,\nand then the data is sent to the next step and so on until the final step, the sink, gets the data.\n\nThe reason the types look so complicated is because there must be a specific type for the exact sequence of\npossible pipeline steps that one might chain together.  The different parameterized types, T1/T2/etc., represent\nthe data type of the data events that are produced and are modified and move down through the pipe.\n\nNote that developers don't really need to understand hardly any of this.  Developers need only ask what type\nof pipe they want to create.  Do I want a pipe that just reads from a queue and doesn't send it anywhere else?\nWell, that's an [[`RStreamsSdk.offload`]] pipe.  Do you want to read from one queue, do some processing and/or\ntransformation and/or filtering and then write the result to another queue?  Well that's an [[`RStreamsSdk.enrich`]] or\n[[`RStreamsSdk.enrichEvents`]].  With these, you don't have to construct a pipe yourself as these helper methods\ncraft one purpose-built for you.\n\nIf you need to do something more involved then this method is for you.  Even then, the SDK dramatically simplifies things\nso you don't have to craft your own pipeline steps.  Instead, you simply call an SDK function to create an instance\nof a pipeline step that does what you want it to.\n"
									},
									"typeParameter": [
										{
											"id": 2970,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2971,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2972,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2973,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2974,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 277,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 2975,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 277,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 278,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2976,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 278,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 279,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2977,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 279,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 280,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2978,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "internal.Writable",
														"package": "@types/node",
														"name": "Writable"
													},
													{
														"type": "reference",
														"id": 998,
														"typeArguments": [
															{
																"type": "reference",
																"id": 280,
																"name": "T4"
															}
														],
														"name": "WritableStream"
													}
												]
											}
										},
										{
											"id": 2979,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 280,
														"name": "T4"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "stream.Writable"
											}
										]
									}
								},
								{
									"id": 2980,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
										"text": "The type definitions make this look daunting.  It's not.  It's merely a set of pipeline steps in a series where\nthe first step in the pipeline is the source that produces content, perhaps by reading it from a queue of the bus,\nand then the data is sent to the next step and so on until the final step, the sink, gets the data.\n\nThe reason the types look so complicated is because there must be a specific type for the exact sequence of\npossible pipeline steps that one might chain together.  The different parameterized types, T1/T2/etc., represent\nthe data type of the data events that are produced and are modified and move down through the pipe.\n\nNote that developers don't really need to understand hardly any of this.  Developers need only ask what type\nof pipe they want to create.  Do I want a pipe that just reads from a queue and doesn't send it anywhere else?\nWell, that's an [[`RStreamsSdk.offload`]] pipe.  Do you want to read from one queue, do some processing and/or\ntransformation and/or filtering and then write the result to another queue?  Well that's an [[`RStreamsSdk.enrich`]] or\n[[`RStreamsSdk.enrichEvents`]].  With these, you don't have to construct a pipe yourself as these helper methods\ncraft one purpose-built for you.\n\nIf you need to do something more involved then this method is for you.  Even then, the SDK dramatically simplifies things\nso you don't have to craft your own pipeline steps.  Instead, you simply call an SDK function to create an instance\nof a pipeline step that does what you want it to.\n"
									},
									"typeParameter": [
										{
											"id": 2981,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2982,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2983,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2984,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2985,
											"name": "T5",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2986,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 288,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 2987,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 288,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 289,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2988,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 289,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 290,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2989,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 290,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 291,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2990,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 291,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 292,
														"name": "T5"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 2991,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "internal.Writable",
														"package": "@types/node",
														"name": "Writable"
													},
													{
														"type": "reference",
														"id": 998,
														"typeArguments": [
															{
																"type": "reference",
																"id": 292,
																"name": "T5"
															}
														],
														"name": "WritableStream"
													}
												]
											}
										},
										{
											"id": 2992,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 292,
														"name": "T5"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "stream.Writable"
											}
										]
									}
								},
								{
									"id": 2993,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
										"text": "The type definitions make this look daunting.  It's not.  It's merely a set of pipeline steps in a series where\nthe first step in the pipeline is the source that produces content, perhaps by reading it from a queue of the bus,\nand then the data is sent to the next step and so on until the final step, the sink, gets the data.\n\nThe reason the types look so complicated is because there must be a specific type for the exact sequence of\npossible pipeline steps that one might chain together.  The different parameterized types, T1/T2/etc., represent\nthe data type of the data events that are produced and are modified and move down through the pipe.\n\nNote that developers don't really need to understand hardly any of this.  Developers need only ask what type\nof pipe they want to create.  Do I want a pipe that just reads from a queue and doesn't send it anywhere else?\nWell, that's an [[`RStreamsSdk.offload`]] pipe.  Do you want to read from one queue, do some processing and/or\ntransformation and/or filtering and then write the result to another queue?  Well that's an [[`RStreamsSdk.enrich`]] or\n[[`RStreamsSdk.enrichEvents`]].  With these, you don't have to construct a pipe yourself as these helper methods\ncraft one purpose-built for you.\n\nIf you need to do something more involved then this method is for you.  Even then, the SDK dramatically simplifies things\nso you don't have to craft your own pipeline steps.  Instead, you simply call an SDK function to create an instance\nof a pipeline step that does what you want it to.\n"
									},
									"typeParameter": [
										{
											"id": 2994,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2995,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2996,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2997,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2998,
											"name": "T5",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 2999,
											"name": "T6",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3000,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 301,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3001,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 301,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 302,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3002,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 302,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 303,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3003,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 303,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 304,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3004,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 304,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 305,
														"name": "T5"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3005,
											"name": "t5",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 305,
														"name": "T5"
													},
													{
														"type": "reference",
														"id": 306,
														"name": "T6"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3006,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "internal.Writable",
														"package": "@types/node",
														"name": "Writable"
													},
													{
														"type": "reference",
														"id": 998,
														"typeArguments": [
															{
																"type": "reference",
																"id": 306,
																"name": "T6"
															}
														],
														"name": "WritableStream"
													}
												]
											}
										},
										{
											"id": 3007,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 306,
														"name": "T6"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "stream.Writable"
											}
										]
									}
								}
							]
						},
						{
							"id": 3008,
							"name": "pipeAsync",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 604,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3009,
									"name": "pipeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An async/await friendly version of [[`pipe`]].  Reference the docs there.",
										"tags": [
											{
												"tag": "see",
												"text": "[[`pipe`]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3010,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3011,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 317,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3012,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 317,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								},
								{
									"id": 3013,
									"name": "pipeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An async/await friendly version of [[`pipe`]].  Reference the docs there.",
										"tags": [
											{
												"tag": "see",
												"text": "[[`pipe`]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3014,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3015,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3016,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 321,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3017,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 321,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 322,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3018,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 322,
														"name": "T2"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								},
								{
									"id": 3019,
									"name": "pipeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An async/await friendly version of [[`pipe`]].  Reference the docs there.",
										"tags": [
											{
												"tag": "see",
												"text": "[[`pipe`]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3020,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3021,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3022,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3023,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 327,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3024,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 327,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 328,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3025,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 328,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 329,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3026,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 329,
														"name": "T3"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								},
								{
									"id": 3027,
									"name": "pipeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An async/await friendly version of [[`pipe`]].  Reference the docs there.",
										"tags": [
											{
												"tag": "see",
												"text": "[[`pipe`]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3028,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3029,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3030,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3031,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3032,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 335,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3033,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 335,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 336,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3034,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 336,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 337,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3035,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 337,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 338,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3036,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 338,
														"name": "T4"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								},
								{
									"id": 3037,
									"name": "pipeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An async/await friendly version of [[`pipe`]].  Reference the docs there.",
										"tags": [
											{
												"tag": "see",
												"text": "[[`pipe`]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3038,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3039,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3040,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3041,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3042,
											"name": "T5",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3043,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 345,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3044,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 345,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 346,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3045,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 346,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 347,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3046,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 347,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 348,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3047,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 348,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 349,
														"name": "T5"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3048,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 349,
														"name": "T5"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								},
								{
									"id": 3049,
									"name": "pipeAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An async/await friendly version of [[`pipe`]].  Reference the docs there.",
										"tags": [
											{
												"tag": "see",
												"text": "[[`pipe`]]\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3050,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3051,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3052,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3053,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3054,
											"name": "T5",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3055,
											"name": "T6",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3056,
											"name": "read",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 357,
														"name": "T1"
													}
												],
												"name": "ReadableStream"
											}
										},
										{
											"id": 3057,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 357,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 358,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3058,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 358,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 359,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3059,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 359,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 360,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3060,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 360,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 361,
														"name": "T5"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3061,
											"name": "t5",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 361,
														"name": "T5"
													},
													{
														"type": "reference",
														"id": 362,
														"name": "T6"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3062,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 362,
														"name": "T6"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 3122,
							"name": "pipeline",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 924,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3123,
									"name": "pipeline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is very advanced functionality that likely won't be used very often. It takes a list of pipeline steps\nand turns them into a single Transform stream step.  If you have to ask why you'd want to do this, you probably\ndon't need to know to do this."
									},
									"typeParameter": [
										{
											"id": 3124,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3125,
											"name": "D",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 372,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 373,
														"name": "D"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 3126,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 372,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										},
										{
											"id": 3127,
											"name": "drain",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 373,
												"name": "D"
											}
										},
										{
											"id": 3128,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 373,
											"name": "D"
										},
										"extendsType": {
											"type": "reference",
											"id": 622,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "ReadableStream"
										},
										"trueType": {
											"type": "reference",
											"id": 1377,
											"typeArguments": [
												{
													"type": "reference",
													"id": 372,
													"name": "T1"
												},
												{
													"type": "reference",
													"name": "U"
												}
											],
											"name": "TransformStream"
										},
										"falseType": {
											"type": "reference",
											"id": 998,
											"typeArguments": [
												{
													"type": "reference",
													"id": 372,
													"name": "T1"
												}
											],
											"name": "WritableStream"
										}
									}
								},
								{
									"id": 3129,
									"name": "pipeline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is very advanced functionality that likely won't be used very often. It takes a list of pipeline steps\nand turns them into a single Transform stream step.  If you have to ask why you'd want to do this, you probably\ndon't need to know to do this."
									},
									"typeParameter": [
										{
											"id": 3130,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3131,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3132,
											"name": "D",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 379,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 380,
														"name": "D"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 3133,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 378,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										},
										{
											"id": 3134,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 378,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 379,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3135,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 380,
												"name": "D"
											}
										},
										{
											"id": 3136,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 380,
											"name": "D"
										},
										"extendsType": {
											"type": "reference",
											"id": 622,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "ReadableStream"
										},
										"trueType": {
											"type": "reference",
											"id": 1377,
											"typeArguments": [
												{
													"type": "reference",
													"id": 378,
													"name": "T1"
												},
												{
													"type": "reference",
													"name": "U"
												}
											],
											"name": "TransformStream"
										},
										"falseType": {
											"type": "reference",
											"id": 998,
											"typeArguments": [
												{
													"type": "reference",
													"id": 378,
													"name": "T1"
												}
											],
											"name": "WritableStream"
										}
									}
								},
								{
									"id": 3137,
									"name": "pipeline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is very advanced functionality that likely won't be used very often. It takes a list of pipeline steps\nand turns them into a single Transform stream step.  If you have to ask why you'd want to do this, you probably\ndon't need to know to do this."
									},
									"typeParameter": [
										{
											"id": 3138,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3139,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3140,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3141,
											"name": "D",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 388,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 389,
														"name": "D"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 3142,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 386,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										},
										{
											"id": 3143,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 386,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 387,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3144,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 387,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 388,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3145,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 389,
												"name": "D"
											}
										},
										{
											"id": 3146,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 389,
											"name": "D"
										},
										"extendsType": {
											"type": "reference",
											"id": 622,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "ReadableStream"
										},
										"trueType": {
											"type": "reference",
											"id": 1377,
											"typeArguments": [
												{
													"type": "reference",
													"id": 386,
													"name": "T1"
												},
												{
													"type": "reference",
													"name": "U"
												}
											],
											"name": "TransformStream"
										},
										"falseType": {
											"type": "reference",
											"id": 998,
											"typeArguments": [
												{
													"type": "reference",
													"id": 386,
													"name": "T1"
												}
											],
											"name": "WritableStream"
										}
									}
								},
								{
									"id": 3147,
									"name": "pipeline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is very advanced functionality that likely won't be used very often. It takes a list of pipeline steps\nand turns them into a single Transform stream step.  If you have to ask why you'd want to do this, you probably\ndon't need to know to do this."
									},
									"typeParameter": [
										{
											"id": 3148,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3149,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3150,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3151,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3152,
											"name": "D",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 399,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 400,
														"name": "D"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 3153,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 396,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										},
										{
											"id": 3154,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 396,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 397,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3155,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 397,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 398,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3156,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 398,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 399,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3157,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 400,
												"name": "D"
											}
										},
										{
											"id": 3158,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 400,
											"name": "D"
										},
										"extendsType": {
											"type": "reference",
											"id": 622,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "ReadableStream"
										},
										"trueType": {
											"type": "reference",
											"id": 1377,
											"typeArguments": [
												{
													"type": "reference",
													"id": 396,
													"name": "T1"
												},
												{
													"type": "reference",
													"name": "U"
												}
											],
											"name": "TransformStream"
										},
										"falseType": {
											"type": "reference",
											"id": 998,
											"typeArguments": [
												{
													"type": "reference",
													"id": 396,
													"name": "T1"
												}
											],
											"name": "WritableStream"
										}
									}
								},
								{
									"id": 3159,
									"name": "pipeline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is very advanced functionality that likely won't be used very often. It takes a list of pipeline steps\nand turns them into a single Transform stream step.  If you have to ask why you'd want to do this, you probably\ndon't need to know to do this."
									},
									"typeParameter": [
										{
											"id": 3160,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3161,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3162,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3163,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3164,
											"name": "T5",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3165,
											"name": "D",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 412,
														"name": "T5"
													},
													{
														"type": "reference",
														"id": 413,
														"name": "D"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 3166,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 408,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										},
										{
											"id": 3167,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 408,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 409,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3168,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 409,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 410,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3169,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 410,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 411,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3170,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 411,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 412,
														"name": "T5"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3171,
											"name": "t5",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 413,
												"name": "D"
											}
										},
										{
											"id": 3172,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 413,
											"name": "D"
										},
										"extendsType": {
											"type": "reference",
											"id": 622,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "ReadableStream"
										},
										"trueType": {
											"type": "reference",
											"id": 1377,
											"typeArguments": [
												{
													"type": "reference",
													"id": 408,
													"name": "T1"
												},
												{
													"type": "reference",
													"name": "U"
												}
											],
											"name": "TransformStream"
										},
										"falseType": {
											"type": "reference",
											"id": 998,
											"typeArguments": [
												{
													"type": "reference",
													"id": 408,
													"name": "T1"
												}
											],
											"name": "WritableStream"
										}
									}
								},
								{
									"id": 3173,
									"name": "pipeline",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is very advanced functionality that likely won't be used very often. It takes a list of pipeline steps\nand turns them into a single Transform stream step.  If you have to ask why you'd want to do this, you probably\ndon't need to know to do this."
									},
									"typeParameter": [
										{
											"id": 3174,
											"name": "T1",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3175,
											"name": "T2",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3176,
											"name": "T3",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3177,
											"name": "T4",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3178,
											"name": "T5",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3179,
											"name": "T6",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 3180,
											"name": "D",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 427,
														"name": "T6"
													},
													{
														"type": "reference",
														"id": 428,
														"name": "D"
													}
												],
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 3181,
											"name": "write",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 422,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											}
										},
										{
											"id": 3182,
											"name": "t1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 422,
														"name": "T1"
													},
													{
														"type": "reference",
														"id": 423,
														"name": "T2"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3183,
											"name": "t2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 423,
														"name": "T2"
													},
													{
														"type": "reference",
														"id": 424,
														"name": "T3"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3184,
											"name": "t3",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 424,
														"name": "T3"
													},
													{
														"type": "reference",
														"id": 425,
														"name": "T4"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3185,
											"name": "t4",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 425,
														"name": "T4"
													},
													{
														"type": "reference",
														"id": 426,
														"name": "T5"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3186,
											"name": "t5",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 426,
														"name": "T5"
													},
													{
														"type": "reference",
														"id": 427,
														"name": "T6"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 3187,
											"name": "t6",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 428,
												"name": "D"
											}
										},
										{
											"id": 3188,
											"name": "errorCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "conditional",
										"checkType": {
											"type": "reference",
											"id": 428,
											"name": "D"
										},
										"extendsType": {
											"type": "reference",
											"id": 622,
											"typeArguments": [
												{
													"type": "inferred",
													"name": "U"
												}
											],
											"name": "ReadableStream"
										},
										"trueType": {
											"type": "reference",
											"id": 1377,
											"typeArguments": [
												{
													"type": "reference",
													"id": 422,
													"name": "T1"
												},
												{
													"type": "reference",
													"name": "U"
												}
											],
											"name": "TransformStream"
										},
										"falseType": {
											"type": "reference",
											"id": 998,
											"typeArguments": [
												{
													"type": "reference",
													"id": 422,
													"name": "T1"
												}
											],
											"name": "WritableStream"
										}
									}
								}
							]
						},
						{
							"id": 2870,
							"name": "stats",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 709,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2871,
									"name": "stats",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that is used to manually get/set the checkpoint.  Often, this pipeline step is used to get\nand store checkpoints and then at the very end of the pipeline, it will use the saved off data to checkpoint\nmanaully checkpoint.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2872,
											"name": "botId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The bot that is doing the reading."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2873,
											"name": "queue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The queue we need to checkpoint where we've read to on behalf of the bot `botId`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2874,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "How often to checkpoint."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2875,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2876,
															"name": "records",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Checkpoint after this number of records or as soon as the `time` condition is met if used and happens sooner."
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 713,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2877,
															"name": "time",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Checkpoint after this amount of time or as soon as the `records` condition is met if used and happens sooner.\nNote, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject."
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 720,
																	"character": 2
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "moment.DurationInputArg1",
																"package": "moment",
																"name": "DurationInputArg1"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2876,
																2877
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2403,
										"name": "StatsStream"
									}
								}
							]
						},
						{
							"id": 3106,
							"name": "stringify",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 863,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3107,
									"name": "stringify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that turns a Javascript object into a [JSON line](https://jsonlines.org/)\n(newline at the end of the stringified JS object). This is used to make it easy to create JSON lines files.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 3064,
							"name": "through",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 650,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3065,
									"name": "through",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a callback based pipeline step that will take data in, possibly transform the data or do computation, and then\nsends the result on to the next step in the pipeline.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n",
										"tags": [
											{
												"tag": "see",
												"text": "[[`throughAsync`]]"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3066,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data sent in to be passed through this step."
											}
										},
										{
											"id": 3067,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of data to be sent on to the next step in the pipeline."
											}
										}
									],
									"parameters": [
										{
											"id": 3068,
											"name": "transform",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function that does the work of taking the data in, doing something with it and then calling the done function when done.\n  The first arg is stripped off by Javascript since it recognizes that the this arg is just to set the this context\n  so that the `this` keyword will work inside the function and itself be the instance of the transform stream which can be useful.\n  For example, say you want to push to an event in here to a queue.  You could do that by calling\n  `this.push` to push the event to a queue while still sending the queue on the next step in the pipeline afterwards.\n\n  So, the first real argument your function will receive is `obj` which is the data event being sent in to be processed/transformed\n  and sent on to the next pipeline step.  The second arg is `done`.  You call this when you're done.  Call `done()` if there's no error\n  but you want to filter out this event and not pass it on to the next pipeline step.  Call `done(err)` if an error ocurreed where\n  `err` is a string or Error object.  Call `done(null, U)` when no error and you want to pass on an event to the next step in the\n  pipeline where `U` is the type of object being sent on.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3069,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3070,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3071,
																	"name": "this",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 1377,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 492,
																				"name": "T"
																			},
																			{
																				"type": "reference",
																				"id": 493,
																				"name": "U"
																			}
																		],
																		"name": "TransformStream"
																	}
																},
																{
																	"id": 3072,
																	"name": "obj",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 492,
																		"name": "T"
																	}
																},
																{
																	"id": 3073,
																	"name": "done",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 1820,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 493,
																				"name": "U"
																			},
																			{
																				"type": "reference",
																				"qualifiedName": "Error",
																				"package": "typescript",
																				"name": "Error"
																			}
																		],
																		"name": "DataCallback"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										},
										{
											"id": 3074,
											"name": "flush",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function to be called when the entire pipeline has been flushed to allow for cleanup, perhaps closing a DB connection."
											},
											"type": {
												"type": "reference",
												"id": 1849,
												"typeArguments": [
													{
														"type": "reference",
														"id": 493,
														"name": "U"
													},
													{
														"type": "reference",
														"qualifiedName": "Error",
														"package": "typescript",
														"name": "Error"
													}
												],
												"name": "FlushCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 492,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 493,
												"name": "U"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 3075,
							"name": "throughAsync",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 676,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3076,
									"name": "throughAsync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates an async/await-friendly pipeline step that will take data in, possibly transform the data or do computation, and then\nsends the result on to the next step in the pipeline.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n",
										"tags": [
											{
												"tag": "see",
												"text": "[[`through`]]"
											}
										]
									},
									"typeParameter": [
										{
											"id": 3077,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of the data sent in to be passed through this step."
											}
										},
										{
											"id": 3078,
											"name": "U",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"shortText": "The type of data to be sent on to the next step in the pipeline."
											}
										}
									],
									"parameters": [
										{
											"id": 3079,
											"name": "transform",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function that does the work of taking the data in, doing something with it and then rejecting or resolving\n  the promise with the result object type U.  If you resolve with no result data, the event is skipped and not sent to the next pipeline step.\n  The first arg is stripped off by Javascript since it recognizes that the this arg is just to set the this context\n  so that the `this` keyword will work inside the function and itself be the instance of the transform stream which can be useful.\n  For example, say you want to push to an event in here to a queue.  You could do that by calling\n  `this.push` to push the event to a queue while still sending the queue on the next step in the pipeline afterwards.\n\n  So, the first real argument your function will receive is `obj` which is the data event being sent in to be processed/transformed\n  and sent on to the next pipeline step.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3080,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3081,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3082,
																	"name": "this",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 1377,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 503,
																				"name": "T"
																			},
																			{
																				"type": "reference",
																				"id": 504,
																				"name": "U"
																			}
																		],
																		"name": "TransformStream"
																	}
																},
																{
																	"id": 3083,
																	"name": "obj",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 503,
																		"name": "T"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 504,
																		"name": "U"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 504,
																				"name": "U"
																			}
																		],
																		"qualifiedName": "Promise",
																		"package": "typescript",
																		"name": "Promise"
																	}
																]
															}
														}
													]
												}
											}
										},
										{
											"id": 3084,
											"name": "flush",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A function to be called when the entire pipeline has been flushed to allow for cleanup, perhaps closing a DB connection."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 3085,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 3086,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 3087,
																	"name": "this",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 1377,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 503,
																				"name": "T"
																			},
																			{
																				"type": "reference",
																				"id": 504,
																				"name": "U"
																			}
																		],
																		"name": "TransformStream"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 504,
																		"name": "U"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 504,
																				"name": "U"
																			}
																		],
																		"qualifiedName": "Promise",
																		"package": "typescript",
																		"name": "Promise"
																	}
																]
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 503,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 504,
												"name": "U"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 3193,
							"name": "toCSV",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 1007,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3194,
									"name": "toCSV",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step that will create a CSV file from the events that flow into this step.\nUnderneath the covers it uses the popular [fast-csv](https://c2fo.github.io/fast-csv) node library.",
										"returns": "The pipeline step that is ready to be used in a pipeline"
									},
									"parameters": [
										{
											"id": 3195,
											"name": "fieldList",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "List of fields to transform | true builds the header list dynmaically"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 3196,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "fastCSV options https://c2fo.github.io/fast-csv/docs/parsing/options\n"
											},
											"type": {
												"type": "reference",
												"id": 611,
												"name": "ToCsvOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2878,
							"name": "toCheckpoint",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 732,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2879,
									"name": "toCheckpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a pipeline step that will checkpoint and then pass the events on to the next step in the pipeline.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2880,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "When to checkpoint."
											},
											"type": {
												"type": "reference",
												"id": 2364,
												"name": "ToCheckpointOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "unknown"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2929,
							"name": "toDynamoDB",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 974,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2930,
									"name": "toDynamoDB",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A super convenient function to write data to Dynamo DB table as the final step in a pipeline, the sink, as events\nflow into the pipeline step.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2931,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name of the Dynamo DB table to write to"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2932,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The options for writing."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2933,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2934,
															"name": "hash",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 975,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2935,
															"name": "range",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 976,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 2936,
															"name": "records",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 977,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2937,
															"name": "size",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 978,
																	"character": 2
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 2938,
															"name": "time",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "lib/lib.d.ts",
																	"line": 979,
																	"character": 2
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "moment.DurationInputArg1",
																"package": "moment",
																"name": "DurationInputArg1"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																2934,
																2935,
																2936,
																2937,
																2938
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								}
							]
						},
						{
							"id": 2887,
							"name": "toLeo",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 762,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2888,
									"name": "toLeo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a pipeline step that takes the events from the previous pipeline step and then writes them\nto an RStreams bus queeu.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"typeParameter": [
										{
											"id": 2889,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2890,
											"name": "botId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The bot to act as when writing."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2891,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Options for writing"
											},
											"type": {
												"type": "reference",
												"id": 2336,
												"name": "WriteOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1856,
												"typeArguments": [
													{
														"type": "reference",
														"id": 58,
														"name": "T"
													}
												],
												"name": "Event"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "TransformStream"
									}
								}
							]
						},
						{
							"id": 2918,
							"name": "toS3",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 937,
									"character": 10
								}
							],
							"signatures": [
								{
									"id": 2919,
									"name": "toS3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This creates a pipeline step meant to be the last step in a pipeline, the sink, that writes events that flow into it\ninto S3.  You should micro-batch events before getting to this step to control how many events to write to the file.",
										"returns": "The pipeline step that is ready to be used in a pipeline\n"
									},
									"parameters": [
										{
											"id": 2920,
											"name": "Bucket",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name of the AWS S3 bucket to write the file to"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2921,
											"name": "File",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name of the file to write."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								}
							]
						},
						{
							"id": 3088,
							"name": "write",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 685,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 3089,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a sink, a step designed to be the last step in the pipe."
									},
									"typeParameter": [
										{
											"id": 3090,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3091,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 3092,
											"name": "func",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 569,
												"typeArguments": [
													{
														"type": "reference",
														"id": 516,
														"name": "T"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "CommandWrapFunction"
											}
										},
										{
											"id": 3093,
											"name": "flush",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FlushCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 516,
												"name": "T"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 3094,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a sink, a step designed to be the last step in the pipe."
									},
									"typeParameter": [
										{
											"id": 3095,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 3096,
											"name": "func",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 569,
												"typeArguments": [
													{
														"type": "reference",
														"id": 521,
														"name": "T"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "CommandWrapFunction"
											}
										},
										{
											"id": 3097,
											"name": "flush",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "FlushCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 521,
												"name": "T"
											}
										],
										"name": "WritableStream"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2946,
								3063
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3189,
								2892,
								3114,
								3102,
								2898,
								2939,
								2943,
								3197,
								2881,
								2922,
								3111,
								3108,
								2909,
								3098,
								2904,
								2866,
								2915,
								2947,
								3008,
								3122,
								2870,
								3106,
								3064,
								3075,
								3193,
								2878,
								2929,
								2887,
								2918,
								3088
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 545,
							"character": 25
						}
					]
				},
				{
					"id": 22,
					"name": "RStreamsSdk",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The main entry point for the RStreams Node SDK.  It exposes commonly used functionality\nin the SDK.  Many of these functions come from [[`StreamUtil`]] which also includes\nmore advanced capabilities."
					},
					"children": [
						{
							"id": 23,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 90,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 24,
									"name": "new RStreamsSdk",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 25,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 2,
														"name": "ConfigurationResources"
													},
													{
														"type": "query",
														"queryType": {
															"type": "reference",
															"id": 2271,
															"name": "default"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 22,
										"name": "RStreamsSdk"
									}
								}
							]
						},
						{
							"id": 92,
							"name": "aws",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 190,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 93,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 96,
											"name": "cloudformation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "A refernce to the AWS CloudFormation library."
											},
											"sources": [
												{
													"fileName": "index.d.ts",
													"line": 198,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "CloudFormation",
												"package": "aws-sdk",
												"name": "CloudFormation"
											}
										},
										{
											"id": 94,
											"name": "dynamodb",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Helpful methods for interacting with RStreams' DynamoDB tables."
											},
											"sources": [
												{
													"fileName": "index.d.ts",
													"line": 192,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"id": 1967,
												"name": "LeoDynamodb"
											}
										},
										{
											"id": 95,
											"name": "s3",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "A refernce to the AWS S3 library."
											},
											"sources": [
												{
													"fileName": "index.d.ts",
													"line": 195,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"qualifiedName": "S3",
												"package": "aws-sdk",
												"name": "S3"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												96,
												94,
												95
											]
										}
									]
								}
							}
						},
						{
							"id": 91,
							"name": "bot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "A library allowing one to manually create, update, checkpoint or retrieve information on a bot."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 189,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 143,
								"name": "LeoCron"
							}
						},
						{
							"id": 26,
							"name": "configuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Config used to communicate with AWS resources that comprise the RStreams Bus used by the SDK.\nIt is included here for information purposes and so you can access the AWS resources that\nthe SDK discovered and is using.",
								"tags": [
									{
										"tag": "see",
										"text": "[[`ConfigProviderChain`]]\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 98,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 11,
								"name": "Configuration"
							}
						},
						{
							"id": 27,
							"name": "streams",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "Rstreams Used to get the leo stream to do more advanced processing of the streams."
									}
								]
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 104,
									"character": 1
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"id": 2865,
									"name": "StreamUtil"
								}
							}
						},
						{
							"id": 61,
							"name": "checkpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 117,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 62,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 63,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Creates a pipeline step that will checkpoint and then pass the events on to the next step in the pipeline.",
												"returns": "The pipeline step that is ready to be used in a pipeline\n"
											},
											"parameters": [
												{
													"id": 64,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "When to checkpoint."
													},
													"type": {
														"type": "reference",
														"id": 2364,
														"name": "ToCheckpointOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "unknown"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "TransformStream"
											}
										}
									]
								}
							}
						},
						{
							"id": 97,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 205,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 98,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 99,
											"name": "__type",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"comment": {
												"tags": [
													{
														"tag": "deprecated",
														"text": "This is a legacy feature that is no longer used that remains for backward compatibility."
													}
												]
											},
											"parameters": [
												{
													"id": 100,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 101,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 102,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 103,
																			"name": "err",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 41,
							"name": "enrich",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 111,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 42,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 43,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This is a callback-based version of the [[`RStreamsSdk.enrichEvents`]] function.",
												"text": "It reads events from one queue and writes them to another queue.  Put another way,\nan enrich operation reads events from a source `inQueue` and then writes them to a destination `outQueue`,\nallowing for side effects or transformation in the process.\n\nThe [[`EnrichOptions.transform`]] function\nis called when events are retrieved from the source queue so you can transform them and send them to the\ndestination queue by calling the callback in the transform function.  The callback here as the second argument\nof this function is meant to be called when all enriching is done on all events (right before it closes down the stream),\nallowing you to do clean up like closing a DB connection or something.\n"
											},
											"typeParameter": [
												{
													"id": 44,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of the data event retrieved from the source queue"
													}
												},
												{
													"id": 45,
													"name": "U",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of the data event that is sent to the destination queue"
													}
												}
											],
											"parameters": [
												{
													"id": 46,
													"name": "opts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "TThe details of how to enrich and the function that does the work to enrich"
													},
													"type": {
														"type": "reference",
														"id": 2368,
														"typeArguments": [
															{
																"type": "reference",
																"id": 44,
																"name": "T"
															},
															{
																"type": "reference",
																"id": 45,
																"name": "U"
															}
														],
														"name": "EnrichOptions"
													}
												},
												{
													"id": 47,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "A function called when all events have been processed"
													},
													"type": {
														"type": "reference",
														"id": 2329,
														"name": "Callback"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 65,
							"name": "enrichEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 141,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 66,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 67,
											"name": "__type",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"comment": {
												"shortText": "This is an async/await friendly version of the [[`RStreamsSdk.enrich`]] function.",
												"text": "It reads events from one queue and writes them to another queue.  Put another way,\nan enrich operation reads events from a source `inQueue` and then writes them to a destination `outQueue`,\nallowing for side effects or transformation in the process.\n\nThe [[`EnrichOptions.transform`]] function\nis called when events are retrieved from the source queue so you can transform them and send them to the\ndestination queue by calling the callback in the transform function.  The callback here as the second argument\nof this function is meant to be called when all enriching is done on all events (right before it closes down the stream),\nallowing you to do clean up like closing a DB connection or something.\n",
												"tags": [
													{
														"tag": "see",
														"text": "[[`RStreamsSdk.enrich`]]"
													}
												]
											},
											"typeParameter": [
												{
													"id": 68,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of the event read from the source queue"
													}
												},
												{
													"id": 69,
													"name": "U",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of the event that will be written to the destination queue"
													}
												}
											],
											"parameters": [
												{
													"id": 70,
													"name": "opts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The details of how to enrich and the function that does the work to enrich"
													},
													"type": {
														"type": "reference",
														"id": 2368,
														"typeArguments": [
															{
																"type": "reference",
																"id": 68,
																"name": "T"
															},
															{
																"type": "reference",
																"id": 69,
																"name": "U"
															}
														],
														"name": "EnrichOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							}
						},
						{
							"id": 28,
							"name": "load",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 107,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 29,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 30,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This creates a pipeline step that acts as the last step of the pipeline, the sink, writing events sent to the\npipeline step to the queue specified."
											},
											"typeParameter": [
												{
													"id": 31,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of the data received by the pipeline step"
													}
												}
											],
											"parameters": [
												{
													"id": 32,
													"name": "botId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The bot to act as when writing, events will be marked as written by this bot"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 33,
													"name": "outQueue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The queue into which events will be written"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 34,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "An object that contains config values that control the flow of events to outQueue"
													},
													"type": {
														"type": "reference",
														"id": 2336,
														"name": "WriteOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 1856,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 31,
																		"name": "T"
																	}
																],
																"name": "Event"
															},
															{
																"type": "reference",
																"id": 31,
																"name": "T"
															}
														]
													}
												],
												"name": "WritableStream"
											}
										}
									]
								}
							}
						},
						{
							"id": 35,
							"name": "offload",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 109,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 36,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 37,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This is a callback-based version of [[`RStreamsSdk.offloadEvents`]].",
												"text": "It reads events from a queue to do general processing (such as write to an external DB).  It's called\noffload because it is commonly used to process events and offload them to external resources\nsuch as ElasticSearch or other databases that are off of the RStreams Bus.\n\nIt reads from the queue specified in `opts` and then calls the `opts.transform` function passing in the\nevents retrieved so they may be processed.\n"
											},
											"typeParameter": [
												{
													"id": 38,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of the data read from the RStreams bus queue"
													}
												}
											],
											"parameters": [
												{
													"id": 39,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2378,
														"typeArguments": [
															{
																"type": "reference",
																"id": 38,
																"name": "T"
															}
														],
														"name": "OffloadOptions"
													}
												},
												{
													"id": 40,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2329,
														"name": "Callback"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 71,
							"name": "offloadEvents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 155,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 72,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 73,
											"name": "__type",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"comment": {
												"shortText": "This is an async/await friendly version of [[`RStreamsSdk.offload`]].",
												"text": "It reads events from a queue to do general processing (such as write to an external DB).  It's called\noffload because it is commonly used to process events and offload them to external resources\nsuch as ElasticSearch or other databases that are off of the RStreams Bus.\n",
												"tags": [
													{
														"tag": "see",
														"text": "[[`RStreamsSdk.offload`]]"
													}
												]
											},
											"typeParameter": [
												{
													"id": 74,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {}
												}
											],
											"parameters": [
												{
													"id": 75,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 2378,
														"typeArguments": [
															{
																"type": "reference",
																"id": 74,
																"name": "T"
															}
														],
														"name": "OffloadOptions"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 76,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 172,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 77,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 78,
											"name": "__type",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"comment": {
												"shortText": "A callback-based function to write a single event to an RStreams queue.  There are occasions where\nthis is useful, perhaps inside a pipeline step.",
												"tags": [
													{
														"tag": "see",
														"text": "[[`RStreamsSdk.putEvents`]] An async/await friendly version of this function."
													}
												]
											},
											"typeParameter": [
												{
													"id": 79,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The data to write as the payload of the event"
													}
												}
											],
											"parameters": [
												{
													"id": 80,
													"name": "bot_id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The name of the bot to write the event as"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 81,
													"name": "outQueue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The name of the queue to write to"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 82,
													"name": "payload",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The data to write to the queue"
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 79,
																"name": "T"
															},
															{
																"type": "reference",
																"id": 1856,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 79,
																		"name": "T"
																	}
																],
																"name": "Event"
															}
														]
													}
												},
												{
													"id": 83,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The function to call when done"
													},
													"type": {
														"type": "reference",
														"id": 2329,
														"name": "Callback"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 84,
							"name": "putEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 186,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 85,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 86,
											"name": "__type",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"comment": {
												"shortText": "An async/await friendly function to write a single event to a queue.  There are occasions where\nthis is useful, perhaps inside a pipeline step."
											},
											"typeParameter": [
												{
													"id": 87,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The data to write as the payload of the event"
													}
												}
											],
											"parameters": [
												{
													"id": 88,
													"name": "bot_id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The name of the bot to write the event as"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 89,
													"name": "outQueue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The name of the queue to write to"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 90,
													"name": "payload",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The payload of the event to write"
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 87,
																"name": "T"
															},
															{
																"type": "reference",
																"id": 1856,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 87,
																		"name": "T"
																	}
																],
																"name": "Event"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"qualifiedName": "Promise",
												"package": "typescript",
												"name": "Promise"
											}
										}
									]
								}
							}
						},
						{
							"id": 48,
							"name": "read",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 113,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 49,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 50,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Create a pipeline step that reads from the RStreams bus instance queue `inQueue` doing so\nas bot `botId`.",
												"returns": "The pipeline step that is ready to be used in a pipeline\n"
											},
											"typeParameter": [
												{
													"id": 51,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"comment": {
														"shortText": "The type of data that will be read from the queue."
													}
												}
											],
											"parameters": [
												{
													"id": 52,
													"name": "botId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The bot to read as"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 53,
													"name": "inQueue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The queue to read from"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 54,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "The options on how to read from this queue"
													},
													"type": {
														"type": "reference",
														"id": 2342,
														"name": "ReadOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 622,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1872,
														"typeArguments": [
															{
																"type": "reference",
																"id": 51,
																"name": "T"
															}
														],
														"name": "ReadEvent"
													}
												],
												"name": "ReadableStream"
											}
										}
									]
								}
							}
						},
						{
							"id": 55,
							"name": "write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 115,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 56,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 57,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Create a pipeline step that takes the events from the previous pipeline step and then writes them\nto an RStreams bus queeu.",
												"returns": "The pipeline step that is ready to be used in a pipeline\n"
											},
											"typeParameter": [
												{
													"id": 58,
													"name": "T",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {}
												}
											],
											"parameters": [
												{
													"id": 59,
													"name": "botId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"shortText": "The bot to act as when writing."
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 60,
													"name": "config",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Options for writing"
													},
													"type": {
														"type": "reference",
														"id": 2336,
														"name": "WriteOptions"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1856,
														"typeArguments": [
															{
																"type": "reference",
																"id": 58,
																"name": "T"
															}
														],
														"name": "Event"
													},
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "TransformStream"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								23
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								92,
								91,
								26,
								27
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								61,
								97,
								41,
								65,
								28,
								35,
								71,
								76,
								84,
								48,
								55
							]
						}
					],
					"sources": [
						{
							"fileName": "index.d.ts",
							"line": 89,
							"character": 21
						}
					]
				},
				{
					"id": 2355,
					"name": "BufferOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "These options govern the movement of data between steps in a Node pipeline, with a step that is the\nsource producing events and eventually a sink that ends the pipeline.",
						"text": "It is used by adding an instance of this as a step in the pipeline itself to determine when to send\ndata to the next step in the pipeline."
					},
					"children": [
						{
							"id": 2361,
							"name": "commands",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "Don't use."
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 309,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2362,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 2363,
											"name": "ignoreCommands",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "lib/lib.d.ts",
													"line": 310,
													"character": 2
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2363
											]
										}
									]
								}
							}
						},
						{
							"id": 2359,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A display name to use when logging to the console."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 298,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2358,
							"name": "records",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The max number of records, events, to buffer before sending data to the next step in the pipeline.",
								"text": "The SDK will push events to the next step in the pipeline as soon as one of the\n`time`, `size` or `records` conditions are met.  It is common to set more than one to ensure\nthe pipeline moves smoothly whether there are many events available to move through the pipe or just a few.\n"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 295,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2357,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The max number of bytes to buffer before sending data to the next step in the pipeline.",
								"text": "The SDK will push events to the next step in the pipeline as soon as one of the\n`time`, `size` or `records` conditions are met.  It is common to set more than one to ensure\nthe pipeline moves smoothly whether there are many events available to move through the pipe or just a few.\n"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 286,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2356,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The amount of time to wait before sending data to the next step in the pipeline.",
								"text": "Note, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject.\n\nThe SDK will push events to the next step in the pipeline as soon as one of the\n`time`, `size` or `records` conditions are met.  It is common to set more than one to ensure\nthe pipeline moves smoothly whether there are many events available to move through the pipe or just a few.\n"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 277,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "moment.DurationInputArg1",
								"package": "moment",
								"name": "DurationInputArg1"
							}
						},
						{
							"id": 2360,
							"name": "writeStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Is this buffer acting as a transform stream or a writeable stream (true), meaning if true\nit's the sink."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 306,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2361,
								2359,
								2358,
								2357,
								2356,
								2360
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 264,
							"character": 17
						}
					]
				},
				{
					"id": 2396,
					"name": "CheckpointData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used to manually checkpoint in a pipeline step. It's only rarely used in more advanced cases where\none waits until the end of a pipeline to checkpoint manually.",
						"text": "Let's assume that we are reading from an upstream queue that we want to checkpoint to and keep track\nof where we've read to.  Let's assume that we are aggregating events from the upstream queue and turing\nsay 10 events from the upstream queue into just 1 event that we write to the downstream queue.  In this\ncase, we would probably wait until we've done the aggregation.  When we checkpoint, we would set\nthe `units` to 10, we'd set the `started_timestamp`and `ended_timestamp` to the first/last event timestamps\nof the 10 respectively and we'd set the `start_eid to the first event event IDs\nrespectively.\n",
						"tags": [
							{
								"tag": "see",
								"text": "[[`StreamUtil.stats`]] A function that can be called to set the checkpoint."
							},
							{
								"tag": "see",
								"text": "[[`StatsStream`]] Creates a pipeline step that you can use to get/set checkpoints manually"
							}
						]
					},
					"children": [
						{
							"id": 2397,
							"name": "eid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The exact event ID to checkpoint"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 493,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2401,
							"name": "ended_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Read the comment on this interface to understand what this is"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 510,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2399,
							"name": "source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The timestamp of the very first event that made it to a queue of the bus that then flowed down the bus\nto get to here.  This allows the bus to compute source lag times.  Each derivative event that flows down\nthe bus should track this and pass it along as events flow/are derived and flow down the bus."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 504,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2402,
							"name": "start_eid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Read the comment on this interface to understand what this is"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 513,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2400,
							"name": "started_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Read the comment on this interface to understand what this is"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 507,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2398,
							"name": "units",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Read the comment on this interface to understand what this is"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 496,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2397,
								2401,
								2399,
								2402,
								2400,
								2398
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 491,
							"character": 17
						}
					]
				},
				{
					"id": 11,
					"name": "Configuration",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "An internal representation of the actual configuration used.  Developers should not have to set\nanything in this config.  There are rare occasions when a developer may elect to set the AWS credentials\nhere manually, though the AWS SDK has much better means of discovering credentials in most cases."
					},
					"children": [
						{
							"id": 15,
							"name": "_meta",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Don't use."
									}
								]
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 55,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 16,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 17,
											"name": "region",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "index.d.ts",
													"line": 55,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												17
											]
										}
									]
								}
							}
						},
						{
							"id": 12,
							"name": "aws",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Stores the AWS region of the RStreams instance."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 52,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 13,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 14,
											"name": "region",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "index.d.ts",
													"line": 52,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												14
											]
										}
									]
								}
							}
						},
						{
							"id": 21,
							"name": "credentials",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The AWS credentials to use. In most cases AWS will discover these.  Set if using STS or other scenarios where want to manually set them."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 67,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "Credentials",
								"package": "aws-sdk",
								"name": "Credentials"
							}
						},
						{
							"id": 19,
							"name": "region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Stores the AWS region of the RStreams instance."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 61,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 20,
							"name": "registry",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "Allows different components of the SDK to internally share information."
									}
								]
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 64,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 18,
							"name": "resources",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The resources used to communicate with the AWS resources that comprise the RStreams Bus instance."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 58,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 2,
								"name": "ConfigurationResources"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								15,
								12,
								21,
								19,
								20,
								18
							]
						}
					],
					"sources": [
						{
							"fileName": "index.d.ts",
							"line": 50,
							"character": 17
						}
					]
				},
				{
					"id": 2,
					"name": "ConfigurationResources",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The SDK needs these to communicate with an instance of the RStreams Bus.\nThese AWS resources were created as part of the RStreams Bus instance that you mean to access.",
						"text": "You will only rarely have to set these or even know about these yourself.\n",
						"tags": [
							{
								"tag": "see",
								"text": "[[`ConfigProviderChain`]]\n"
							}
						]
					},
					"children": [
						{
							"id": 6,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The DynamoDB table name or ARN that stores the definition and state of all bots in the RStreams Bus instance."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 30,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 4,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The DynamoDB table name or ARN that stores the definition and state of all queues in the RStreams Bus instance."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 24,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 9,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the Firehose stream or ARN the RStreams Bus instance uses to push events into a queue."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 8,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the Kinesis stream or ARN the RStreams Bus instance uses to push events into a queue."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 7,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The S3 bucket name or ARN the RStreams Bus instance uses when reading/writing events to S3."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 10,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The DynamoDB table name or ARN that the RStreams Bus instance uses as a generic key/value store."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 5,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The DynamoDB table name or ARN that stores the actual events that flow through all queues in the RStreams Bus instance."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 27,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The AWS region, e.g. us-east-1."
							},
							"sources": [
								{
									"fileName": "index.d.ts",
									"line": 21,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								6,
								4,
								9,
								8,
								7,
								10,
								5,
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "index.d.ts",
							"line": 19,
							"character": 17
						}
					]
				},
				{
					"id": 2368,
					"name": "EnrichOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "These options for an [[`RStreamsSdk.enrich`]] pipeline step.\nThis reads events from one queue and writes them to another queue.  Put another way,\nan enrich pipeline operations reads events from an `inQueue` and then writes them to an `outQueue`,\nallowing for side effects or transformation in the process.",
						"tags": [
							{
								"tag": "see",
								"text": "[[`RStreamsSdk.enrich`]]"
							},
							{
								"tag": "see",
								"text": "[[`RStreamsSdk.enrichEvents`]]"
							}
						]
					},
					"children": [
						{
							"id": 2373,
							"name": "batch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This governs micro-batching events that have been received from the source `inQueue` before they\nare sent to your `transform` function, allowing that function to receive events in batches instead\nof one at a time.  This can be useful when your transform function will reach out and hit an external\nresource such as a database.  Hitting a database for every single event that flows through a pipe can\nbe very detrimental to performance.  So, it's common to micro-batch say 100 or 1000 or so and then\nconstruct a single query to a database to read/write all data as a single DB operation.",
								"text": "If this is a number, it's just the number of events to micro-batch up."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 415,
									"character": 1
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"id": 616,
										"name": "BatchOptions"
									}
								]
							}
						},
						{
							"id": 2374,
							"name": "config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Fine-grained control of reading from the source `inQueue`"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 418,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 2342,
								"name": "ReadOptions"
							}
						},
						{
							"id": 2369,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the bot that this code is acting as.  The SDK will use it to query to the bot Dynamo DB\ntable to pull checkpoints and to checkpoint for you."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 380,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2370,
							"name": "inQueue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The source queue from which events will be read"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 383,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2371,
							"name": "outQueue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The destination queue into which events will be written"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 386,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2372,
							"name": "start",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The event ID of the starting position to read from with in the queue.  It is common to not provide\nthis because each queue is stateful in that it remembers the last read position of a bot.  Then,\nas bots read they make a call back to the RStreams Bus to update the read position.",
								"text": "Usually, the SDK just handles this for you.  So, if the start isn't provided, the SDK will just\nuse the bot's last read position as the starting point.  So, as bots are invoked, read some events\nand do some processing, they automatically update back how far they've read to and then the bot shuts\ndown after a period of time.  When the bot starts back up to read again, it knows where it last read\nfrom and just continues.\n",
								"tags": [
									{
										"tag": "see",
										"text": "[Fundamentals: Event ID](https://rstreams.org/rstreams-guides/core-concepts/fundamentals/#event-id)"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 402,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2375,
							"name": "transform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The SDK will invoke this function after reading events from the `inQueue` and will take\nthe result of this function to send to the destination `outQueue`."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 427,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 561,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2376,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 2377,
										"name": "U"
									}
								],
								"name": "ProcessFunction"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2373,
								2374,
								2369,
								2370,
								2371,
								2372,
								2375
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 375,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 2376,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the event read from the source `inQueue`"
							}
						},
						{
							"id": 2377,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the event that will be written to the destination `outQueue`\n"
							}
						}
					]
				},
				{
					"id": 2378,
					"name": "OffloadOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "These options for an [[`RStreamsSdk.offload`]] pipeline step.\nThis reads events from a queue and allows for the processing of the data.  Note this inherits all the useful\noptions from [[`ReadOptions`]] which control reading from `inQueue`.",
						"tags": [
							{
								"tag": "see",
								"text": "[[`RStreamsSdk.offload`]]"
							},
							{
								"tag": "see",
								"text": "[[`RStreamsSdk.offloadEvents`]]\n"
							}
						]
					},
					"children": [
						{
							"id": 2381,
							"name": "batch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "This governs micro-batching events that have been received from the source `inQueue` before they\nare sent to your `transform` function, allowing that function to receive events in batches instead\nof one at a time.  This can be useful when your transform function will reach out and hit an external\nresource such as a database.  Hitting a database for every single event that flows through a pipe can\nbe very detrimental to performance.  So, it's common to micro-batch say 100 or 1000 or so and then\nconstruct a single query to a database to read/write all data as a single DB operation.",
								"text": "If this is a number, it's just the number of events to micro-batch up."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 461,
									"character": 1
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"qualifiedName": "Number",
										"package": "typescript",
										"name": "Number"
									},
									{
										"type": "reference",
										"id": 616,
										"name": "BatchOptions"
									}
								]
							}
						},
						{
							"id": 2389,
							"name": "debug",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Don't use."
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 211,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2349,
								"name": "ReadOptions.debug"
							}
						},
						{
							"id": 2392,
							"name": "fast_s3_read",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, connect to multiple S3 files simultaneously to pre-fetch files when reading from a queue\nthat has events stored in S3. This is a new feature and so is not on by default, though it can\ndramatically improve read performance.  It is expected to be made the default in Q3 2022.",
								"tags": [
									{
										"tag": "beta",
										"text": "In use now in production and being monitored.  Expected to be GA and made the default in Q3 2022."
									},
									{
										"tag": "see",
										"text": "[[`WriteOptions.useS3`]]"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 234,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2352,
								"name": "ReadOptions.fast_s3_read"
							}
						},
						{
							"id": 2393,
							"name": "fast_s3_read_parallel_fetch_max_bytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "When using the [[`ReadOptions.fast_s3_read`]] feature, this specifies how many bytes of s3 data we want\nto prefetch. The default usually is correct.",
								"tags": [
									{
										"tag": "default",
										"text": "5mb worth of bytes"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 243,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2353,
								"name": "ReadOptions.fast_s3_read_parallel_fetch_max_bytes"
							}
						},
						{
							"id": 2379,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the bot that this code is acting as.  The SDK will use it to query to the bot Dynamo DB\ntable to pull checkpoints and to checkpoint for you."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 445,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2380,
							"name": "inQueue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The source queue from which events will be read"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 448,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2387,
							"name": "limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The limit of the number of records, events, to read in total from the queue before closing the read stream.",
								"tags": [
									{
										"tag": "default",
										"text": "unbounded\n\nThe read stream will shutdown as soon as one of the constraints is met: `runTime`, `loops`, `limit`, `size`,\n`stopTime`.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 198,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2347,
								"name": "ReadOptions.limit"
							}
						},
						{
							"id": 2385,
							"name": "loops",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The max number of times the SDK will query the stream for new events before it shuts down the read stream.\nConsider that each query by the SDK to retrieve events from DynamoDB could return many, many events and\nthat an \"event\" may actually be a pointer to an S3 file full of events.",
								"text": "It is uncommon for developers to have to set this, much less know it exists.\n",
								"tags": [
									{
										"tag": "default",
										"text": "100\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 173,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2345,
								"name": "ReadOptions.loops"
							}
						},
						{
							"id": 2391,
							"name": "maxOverride",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The largest event ID that you should read, exclusive. So, stop reading when you arrive at this event ID.\nUse `startTime` and this option to read a range of events from a queue.",
								"tags": [
									{
										"tag": "default",
										"text": "The SDK will take the current time and turn it into an event ID."
									},
									{
										"tag": "see",
										"text": "[Fundamentals: Event ID](https://rstreams.org/rstreams-guides/core-concepts/fundamentals/#event-id)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 223,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2351,
								"name": "ReadOptions.maxOverride"
							}
						},
						{
							"id": 2384,
							"name": "runTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The duration of time the to read for before closing the read stream.  It is common to set this\nto 75% to 80% of the time remaining before the lambda is shut down to give the lambda sufficient time\nto finish processing.  Of course, different types of processing will differ.",
								"text": "Note, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject.\n\nThe read stream will shutdown as soon as one of the constraints is met: `runTime`, `loops`, `limit`, `size`,\n`stopTime`.\n"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 162,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "moment.DurationInputArg1",
								"package": "moment",
								"name": "DurationInputArg1"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2344,
								"name": "ReadOptions.runTime"
							}
						},
						{
							"id": 2388,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The limit of the number of bytes to read in total from the queue before closing the read stream.",
								"tags": [
									{
										"tag": "default",
										"text": "unbounded\n\nThe read stream will shutdown as soon as one of the constraints is met: `runTime`, `loops`, `limit`, `size`,\n`stopTime`.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 208,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2348,
								"name": "ReadOptions.size"
							}
						},
						{
							"id": 2386,
							"name": "start",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The event ID of the starting position to read from with in the queue.  It is common to not provide\nthis because each queue is stateful in that it remembers the last read position of a bot.  Then,\nas bots read they make a call back to the RStreams Bus to update the read position.",
								"text": "Usually, the SDK just handles this for you.  So, if the start isn't provided, the SDK will just\nuse the bot's last read position as the starting point.  So, as bots are invoked, read some events\nand do some processing, they automatically update back how far they've read to and then the bot shuts\ndown after a period of time.  When the bot starts back up to read again, it knows where it last read\nfrom and just continues.\n",
								"tags": [
									{
										"tag": "see",
										"text": "[Fundamentals: Event ID](https://rstreams.org/rstreams-guides/core-concepts/fundamentals/#event-id)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 188,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2346,
								"name": "ReadOptions.start"
							}
						},
						{
							"id": 2390,
							"name": "stopTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "When to stop reading as a time since the epoch."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 214,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2350,
								"name": "ReadOptions.stopTime"
							}
						},
						{
							"id": 2394,
							"name": "stream_query_limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The max number of records, events, the SDK should retrieve each time it retrieves events from the\nRStreams Bus' Dynamo DB events table.",
								"tags": [
									{
										"tag": "default:",
										"text": "50 if [[`ReadOptions.fast_s3_read`]] is false"
									},
									{
										"tag": "default:",
										"text": "1000 if [[`ReadOptions.fast_s3_read`]] is true"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 253,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2354,
								"name": "ReadOptions.stream_query_limit"
							}
						},
						{
							"id": 2383,
							"name": "subqueue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Don't use."
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 147,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2343,
								"name": "ReadOptions.subqueue"
							}
						},
						{
							"id": 2382,
							"name": "transform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The SDK will invoke this function after reading events from the `inQueue` where you can do your processing."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 470,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 561,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2395,
										"name": "T"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "ProcessFunction"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2381,
								2389,
								2392,
								2393,
								2379,
								2380,
								2387,
								2385,
								2391,
								2384,
								2388,
								2386,
								2390,
								2394,
								2383,
								2382
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 440,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 2395,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the event read from the source `inQueue`\n"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2342,
							"name": "ReadOptions"
						}
					]
				},
				{
					"id": 2342,
					"name": "ReadOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options when reading data from an instance of the RStreams bus.  The options in this\ninterface provide a lot of control and performance optimization options and developers\nshould familiarize themselves with them.  They are used in a read pipeline step\nto configure how to read.",
						"text": "Most bots are based on AWS lambda and lambdas can only run continuosly for 15 minutes.\nSo, a bot that sets itself up to read events from a queue has to end at some time.\nDepending on how the bot registered itself with the bus, after a bot shuts down\nthe bot will either be re-invoked by the RStreams bus when there are new events to be read\nor on whatever timer established.\n"
					},
					"children": [
						{
							"id": 2349,
							"name": "debug",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Don't use."
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 211,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2352,
							"name": "fast_s3_read",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, connect to multiple S3 files simultaneously to pre-fetch files when reading from a queue\nthat has events stored in S3. This is a new feature and so is not on by default, though it can\ndramatically improve read performance.  It is expected to be made the default in Q3 2022.",
								"tags": [
									{
										"tag": "beta",
										"text": "In use now in production and being monitored.  Expected to be GA and made the default in Q3 2022."
									},
									{
										"tag": "see",
										"text": "[[`WriteOptions.useS3`]]"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 234,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2353,
							"name": "fast_s3_read_parallel_fetch_max_bytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "When using the [[`ReadOptions.fast_s3_read`]] feature, this specifies how many bytes of s3 data we want\nto prefetch. The default usually is correct.",
								"tags": [
									{
										"tag": "default",
										"text": "5mb worth of bytes"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 243,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2347,
							"name": "limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The limit of the number of records, events, to read in total from the queue before closing the read stream.",
								"tags": [
									{
										"tag": "default",
										"text": "unbounded\n\nThe read stream will shutdown as soon as one of the constraints is met: `runTime`, `loops`, `limit`, `size`,\n`stopTime`.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 198,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2345,
							"name": "loops",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The max number of times the SDK will query the stream for new events before it shuts down the read stream.\nConsider that each query by the SDK to retrieve events from DynamoDB could return many, many events and\nthat an \"event\" may actually be a pointer to an S3 file full of events.",
								"text": "It is uncommon for developers to have to set this, much less know it exists.\n",
								"tags": [
									{
										"tag": "default",
										"text": "100\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 173,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2351,
							"name": "maxOverride",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The largest event ID that you should read, exclusive. So, stop reading when you arrive at this event ID.\nUse `startTime` and this option to read a range of events from a queue.",
								"tags": [
									{
										"tag": "default",
										"text": "The SDK will take the current time and turn it into an event ID."
									},
									{
										"tag": "see",
										"text": "[Fundamentals: Event ID](https://rstreams.org/rstreams-guides/core-concepts/fundamentals/#event-id)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 223,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2344,
							"name": "runTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The duration of time the to read for before closing the read stream.  It is common to set this\nto 75% to 80% of the time remaining before the lambda is shut down to give the lambda sufficient time\nto finish processing.  Of course, different types of processing will differ.",
								"text": "Note, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject.\n\nThe read stream will shutdown as soon as one of the constraints is met: `runTime`, `loops`, `limit`, `size`,\n`stopTime`.\n"
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 162,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "moment.DurationInputArg1",
								"package": "moment",
								"name": "DurationInputArg1"
							}
						},
						{
							"id": 2348,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The limit of the number of bytes to read in total from the queue before closing the read stream.",
								"tags": [
									{
										"tag": "default",
										"text": "unbounded\n\nThe read stream will shutdown as soon as one of the constraints is met: `runTime`, `loops`, `limit`, `size`,\n`stopTime`.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 208,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2346,
							"name": "start",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The event ID of the starting position to read from with in the queue.  It is common to not provide\nthis because each queue is stateful in that it remembers the last read position of a bot.  Then,\nas bots read they make a call back to the RStreams Bus to update the read position.",
								"text": "Usually, the SDK just handles this for you.  So, if the start isn't provided, the SDK will just\nuse the bot's last read position as the starting point.  So, as bots are invoked, read some events\nand do some processing, they automatically update back how far they've read to and then the bot shuts\ndown after a period of time.  When the bot starts back up to read again, it knows where it last read\nfrom and just continues.\n",
								"tags": [
									{
										"tag": "see",
										"text": "[Fundamentals: Event ID](https://rstreams.org/rstreams-guides/core-concepts/fundamentals/#event-id)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 188,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2350,
							"name": "stopTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "When to stop reading as a time since the epoch."
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 214,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2354,
							"name": "stream_query_limit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The max number of records, events, the SDK should retrieve each time it retrieves events from the\nRStreams Bus' Dynamo DB events table.",
								"tags": [
									{
										"tag": "default:",
										"text": "50 if [[`ReadOptions.fast_s3_read`]] is false"
									},
									{
										"tag": "default:",
										"text": "1000 if [[`ReadOptions.fast_s3_read`]] is true"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 253,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2343,
							"name": "subqueue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Don't use."
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 147,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2349,
								2352,
								2353,
								2347,
								2345,
								2351,
								2344,
								2348,
								2346,
								2350,
								2354,
								2343
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 145,
							"character": 17
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 2378,
							"name": "OffloadOptions"
						}
					]
				},
				{
					"id": 2403,
					"name": "StatsStream",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A pipeline step that is used to manually get/set the checkpoint.  Often, this pipeline step is used to get\nand store checkpoints and then at the very end of the pipeline, it will use the saved off data to\nmanaully checkpoint using [[`StreamUtil.stats`]].",
						"text": "Note, this is only rarely used in special cases.\n"
					},
					"children": [
						{
							"id": 2404,
							"name": "checkpoint",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 528,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2405,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2406,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Exposes a function to allow the developer to set the checkpoint."
											},
											"parameters": [
												{
													"id": 2407,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2408,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2409,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2410,
																			"name": "err",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"id": 2396,
																				"name": "CheckpointData"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 2411,
							"name": "get",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 533,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2412,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2413,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Exposes a function to allow the developer to manually get the checkpoint."
											},
											"type": {
												"type": "reference",
												"id": 2396,
												"name": "CheckpointData"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2404,
								2411
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 526,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "internal.Transform",
							"package": "@types/node",
							"name": "Transform"
						}
					]
				},
				{
					"id": 2364,
					"name": "ToCheckpointOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "These options allow a developer to tell the SDK how often it should automatically checkpoint.  To checkpoint\nis to make a call back to the RStreams bus instance and tell it that a given bot has successfully read up to\nthe event ID included in the API call.  This ensures that the next time a bot needs to run, the last known\ncheckpoint position is remembered by the bus and the SDK can begin reading from that point in the queue\nforward in time.",
						"text": "It is used by adding an instance of this as a step in the pipeline itself to determine when to checkpoint.\n\nThe SDK will checkpoint as soon as either the `records` or `time` constraint is met.\n"
					},
					"children": [
						{
							"id": 2367,
							"name": "force",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "When the SDK writes an updated checkpoint event ID back to the RStreams bus, it checks if someone has changed\nthe checpoint out from underneath the bot.  In practice, this would only happen in one of the following two\nscenarios.  1) a developer is running independent sets of code as though it were the same bot erroneously or\n2) a type of fanout is happening where the multiple copies of the same code is running as the same bot.\nIn scenario 1, this flag will be false and the developer will get an error back.  In scenario 2, this\nflag will intentionally be set to true by whomever is writing the fanout code because it's OK that\nsomeone else changed the checkpoint since the last time it was read by some code.",
								"text": "This is only used in advanced scenarios.\n",
								"tags": [
									{
										"tag": "default",
										"text": "false\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 359,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2365,
							"name": "records",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Checkpoint after this number of records (events).",
								"tags": [
									{
										"tag": "default",
										"text": "1000 records (events)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 333,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2366,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Checkpoint after this amount of time expires.",
								"text": "Note, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject.\n",
								"tags": [
									{
										"tag": "default",
										"text": "10s"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 344,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "moment.DurationInputArg1",
								"package": "moment",
								"name": "DurationInputArg1"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2367,
								2365,
								2366
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 328,
							"character": 17
						}
					]
				},
				{
					"id": 2336,
					"name": "WriteOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options when writing data to an instance of the RStreams bus.  The options in this\ninterface provide a lot of control and performance optimization options and developers\nshould familiarize themselves with them. They are used in a write pipeline step\nto configure how to write."
					},
					"children": [
						{
							"id": 2338,
							"name": "firehose",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, firehose will be used.  Firehose batches events sent to it to an S3 file in 1 minute\nincrements, which of course adds at least a one minute latency. However, firehose can take a vast number\nof concurrent writes compared to kinesis.  So, use this when you have a giant number of concurrent events\nyou wish to write, where a giant number is X events per X amount of time.",
								"text": "An RStreams Bus system bot reads the 1 minute batched S3 files written to firehose, separates the events\nin the file into separate S3 files by queue and then sends a single event to kinesis for each resulting\nqueue-specific S3 file. From there, processing continues as if events were sent to kinesis using s3.\n\nIf this and `s3` are present, firehose will be used.\n",
								"tags": [
									{
										"tag": "default",
										"text": "false"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 87,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 2339,
							"name": "records",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The number of records, where each record is an event, to micro-batch locally in the SDK before writing\nthem to either kinesis, firehose or S3.  See the other options in this object to understand how this\nmight be useful.",
								"text": "The SDK will write events as soon as one of the `records`, `size` or `time` conditions are met.\n",
								"tags": [
									{
										"tag": "default",
										"text": "kinesis 100 records (events)"
									},
									{
										"tag": "default",
										"text": "S3 1 file"
									},
									{
										"tag": "default",
										"text": "firehose 10,000 records (events)\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 100,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2340,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The number of bytes to micro-batch locally in the SDK before writing them to either kinesis, firehose or S3.\nSee the other options in this object to understand how this might be useful.",
								"text": "The SDK will write events as soon as one of the `records`, `size` or `time` conditions are met.\n",
								"tags": [
									{
										"tag": "default",
										"text": "kinesis 200k"
									},
									{
										"tag": "default",
										"text": "S3 unbounded"
									},
									{
										"tag": "default",
										"text": "firehose 900k\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 112,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2341,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The amount of time to micro-batch locally in the SDK before writing events to either kinesis, firehose or S3.\nSee the other options in this object to understand how this might be useful.",
								"text": "Note, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject.\n\nThe SDK will write events as soon as one of the `records`, `size` or `time` conditions are met.\n",
								"tags": [
									{
										"tag": "default",
										"text": "kinesis 200ms"
									},
									{
										"tag": "default",
										"text": "S3 unbounded"
									},
									{
										"tag": "default",
										"text": "firehose 900k"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 128,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "moment.DurationInputArg1",
								"package": "moment",
								"name": "DurationInputArg1"
							}
						},
						{
							"id": 2337,
							"name": "useS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, the SDK will write events to S3 and then pass a single event to kinesis whose payload\nreferences the S3 file.  Thus, one actual event flows through Kinesis and that one event is eventually\nwritten to the RStreams bus' events DynamoDB table, still referencing the S3 file full of events.\nWhen reading events, the SDK will detect it has received an event in a queue that is really a reference\nto S3 and retrieve the portion of the S3 file needed to fulfill the SDK read request made.",
								"text": "This can be useful when a very large number of events need to be written all at once or if the\nevents are large.  However, there is some additional ingestion latency incurred by this approach\nand also on reading.  If the size of the S3 files is large, the latency penalty for reading\nis negligible for most use cases.  However, waiting to batch up a sufficient number of events\ncan cause a delay getting events into Kinesis for ingestion.  The rule of thumb is files\naround 2mb or larger are fine.  It's OK if an occasional file is small.  However, creating many small\nfiles smaller should be avoided as it could cause read latency.  For example, if requesting 1000 events\nfrom a queue if every two events are in an S3 file, the SDK will have to retrieve 500 files to read just\n1000 events.  Use the other settings to tune the amount of data saved to the file: `records`, `size`, `time`.\n\nNOTE! A new feature, [[`ReadOptions.fast_s3_read`]], largely solves the problem\nof having lots of small S3 files by enabling the SDK to concurrently read from multiple S3 files.\n\nIf this and `firehose` are present, firehose will be used.\n",
								"tags": [
									{
										"tag": "default",
										"text": "false"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 69,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2338,
								2339,
								2340,
								2341,
								2337
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 43,
							"character": 17
						}
					]
				},
				{
					"id": 2329,
					"name": "Callback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 25,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 2330,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/lib.d.ts",
									"line": 25,
									"character": 31
								}
							],
							"signatures": [
								{
									"id": 2331,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A standard callback function.  If the operation failed, return the first argument only,\noften a string or an Error object.  If the operation succeeded and nothing needs to be\nreturned from the callback, pass no arguments.  If the operation succeeded and something\nneeds to be returned through the callback, pass null as the first argument and the return\nobject as the second argument."
									},
									"parameters": [
										{
											"id": 2332,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If present, indicates the operation failed."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2333,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If present and err is not present, the return value from the operation.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 2334,
					"name": "ThroughEvent",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Defines an event used in through operations.",
						"tags": [
							{
								"tag": "see",
								"text": "[[`StreamUtil.through`]]\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 33,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 2335,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The payload of the event."
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 1856,
								"typeArguments": [
									{
										"type": "reference",
										"id": 2335,
										"name": "T"
									}
								],
								"name": "Event"
							},
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 104,
					"name": "default",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "index.d.ts",
							"line": 213,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 105,
							"name": "default",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This returns a function that you call to create an instance of the RStreams SDK.",
								"returns": "The SDK instance itself.\n"
							},
							"parameters": [
								{
									"id": 106,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The SDK is usually smart enough to find the config it needs or you can pass it in directly here."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 2,
												"name": "ConfigurationResources"
											},
											{
												"type": "query",
												"queryType": {
													"type": "reference",
													"id": 2271,
													"name": "default"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 22,
								"name": "RStreamsSdk"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						2325,
						2320,
						2319,
						2323,
						2322,
						3225,
						3227,
						2318,
						2321,
						2310,
						2308,
						2311,
						2315,
						2314,
						2326,
						3224,
						3226,
						2327,
						2324,
						2313,
						2317,
						2306,
						2328,
						2312,
						2309,
						2307,
						2316,
						3212,
						3217,
						3207,
						3206,
						3210,
						3209,
						3204,
						3205,
						3221,
						3223,
						3208,
						3219,
						3213,
						3201,
						3202,
						3203,
						3211,
						3218,
						3214,
						3215,
						3220,
						3222,
						3216
					]
				},
				{
					"title": "Namespaces",
					"kind": 4,
					"children": [
						2865
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						22
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2355,
						2396,
						11,
						2,
						2368,
						2378,
						2342,
						2403,
						2364,
						2336
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						2329,
						2334
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						104
					]
				}
			],
			"sources": [
				{
					"fileName": "index.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 107,
			"name": "lib/cron",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 122,
					"name": "BotData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 32,
							"character": 10
						}
					]
				},
				{
					"id": 133,
					"name": "Checkpoint",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The type used to set the checkpoint on a bot in the RStreams bus bot DynamoDB table."
					},
					"children": [
						{
							"id": 135,
							"name": "eid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The event ID to set as the checkpoint."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 83,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 138,
							"name": "ended_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ended timestamp."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 101,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 141,
							"name": "expected",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 113,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 140,
							"name": "force",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, force the update even if the timestamp has changed since the last time we read it."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 110,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 136,
							"name": "source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The source timestamp."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 89,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 137,
							"name": "started_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The started timestamp."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 95,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 134,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether updating the read or write checkpoint."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 80,
									"character": 1
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "read"
									},
									{
										"type": "literal",
										"value": "write"
									}
								]
							}
						},
						{
							"id": 139,
							"name": "units",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The units."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 107,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								135,
								138,
								141,
								140,
								136,
								137,
								134,
								139
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 78,
							"character": 10
						}
					]
				},
				{
					"id": 120,
					"name": "CronData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 20,
							"character": 10
						}
					]
				},
				{
					"id": 125,
					"name": "GetOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options for retrieving details about a bot."
					},
					"children": [
						{
							"id": 132,
							"name": "instance",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Which instance do I want if there is more than one instance of this bot for fanout."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 72,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 128,
							"name": "instances",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "Don't use.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 67,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 129,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 130,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 131,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 121,
											"name": "InstanceData"
										}
									}
								}
							}
						},
						{
							"id": 126,
							"name": "overrides",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "Don't use.\nThe lambda settings value of your object and you can override them when you do a get.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 52,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 127,
							"name": "register",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "internal",
										"text": "Don't use.\n\nWhether to add the checkpoint results into the LeoSdk registry. So, the next time you go to checkpoint\nit uses the registry to get checkpoint information instead of having to back to the bot table.\n"
									},
									{
										"tag": "default",
										"text": "true\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 62,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								132,
								128,
								126,
								127
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 47,
							"character": 10
						}
					]
				},
				{
					"id": 121,
					"name": "InstanceData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 27,
							"character": 10
						}
					]
				},
				{
					"id": 143,
					"name": "LeoCron",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This is the set of operations that act on the RStreams bus instance's bot DynamoDB table that tracks\nall bots, the checkpoints for those bots to various queues and other information.  It is\nrare indeed that a developer would ever need to use these to interact directly with the bot DynamoDB table.",
						"text": "Note!  This is named LeoCron because the DynamoDB table is named LeoCron for legacy reasons.  It will likely\nget a more current name in the future, like \"BotManager\".  The term `Cron` was historically associated with\nthe bot concept because initially, bots were only invoked on a cron and did not support invocation on a push\nor pull model as they do today.\n"
					},
					"children": [
						{
							"id": 217,
							"name": "buildPayloads",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 270,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 218,
									"name": "buildPayloads",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use."
											}
										]
									},
									"parameters": [
										{
											"id": 219,
											"name": "cron",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 120,
												"name": "CronData"
											}
										},
										{
											"id": 220,
											"name": "prev",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 221,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 154,
							"name": "checkLock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 157,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 155,
									"name": "checkLock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Check if a bot is currently locked, meaning running right now."
									},
									"parameters": [
										{
											"id": 156,
											"name": "cron",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "??"
											},
											"type": {
												"type": "reference",
												"id": 120,
												"name": "CronData"
											}
										},
										{
											"id": 157,
											"name": "runid",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot running right now to check for"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 158,
											"name": "remainingTime",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "??"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 159,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 179,
							"name": "checkpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 205,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 180,
									"name": "checkpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set a checkpoint on a bot.  A bot checkpoints a position it has read to in a queue it reads from\nand marks the last position it wrote to for queues that it writes to.  The position is an event ID."
									},
									"parameters": [
										{
											"id": 181,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot to checkpoint"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 182,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The queue to checkpoint for this bot"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 183,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The checkpoint details themselves that will be saved"
											},
											"type": {
												"type": "reference",
												"id": 133,
												"name": "Checkpoint"
											}
										},
										{
											"id": 184,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong\n"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 248,
							"name": "createBot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 308,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 249,
									"name": "createBot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Used internally by the SDK to create a new bot.  This should only ever be used\nif creating a bot that does not go through cloud formation."
									},
									"parameters": [
										{
											"id": 250,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 251,
											"name": "bot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 252,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 168,
							"name": "createLock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 185,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 169,
									"name": "createLock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lock the given bot, marking it as currently running.  Only one instance of a bot is meant to be running\nexcept in the special case of bots that are fanned out, meaning multiple instances of the same bot are\nrunning to scale horizontally."
									},
									"parameters": [
										{
											"id": 170,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot to mark running and thus \"lock\""
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 171,
											"name": "runid",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID that represents this instance of the running bot"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 172,
											"name": "maxDuration",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "How long to allow the bot to run dor"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 173,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong\n"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 238,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 294,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 239,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use."
											}
										]
									},
									"parameters": [
										{
											"id": 240,
											"name": "status",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 241,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 242,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 211,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 264,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 212,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get all details on a bot from the RStreams bus bot DynamoDB table."
									},
									"typeParameter": [
										{
											"id": 213,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 214,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 215,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "GetOptions"
											}
										},
										{
											"id": 216,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 113,
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "reference",
														"id": 213,
														"name": "T"
													}
												],
												"name": "DataCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 208,
							"name": "getAttachedSystem",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 258,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 209,
									"name": "getAttachedSystem",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get system by ID not by alias."
									},
									"parameters": [
										{
											"id": 210,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 205,
							"name": "getAttachedSystemByAlias",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 253,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 206,
									"name": "getAttachedSystemByAlias",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns a system."
									},
									"parameters": [
										{
											"id": 207,
											"name": "alias",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 185,
							"name": "getCheckpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 216,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 186,
									"name": "getCheckpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get checkpoint data for the bot and the given queue.",
										"returns": "A promise so it can play nice with async/await that contains the checkpoint data\n"
									},
									"parameters": [
										{
											"id": 187,
											"name": "botId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot to get checkpoint data for"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 188,
											"name": "queue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The queue to get checkpoint data for connected to this bot"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 200,
							"name": "getLastResult",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 240,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 201,
									"name": "getLastResult",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 228,
							"name": "hasMoreToDo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 282,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 229,
									"name": "hasMoreToDo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use."
											}
										]
									},
									"parameters": [
										{
											"id": 230,
											"name": "oldImage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 231,
											"name": "newImage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 232,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 174,
							"name": "removeLock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 194,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 175,
									"name": "removeLock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Remove the lock on the given bot, marking it as not currently running."
									},
									"parameters": [
										{
											"id": 176,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot to mark not running and thus remove the lock on"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 177,
											"name": "runid",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID that represents this instance of the running bot"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 178,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong\n"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 160,
							"name": "reportComplete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 171,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 161,
									"name": "reportComplete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Mark a bot done running."
									},
									"parameters": [
										{
											"id": 162,
											"name": "cron",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "??"
											},
											"type": {
												"type": "reference",
												"id": 120,
												"name": "CronData"
											}
										},
										{
											"id": 163,
											"name": "runid",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot running right now to mark complete"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 164,
											"name": "status",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "??"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 165,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "??"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 166,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Whether to force it to comlete"
											},
											"type": {
												"type": "reference",
												"id": 123,
												"name": "ReportCompleteOptions"
											}
										},
										{
											"id": 167,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong\n"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 243,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 300,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 244,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use."
											}
										]
									},
									"parameters": [
										{
											"id": 245,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 246,
											"name": "handler",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 247,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 198,
							"name": "runAgain",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 235,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 199,
									"name": "runAgain",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Tells the SDK that as soon as this bot ends, run it again.  Most of the time\ndevelopers don't need to do this as the SDK will just do the right thing."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 150,
							"name": "schedule",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 147,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 151,
									"name": "schedule",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Schedule a one-time invocation of the bot named `id` using `duration` to know when to do so."
									},
									"parameters": [
										{
											"id": 152,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The name of the bot to invoke"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 153,
											"name": "duration",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "When to invoke it\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"qualifiedName": "Date",
														"package": "typescript",
														"name": "Date"
													},
													{
														"type": "reference",
														"qualifiedName": "moment.Moment",
														"package": "moment",
														"name": "Moment"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 202,
							"name": "setMessage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 246,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 203,
									"name": "setMessage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use.\nSets an in-memory message in the registry.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 204,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 222,
							"name": "shouldRun",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 276,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 223,
									"name": "shouldRun",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use."
											}
										]
									},
									"parameters": [
										{
											"id": 224,
											"name": "oldImage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 225,
											"name": "newImage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 226,
											"name": "cache",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 227,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 233,
							"name": "start",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 288,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 234,
									"name": "start",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use."
											}
										]
									},
									"parameters": [
										{
											"id": 235,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 236,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 237,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 193,
							"name": "subscribe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 229,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 194,
									"name": "subscribe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 195,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 196,
											"name": "queue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 197,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 122,
												"name": "BotData"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 144,
							"name": "trigger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 140,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 145,
									"name": "trigger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Immediately trigger the bot named `cron.id`, meaning invoke the underlying code (usually a lambda)."
									},
									"parameters": [
										{
											"id": 146,
											"name": "cron",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "This contains `id` which is the name of the bot to invoke"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 147,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 148,
															"name": "id",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"sources": [
																{
																	"fileName": "lib/cron.d.ts",
																	"line": 140,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																148
															]
														}
													]
												}
											}
										},
										{
											"id": 149,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong\n"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 189,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 224,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 190,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update bot data in the RStreams bus instances's bot DynamoDB table."
									},
									"parameters": [
										{
											"id": 191,
											"name": "bot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The bot data to save on the bot"
											},
											"type": {
												"type": "reference",
												"id": 122,
												"name": "BotData"
											}
										},
										{
											"id": 192,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A callback that will be called if something goes wrong\n"
											},
											"type": {
												"type": "reference",
												"id": 108,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								217,
								154,
								179,
								248,
								168,
								238,
								211,
								208,
								205,
								185,
								200,
								228,
								174,
								160,
								243,
								198,
								150,
								202,
								222,
								233,
								193,
								144,
								189
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 134,
							"character": 17
						}
					]
				},
				{
					"id": 123,
					"name": "ReportCompleteOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options for reporting a bot is done."
					},
					"children": [
						{
							"id": 124,
							"name": "forceComplete",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If true, force the bot to be marked completed."
							},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								124
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 38,
							"character": 10
						}
					]
				},
				{
					"id": 108,
					"name": "Callback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 8,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 112,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The Error object.\n"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 109,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 8,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 110,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Defines a callback function that takes an error object."
									},
									"parameters": [
										{
											"id": 111,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 112,
												"name": "E"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 113,
					"name": "DataCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 15,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 118,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The Error if the operation failed."
							}
						},
						{
							"id": 119,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The data to return from the operation if it succeeded.\n"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 114,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/cron.d.ts",
									"line": 15,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 115,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Defines a callback function That takes an error on failure and data on success."
									},
									"parameters": [
										{
											"id": 116,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 118,
												"name": "E"
											}
										},
										{
											"id": 117,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 119,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 142,
					"name": "Milliseconds",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "A type used to represent a duration in milliseconds."
					},
					"sources": [
						{
							"fileName": "lib/cron.d.ts",
							"line": 120,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						122,
						133,
						120,
						125,
						121,
						143,
						123
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						108,
						113,
						142
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/cron.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1952,
			"name": "lib/dynamodb",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1965,
					"name": "GetOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "lib/dynamodb.d.ts",
							"line": 9,
							"character": 10
						}
					]
				},
				{
					"id": 1967,
					"name": "LeoDynamodb",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Helper functions to interact with Dynamo DB."
					},
					"children": [
						{
							"id": 1970,
							"name": "docClient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 24,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "DocumentClient",
								"package": "aws-sdk",
								"name": "DocumentClient"
							}
						},
						{
							"id": 1968,
							"name": "getSettingPromise",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 22,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1969,
							"name": "setSettingPromise",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 23,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 2026,
							"name": "batchGetHashkey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 34,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2027,
									"name": "batchGetHashkey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2028,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2029,
											"name": "hashkey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2030,
											"name": "ids",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2031,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2032,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2033,
							"name": "batchGetTable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 35,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2034,
									"name": "batchGetTable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2035,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2036,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2037,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2038,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2043,
							"name": "batchTableWrite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 37,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2044,
									"name": "batchTableWrite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2045,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2046,
											"name": "records",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2047,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2039,
							"name": "createTableWriteStream",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 36,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2040,
									"name": "createTableWriteStream",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2041,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2042,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1971,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 25,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 1972,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1973,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1974,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1975,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1976,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1965,
												"name": "GetOptions"
											}
										},
										{
											"id": 1977,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1958,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													},
													{
														"type": "reference",
														"id": 1973,
														"name": "T"
													}
												],
												"name": "DataCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2016,
							"name": "getSetting",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 32,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2017,
									"name": "getSetting",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2018,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2019,
											"name": "setting_id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2020,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1958,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													},
													{
														"type": "reference",
														"id": 2018,
														"name": "T"
													}
												],
												"name": "DataCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1986,
							"name": "merge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 27,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 1987,
									"name": "merge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1988,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1989,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1990,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1991,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1992,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1978,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 26,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 1979,
									"name": "put",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 1980,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 1981,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1982,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1983,
											"name": "item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1980,
												"name": "T"
											}
										},
										{
											"id": 1984,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1966,
												"name": "PutOptions"
											}
										},
										{
											"id": 1985,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1953,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2021,
							"name": "query",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 33,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2022,
									"name": "query",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2023,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2024,
											"name": "configuration",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2025,
											"name": "stats",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 2010,
							"name": "saveSetting",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 31,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2011,
									"name": "saveSetting",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 2012,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 2013,
											"name": "setting_id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2014,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2012,
												"name": "T"
											}
										},
										{
											"id": 2015,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1953,
												"typeArguments": [
													{
														"type": "reference",
														"qualifiedName": "AWSError",
														"package": "aws-sdk",
														"name": "AWSError"
													}
												],
												"name": "Callback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2005,
							"name": "scan",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 30,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2006,
									"name": "scan",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2007,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2008,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2009,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1993,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 28,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 1994,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1995,
											"name": "table",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1996,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1997,
											"name": "set",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1998,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1999,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2000,
							"name": "updateMulti",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 29,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2001,
									"name": "updateMulti",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2002,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2003,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2004,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1970,
								1968,
								1969
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2026,
								2033,
								2043,
								2039,
								1971,
								2016,
								1986,
								1978,
								2021,
								2010,
								2005,
								1993,
								2000
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/dynamodb.d.ts",
							"line": 21,
							"character": 17
						}
					]
				},
				{
					"id": 1966,
					"name": "PutOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "lib/dynamodb.d.ts",
							"line": 14,
							"character": 10
						}
					]
				},
				{
					"id": 1953,
					"name": "Callback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/dynamodb.d.ts",
							"line": 3,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 1957,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1954,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 3,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1955,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1956,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1957,
												"name": "E"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 1958,
					"name": "DataCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/dynamodb.d.ts",
							"line": 4,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 1963,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1964,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1959,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/dynamodb.d.ts",
									"line": 4,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 1960,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1961,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1963,
												"name": "E"
											}
										},
										{
											"id": 1962,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1964,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1965,
						1967,
						1966
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1953,
						1958
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/dynamodb.d.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2048,
			"name": "lib/rstreams-config-provider-chain",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2269,
					"name": "default",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2053
				},
				{
					"id": 2049,
					"name": "ProvidersInputType",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 2052,
							"name": "Append",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 11,
									"character": 1
								}
							],
							"defaultValue": "2"
						},
						{
							"id": 2051,
							"name": "Prepend",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 10,
									"character": 1
								}
							],
							"defaultValue": "1"
						},
						{
							"id": 2050,
							"name": "Replace",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 9,
									"character": 1
								}
							],
							"defaultValue": "0"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								2052,
								2051,
								2050
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 8,
							"character": 12
						}
					]
				},
				{
					"id": 2228,
					"name": "AWSSecretsConfiguration",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2232,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 538,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2233,
									"name": "new AWSSecretsConfiguration",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new ConfigProviderChain with a default set of providers\nspecified by {defaultProviders}."
									},
									"parameters": [
										{
											"id": 2234,
											"name": "secretEnvKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2235,
											"name": "cacheDuration",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2228,
										"name": "AWSSecretsConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2273,
										"name": "default.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2272,
								"name": "default.constructor"
							}
						},
						{
							"id": 2249,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2284,
								"name": "default.LeoCron"
							}
						},
						{
							"id": 2244,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2279,
								"name": "default.LeoEvent"
							}
						},
						{
							"id": 2247,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2282,
								"name": "default.LeoFirehoseStream"
							}
						},
						{
							"id": 2246,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2281,
								"name": "default.LeoKinesisStream"
							}
						},
						{
							"id": 2245,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2280,
								"name": "default.LeoS3"
							}
						},
						{
							"id": 2248,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2283,
								"name": "default.LeoSettings"
							}
						},
						{
							"id": 2243,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2278,
								"name": "default.LeoStream"
							}
						},
						{
							"id": 2242,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2277,
								"name": "default.Region"
							}
						},
						{
							"id": 2237,
							"name": "cacheDuration",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 528,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 2240,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"id": 2275,
								"name": "default.expireTime"
							}
						},
						{
							"id": 2241,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"id": 2276,
								"name": "default.expired"
							}
						},
						{
							"id": 2253,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15",
							"inheritedFrom": {
								"type": "reference",
								"id": 2288,
								"name": "default.expiryWindow"
							}
						},
						{
							"id": 2236,
							"name": "secretEnvKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 527,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2229,
							"name": "valueCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 529,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"defaultValue": "{}"
						},
						{
							"id": 2267,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2268,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2303,
										"name": "default.getSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2302,
								"name": "default.getSync"
							}
						},
						{
							"id": 2254,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2255,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2290,
										"name": "default.needsRefresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2289,
								"name": "default.needsRefresh"
							}
						},
						{
							"id": 2238,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 544,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2239,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration."
									},
									"type": {
										"type": "reference",
										"id": 2228,
										"name": "AWSSecretsConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2305,
										"name": "default.refreshSync"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2304,
								"name": "default.refreshSync"
							}
						},
						{
							"id": 2256,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 112,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2257,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2258,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2261,
													"name": "LeoCron",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 117,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2262,
													"name": "LeoEvent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 118,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2265,
													"name": "LeoFirehoseStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 121,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2264,
													"name": "LeoKinesisStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 120,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2263,
													"name": "LeoS3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 119,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2266,
													"name": "LeoSettings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 122,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2260,
													"name": "LeoStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 116,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2259,
													"name": "Region",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2261,
														2262,
														2265,
														2264,
														2263,
														2266,
														2260,
														2259
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2292,
										"name": "default.resolveSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2291,
								"name": "default.resolveSync"
							}
						},
						{
							"id": 2250,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2251,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2252,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2286,
										"name": "default.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2285,
								"name": "default.update"
							}
						},
						{
							"id": 2230,
							"name": "clearCache",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 530,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 2231,
									"name": "clearCache",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2232
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2249,
								2244,
								2247,
								2246,
								2245,
								2248,
								2243,
								2242,
								2237,
								2240,
								2241,
								2253,
								2236,
								2229
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2267,
								2254,
								2238,
								2256,
								2250,
								2230
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 526,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2271,
							"name": "default"
						}
					]
				},
				{
					"id": 2053,
					"name": "ConfigProviderChain",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2055,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 68,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2056,
									"name": "new ConfigProviderChain",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new ConfigProviderChain with a default set of providers\nspecified by {defaultProviders}."
									},
									"parameters": [
										{
											"id": 2057,
											"name": "providers",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Provider"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Provider"
														}
													}
												]
											}
										},
										{
											"id": 2058,
											"name": "addToDefaults",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 2049,
												"name": "ProvidersInputType"
											},
											"defaultValue": "ProvidersInputType.Replace"
										}
									],
									"type": {
										"type": "reference",
										"id": 2053,
										"name": "ConfigProviderChain"
									},
									"overwrites": {
										"type": "reference",
										"id": 2273,
										"name": "default.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2272,
								"name": "default.constructor"
							}
						},
						{
							"id": 2071,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2284,
								"name": "default.LeoCron"
							}
						},
						{
							"id": 2066,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2279,
								"name": "default.LeoEvent"
							}
						},
						{
							"id": 2069,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2282,
								"name": "default.LeoFirehoseStream"
							}
						},
						{
							"id": 2068,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2281,
								"name": "default.LeoKinesisStream"
							}
						},
						{
							"id": 2067,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2280,
								"name": "default.LeoS3"
							}
						},
						{
							"id": 2070,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2283,
								"name": "default.LeoSettings"
							}
						},
						{
							"id": 2065,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2278,
								"name": "default.LeoStream"
							}
						},
						{
							"id": 2064,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2277,
								"name": "default.Region"
							}
						},
						{
							"id": 2062,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"id": 2275,
								"name": "default.expireTime"
							}
						},
						{
							"id": 2063,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"id": 2276,
								"name": "default.expired"
							}
						},
						{
							"id": 2075,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15",
							"inheritedFrom": {
								"type": "reference",
								"id": 2288,
								"name": "default.expiryWindow"
							}
						},
						{
							"id": 2059,
							"name": "providers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 62,
									"character": 1
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Provider"
								}
							}
						},
						{
							"id": 2054,
							"name": "defaultProviders",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isStatic": true
							},
							"comment": {
								"shortText": "The default set of providers used by a vanilla ConfigProviderChain.",
								"text": "In Node.js:\n\n```javascript\nRStreams.ConfigProviderChain.defaultProviders = [\n\tfunction () { return new EnvironmentConfiguration('RSTREAMS_CONFIG'); },\n\tfunction () { return new EnvironmentConfiguration('leosdk'); },\n\tfunction () { return new EnvironmentConfiguration('leo-sdk'); },\n\tfunction () { return new EnvironmentConfiguration('LEOSDK'); },\n\tfunction () { return new EnvironmentConfiguration('LEO-SDK'); },\n\tfunction () { return new LeoConfiguration(); },\n\tfunction () { return new ObjectConfiguration(process, \"leosdk\"); },\n\tfunction () { return new ObjectConfiguration(process, \"leo-sdk\"); },\n\tfunction () { return new ObjectConfiguration(process, \"rstreams_config\"); },\n\tfunction () { return new ObjectConfiguration(global, \"leosdk\"); },\n\tfunction () { return new ObjectConfiguration(global, \"leo-sdk\"); },\n\tfunction () { return new ObjectConfiguration(global, \"rstreams_config\"); },\n\tfunction () {\n\t\treturn new FileTreeConfiguration(process.cwd(), [\n\t\t\t\"leo.config.json\",\n\t\t\t\"leo.config.js\",\n\t\t\t\"rstreams.config.json\",\n\t\t\t\"rstreams.config.js\",\n\t\t\t\"leoconfig.json\",\n\t\t\t\"leoconfig.js\",\n\t\t\t\"rstreamsconfig.json\",\n\t\t\t\"rstreamsconfig.js\",\n\n\t\t\t\"config/leo.config.json\",\n\t\t\t\"config/leo.config.js\",\n\t\t\t\"config/rstreams.config.json\",\n\t\t\t\"config/rstreams.config.js\",\n\t\t\t\"config/leoconfig.json\",\n\t\t\t\"config/leoconfig.js\",\n\t\t\t\"config/rstreamsconfig.json\",\n\t\t\t\"config/rstreamsconfig.js\",\n\t\t]);\n\t},\n\tfunction () { return new AWSSecretsConfiguration('LEO_CONFIG_SECRET'); },\n\tfunction () { return new AWSSecretsConfiguration('RSTREAMS_CONFIG_SECRET'); },\n\n]\n```\n"
							},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 174,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Provider"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 2078,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2079,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2303,
										"name": "default.getSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2302,
								"name": "default.getSync"
							}
						},
						{
							"id": 2076,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2077,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2290,
										"name": "default.needsRefresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2289,
								"name": "default.needsRefresh"
							}
						},
						{
							"id": 2080,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 150,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2081,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration.",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this class to reset then\n  configuration object and then call the callback with\n  any error information."
											},
											{
												"tag": "see",
												"text": "get\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2305,
										"name": "default.refreshSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2304,
								"name": "default.refreshSync"
							}
						},
						{
							"id": 2060,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2061,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resolves the provider chain by searching for the first set of\nconfiguration in {providers}.",
										"returns": "the provider, for chaining.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"overwrites": {
										"type": "reference",
										"id": 2292,
										"name": "default.resolveSync"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2291,
								"name": "default.resolveSync"
							}
						},
						{
							"id": 2072,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2073,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2074,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2286,
										"name": "default.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2285,
								"name": "default.update"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2055
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2071,
								2066,
								2069,
								2068,
								2067,
								2070,
								2065,
								2064,
								2062,
								2063,
								2075,
								2059,
								2054
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2078,
								2076,
								2080,
								2060,
								2072
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 61,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2271,
							"name": "default"
						}
					]
				},
				{
					"id": 2082,
					"name": "EnvironmentConfiguration",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "The default set of providers used by a vanilla ConfigProviderChain.",
						"text": "In Node.js:\n\n```javascript\nRStreams.ConfigProviderChain.defaultProviders = [\n\tfunction () { return new EnvironmentConfiguration('RSTREAMS_CONFIG'); },\n\tfunction () { return new EnvironmentConfiguration('leosdk'); },\n\tfunction () { return new EnvironmentConfiguration('leo-sdk'); },\n\tfunction () { return new EnvironmentConfiguration('LEOSDK'); },\n\tfunction () { return new EnvironmentConfiguration('LEO-SDK'); },\n\tfunction () { return new LeoConfiguration(); },\n\tfunction () { return new ObjectConfiguration(process, \"leosdk\"); },\n\tfunction () { return new ObjectConfiguration(process, \"leo-sdk\"); },\n\tfunction () { return new ObjectConfiguration(process, \"rstreams_config\"); },\n\tfunction () { return new ObjectConfiguration(global, \"leosdk\"); },\n\tfunction () { return new ObjectConfiguration(global, \"leo-sdk\"); },\n\tfunction () { return new ObjectConfiguration(global, \"rstreams_config\"); },\n\tfunction () {\n\t\treturn new FileTreeConfiguration(process.cwd(), [\n\t\t\t\"leo.config.json\",\n\t\t\t\"leo.config.js\",\n\t\t\t\"rstreams.config.json\",\n\t\t\t\"rstreams.config.js\",\n\t\t\t\"leoconfig.json\",\n\t\t\t\"leoconfig.js\",\n\t\t\t\"rstreamsconfig.json\",\n\t\t\t\"rstreamsconfig.js\",\n\n\t\t\t\"config/leo.config.json\",\n\t\t\t\"config/leo.config.js\",\n\t\t\t\"config/rstreams.config.json\",\n\t\t\t\"config/rstreams.config.js\",\n\t\t\t\"config/leoconfig.json\",\n\t\t\t\"config/leoconfig.js\",\n\t\t\t\"config/rstreamsconfig.json\",\n\t\t\t\"config/rstreamsconfig.js\",\n\t\t]);\n\t},\n\tfunction () { return new AWSSecretsConfiguration('LEO_CONFIG_SECRET'); },\n\tfunction () { return new AWSSecretsConfiguration('RSTREAMS_CONFIG_SECRET'); },\n\n]\n```\n"
					},
					"children": [
						{
							"id": 2083,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 340,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2084,
									"name": "new EnvironmentConfiguration",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new ConfigProviderChain with a default set of providers\nspecified by {defaultProviders}."
									},
									"parameters": [
										{
											"id": 2085,
											"name": "envPrefix",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2082,
										"name": "EnvironmentConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2273,
										"name": "default.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2272,
								"name": "default.constructor"
							}
						},
						{
							"id": 2098,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2284,
								"name": "default.LeoCron"
							}
						},
						{
							"id": 2093,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2279,
								"name": "default.LeoEvent"
							}
						},
						{
							"id": 2096,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2282,
								"name": "default.LeoFirehoseStream"
							}
						},
						{
							"id": 2095,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2281,
								"name": "default.LeoKinesisStream"
							}
						},
						{
							"id": 2094,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2280,
								"name": "default.LeoS3"
							}
						},
						{
							"id": 2097,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2283,
								"name": "default.LeoSettings"
							}
						},
						{
							"id": 2092,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2278,
								"name": "default.LeoStream"
							}
						},
						{
							"id": 2091,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2277,
								"name": "default.Region"
							}
						},
						{
							"id": 2086,
							"name": "envPrefix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 334,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2089,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"id": 2275,
								"name": "default.expireTime"
							}
						},
						{
							"id": 2090,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"id": 2276,
								"name": "default.expired"
							}
						},
						{
							"id": 2102,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15",
							"inheritedFrom": {
								"type": "reference",
								"id": 2288,
								"name": "default.expiryWindow"
							}
						},
						{
							"id": 2116,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2117,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2303,
										"name": "default.getSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2302,
								"name": "default.getSync"
							}
						},
						{
							"id": 2103,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2104,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2290,
										"name": "default.needsRefresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2289,
								"name": "default.needsRefresh"
							}
						},
						{
							"id": 2087,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 345,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2088,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration."
									},
									"type": {
										"type": "reference",
										"id": 2082,
										"name": "EnvironmentConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2305,
										"name": "default.refreshSync"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2304,
								"name": "default.refreshSync"
							}
						},
						{
							"id": 2105,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 112,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2106,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2107,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2110,
													"name": "LeoCron",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 117,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2111,
													"name": "LeoEvent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 118,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2114,
													"name": "LeoFirehoseStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 121,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2113,
													"name": "LeoKinesisStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 120,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2112,
													"name": "LeoS3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 119,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2115,
													"name": "LeoSettings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 122,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2109,
													"name": "LeoStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 116,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2108,
													"name": "Region",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2110,
														2111,
														2114,
														2113,
														2112,
														2115,
														2109,
														2108
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2292,
										"name": "default.resolveSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2291,
								"name": "default.resolveSync"
							}
						},
						{
							"id": 2099,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2100,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2101,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2286,
										"name": "default.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2285,
								"name": "default.update"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2083
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2098,
								2093,
								2096,
								2095,
								2094,
								2097,
								2092,
								2091,
								2086,
								2089,
								2090,
								2102
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2116,
								2103,
								2087,
								2105,
								2099
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 333,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2271,
							"name": "default"
						}
					]
				},
				{
					"id": 2118,
					"name": "FileTreeConfiguration",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2119,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 407,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2120,
									"name": "new FileTreeConfiguration",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new ConfigProviderChain with a default set of providers\nspecified by {defaultProviders}."
									},
									"parameters": [
										{
											"id": 2121,
											"name": "startingDirectory",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2122,
											"name": "filenames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2118,
										"name": "FileTreeConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2273,
										"name": "default.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2272,
								"name": "default.constructor"
							}
						},
						{
							"id": 2136,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2284,
								"name": "default.LeoCron"
							}
						},
						{
							"id": 2131,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2279,
								"name": "default.LeoEvent"
							}
						},
						{
							"id": 2134,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2282,
								"name": "default.LeoFirehoseStream"
							}
						},
						{
							"id": 2133,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2281,
								"name": "default.LeoKinesisStream"
							}
						},
						{
							"id": 2132,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2280,
								"name": "default.LeoS3"
							}
						},
						{
							"id": 2135,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2283,
								"name": "default.LeoSettings"
							}
						},
						{
							"id": 2130,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2278,
								"name": "default.LeoStream"
							}
						},
						{
							"id": 2129,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2277,
								"name": "default.Region"
							}
						},
						{
							"id": 2127,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"id": 2275,
								"name": "default.expireTime"
							}
						},
						{
							"id": 2128,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"id": 2276,
								"name": "default.expired"
							}
						},
						{
							"id": 2140,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15",
							"inheritedFrom": {
								"type": "reference",
								"id": 2288,
								"name": "default.expiryWindow"
							}
						},
						{
							"id": 2124,
							"name": "filenames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 401,
									"character": 1
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 2123,
							"name": "startingDirectory",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 400,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2154,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2155,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2303,
										"name": "default.getSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2302,
								"name": "default.getSync"
							}
						},
						{
							"id": 2141,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2142,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2290,
										"name": "default.needsRefresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2289,
								"name": "default.needsRefresh"
							}
						},
						{
							"id": 2125,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 414,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2126,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration."
									},
									"type": {
										"type": "reference",
										"id": 2118,
										"name": "FileTreeConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2305,
										"name": "default.refreshSync"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2304,
								"name": "default.refreshSync"
							}
						},
						{
							"id": 2143,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 112,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2144,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2145,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2148,
													"name": "LeoCron",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 117,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2149,
													"name": "LeoEvent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 118,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2152,
													"name": "LeoFirehoseStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 121,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2151,
													"name": "LeoKinesisStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 120,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2150,
													"name": "LeoS3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 119,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2153,
													"name": "LeoSettings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 122,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2147,
													"name": "LeoStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 116,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2146,
													"name": "Region",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2148,
														2149,
														2152,
														2151,
														2150,
														2153,
														2147,
														2146
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2292,
										"name": "default.resolveSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2291,
								"name": "default.resolveSync"
							}
						},
						{
							"id": 2137,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2138,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2139,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2286,
										"name": "default.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2285,
								"name": "default.update"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2119
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2136,
								2131,
								2134,
								2133,
								2132,
								2135,
								2130,
								2129,
								2127,
								2128,
								2140,
								2124,
								2123
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2154,
								2141,
								2125,
								2143,
								2137
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 399,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2271,
							"name": "default"
						}
					]
				},
				{
					"id": 2156,
					"name": "LeoConfiguration",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2157,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 466,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2158,
									"name": "new LeoConfiguration",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new ConfigProviderChain with a default set of providers\nspecified by {defaultProviders}."
									},
									"type": {
										"type": "reference",
										"id": 2156,
										"name": "LeoConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2273,
										"name": "default.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2272,
								"name": "default.constructor"
							}
						},
						{
							"id": 2170,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2284,
								"name": "default.LeoCron"
							}
						},
						{
							"id": 2165,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2279,
								"name": "default.LeoEvent"
							}
						},
						{
							"id": 2168,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2282,
								"name": "default.LeoFirehoseStream"
							}
						},
						{
							"id": 2167,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2281,
								"name": "default.LeoKinesisStream"
							}
						},
						{
							"id": 2166,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2280,
								"name": "default.LeoS3"
							}
						},
						{
							"id": 2169,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2283,
								"name": "default.LeoSettings"
							}
						},
						{
							"id": 2164,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2278,
								"name": "default.LeoStream"
							}
						},
						{
							"id": 2163,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2277,
								"name": "default.Region"
							}
						},
						{
							"id": 2161,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"id": 2275,
								"name": "default.expireTime"
							}
						},
						{
							"id": 2162,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"id": 2276,
								"name": "default.expired"
							}
						},
						{
							"id": 2174,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15",
							"inheritedFrom": {
								"type": "reference",
								"id": 2288,
								"name": "default.expiryWindow"
							}
						},
						{
							"id": 2188,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2189,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2303,
										"name": "default.getSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2302,
								"name": "default.getSync"
							}
						},
						{
							"id": 2175,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2176,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2290,
										"name": "default.needsRefresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2289,
								"name": "default.needsRefresh"
							}
						},
						{
							"id": 2159,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 470,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2160,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration."
									},
									"type": {
										"type": "reference",
										"id": 2156,
										"name": "LeoConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2305,
										"name": "default.refreshSync"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2304,
								"name": "default.refreshSync"
							}
						},
						{
							"id": 2177,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 112,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2178,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2179,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2182,
													"name": "LeoCron",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 117,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2183,
													"name": "LeoEvent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 118,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2186,
													"name": "LeoFirehoseStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 121,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2185,
													"name": "LeoKinesisStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 120,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2184,
													"name": "LeoS3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 119,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2187,
													"name": "LeoSettings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 122,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2181,
													"name": "LeoStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 116,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2180,
													"name": "Region",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2182,
														2183,
														2186,
														2185,
														2184,
														2187,
														2181,
														2180
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2292,
										"name": "default.resolveSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2291,
								"name": "default.resolveSync"
							}
						},
						{
							"id": 2171,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2172,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2173,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2286,
										"name": "default.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2285,
								"name": "default.update"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2157
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2170,
								2165,
								2168,
								2167,
								2166,
								2169,
								2164,
								2163,
								2161,
								2162,
								2174
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2188,
								2175,
								2159,
								2177,
								2171
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 460,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2271,
							"name": "default"
						}
					]
				},
				{
					"id": 2190,
					"name": "ObjectConfiguration",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 2191,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 496,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2192,
									"name": "new ObjectConfiguration",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new ConfigProviderChain with a default set of providers\nspecified by {defaultProviders}."
									},
									"parameters": [
										{
											"id": 2193,
											"name": "root",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 2194,
											"name": "field",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 2190,
										"name": "ObjectConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2273,
										"name": "default.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2272,
								"name": "default.constructor"
							}
						},
						{
							"id": 2208,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2284,
								"name": "default.LeoCron"
							}
						},
						{
							"id": 2203,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2279,
								"name": "default.LeoEvent"
							}
						},
						{
							"id": 2206,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2282,
								"name": "default.LeoFirehoseStream"
							}
						},
						{
							"id": 2205,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2281,
								"name": "default.LeoKinesisStream"
							}
						},
						{
							"id": 2204,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2280,
								"name": "default.LeoS3"
							}
						},
						{
							"id": 2207,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2283,
								"name": "default.LeoSettings"
							}
						},
						{
							"id": 2202,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2278,
								"name": "default.LeoStream"
							}
						},
						{
							"id": 2201,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 2277,
								"name": "default.Region"
							}
						},
						{
							"id": 2199,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"id": 2275,
								"name": "default.expireTime"
							}
						},
						{
							"id": 2200,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false",
							"inheritedFrom": {
								"type": "reference",
								"id": 2276,
								"name": "default.expired"
							}
						},
						{
							"id": 2212,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15",
							"inheritedFrom": {
								"type": "reference",
								"id": 2288,
								"name": "default.expiryWindow"
							}
						},
						{
							"id": 2195,
							"name": "field",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 489,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2196,
							"name": "root",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 490,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 2226,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2227,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2303,
										"name": "default.getSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2302,
								"name": "default.getSync"
							}
						},
						{
							"id": 2213,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2214,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2290,
										"name": "default.needsRefresh"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2289,
								"name": "default.needsRefresh"
							}
						},
						{
							"id": 2197,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-config-provider-chain.ts",
									"line": 503,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2198,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration."
									},
									"type": {
										"type": "reference",
										"id": 2190,
										"name": "ObjectConfiguration"
									},
									"overwrites": {
										"type": "reference",
										"id": 2305,
										"name": "default.refreshSync"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"id": 2304,
								"name": "default.refreshSync"
							}
						},
						{
							"id": 2215,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 112,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2216,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2217,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2220,
													"name": "LeoCron",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 117,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2221,
													"name": "LeoEvent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 118,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2224,
													"name": "LeoFirehoseStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 121,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2223,
													"name": "LeoKinesisStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 120,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2222,
													"name": "LeoS3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 119,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2225,
													"name": "LeoSettings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 122,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2219,
													"name": "LeoStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 116,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2218,
													"name": "Region",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2220,
														2221,
														2224,
														2223,
														2222,
														2225,
														2219,
														2218
													]
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2292,
										"name": "default.resolveSync"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2291,
								"name": "default.resolveSync"
							}
						},
						{
							"id": 2209,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2210,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2211,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 2286,
										"name": "default.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 2285,
								"name": "default.update"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2191
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2208,
								2203,
								2206,
								2205,
								2204,
								2207,
								2202,
								2201,
								2199,
								2200,
								2212,
								2195,
								2196
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2226,
								2213,
								2197,
								2215,
								2209
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-config-provider-chain.ts",
							"line": 488,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 2271,
							"name": "default"
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						2269
					]
				},
				{
					"title": "Enumerations",
					"kind": 8,
					"children": [
						2049
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2228,
						2053,
						2082,
						2118,
						2156,
						2190
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/rstreams-config-provider-chain.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2270,
			"name": "lib/rstreams-configuration",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2271,
					"name": "default",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Represents your RSTREAMS configuration\nCreating a `Configuration` object allows you to pass around your\ncoinfig information to configuration and service objects.",
						"text": "## Expiring and Refreshing Configuration\n\nOccasionally configuration can expire in the middle of a long-running\napplication. In this case, the SDK will automatically attempt to\nrefresh the configuration from the storage location if the Configuration\nclass implements the {refresh} method.\n\nIf you are implementing a configuration storage location, you\nwill want to create a subclass of the `Configuration` class and\noverride the {refresh} method. This method allows configuration to be\nretrieved from the backing store, be it a file system, database, or\nsome network storage. The method should reset the configuration attributes\non the object.\n",
						"tags": [
							{
								"tag": "!attribute",
								"text": "expired"
							},
							{
								"tag": "returns",
								"text": "whether the configuration have been expired and\n    require a refresh. Used in conjunction with {expireTime}."
							},
							{
								"tag": "!attribute",
								"text": "expireTime"
							},
							{
								"tag": "returns",
								"text": "a time when configuration should be considered expired. Used\n    in conjunction with {expired}.\n\n"
							}
						]
					},
					"children": [
						{
							"id": 2272,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 50,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2273,
									"name": "new default",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "A configuration object can be created using positional arguments or an options\nhash."
									},
									"parameters": [
										{
											"id": 2274,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "reference",
										"id": 2271,
										"name": "default"
									}
								}
							]
						},
						{
							"id": 2284,
							"name": "LeoCron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 42,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2279,
							"name": "LeoEvent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 37,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2282,
							"name": "LeoFirehoseStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 40,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2281,
							"name": "LeoKinesisStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 39,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2280,
							"name": "LeoS3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 38,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2283,
							"name": "LeoSettings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 41,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2278,
							"name": "LeoStream",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 36,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2277,
							"name": "Region",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 35,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2275,
							"name": "expireTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 32,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 2276,
							"name": "expired",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 33,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 2288,
							"name": "expiryWindow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "returns",
										"text": "the number of seconds before {expireTime} during which\n  the configuration will be considered expired.\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 81,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "15"
						},
						{
							"id": 2302,
							"name": "getSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 133,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2303,
									"name": "getSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the existing configuration, refreshing them if they are not yet loaded\nor have expired. Users should call this method before using {refresh},\nas this will not attempt to reload configuration when they are already\nloaded into the object."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2289,
							"name": "needsRefresh",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 88,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2290,
									"name": "needsRefresh",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "whether the configuration object should call {refresh}",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this method to provide custom refresh\n  logic.\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 2304,
							"name": "refreshSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 150,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2305,
									"name": "refreshSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Refreshes the configuration. Users should call {get} before attempting\nto forcibly refresh configuration.",
										"tags": [
											{
												"tag": "note",
												"text": "Subclasses should override this class to reset then\n  configuration object and then call the callback with\n  any error information."
											},
											{
												"tag": "see",
												"text": "get\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 2291,
							"name": "resolveSync",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 112,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2292,
									"name": "resolveSync",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2293,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2296,
													"name": "LeoCron",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 117,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2297,
													"name": "LeoEvent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 118,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2300,
													"name": "LeoFirehoseStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 121,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2299,
													"name": "LeoKinesisStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 120,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2298,
													"name": "LeoS3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 119,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2301,
													"name": "LeoSettings",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 122,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2295,
													"name": "LeoStream",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 116,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 2294,
													"name": "Region",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/rstreams-configuration.ts",
															"line": 115,
															"character": 3
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														2296,
														2297,
														2300,
														2299,
														2298,
														2301,
														2295,
														2294
													]
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 2285,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/rstreams-configuration.ts",
									"line": 54,
									"character": 1
								}
							],
							"signatures": [
								{
									"id": 2286,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2287,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2272
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2284,
								2279,
								2282,
								2281,
								2280,
								2283,
								2278,
								2277,
								2275,
								2276,
								2288
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2302,
								2289,
								2304,
								2291,
								2285
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/rstreams-configuration.ts",
							"line": 31,
							"character": 21
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 2053,
							"name": "ConfigProviderChain"
						},
						{
							"type": "reference",
							"id": 2082,
							"name": "EnvironmentConfiguration"
						},
						{
							"type": "reference",
							"id": 2118,
							"name": "FileTreeConfiguration"
						},
						{
							"type": "reference",
							"id": 2156,
							"name": "LeoConfiguration"
						},
						{
							"type": "reference",
							"id": 2190,
							"name": "ObjectConfiguration"
						},
						{
							"type": "reference",
							"id": 2228,
							"name": "AWSSecretsConfiguration"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						2271
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/rstreams-configuration.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 253,
			"name": "lib/streams",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 616,
					"name": "BatchOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Used in pipeline operations to tell the SDK to micro-batch events received in one pipeline step\nbefore sending them to the next pipeline step.",
						"text": "The SDK will send events to the next pipeline step as soon as one of the `count`, `bytes` or\n`time` constraints are met.\n",
						"tags": [
							{
								"tag": "see",
								"text": "[[`EnrichOptions.batch`]] Good doc on using this."
							}
						]
					},
					"children": [
						{
							"id": 618,
							"name": "bytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The number of bytes of events to micro-batch up before sending them to the next step in the pipeline",
								"tags": [
									{
										"tag": "see",
										"text": "[[`BatchOptions.field`]]\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 713,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "Number",
								"package": "typescript",
								"name": "Number"
							}
						},
						{
							"id": 617,
							"name": "count",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The number of events to micro-batch before sending them to the next step in the pipeline"
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 706,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "Number",
								"package": "typescript",
								"name": "Number"
							}
						},
						{
							"id": 620,
							"name": "field",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If micro-batching on number of bytes, then you may optionally set this to be the name of the field\nin the event that you wish to have used exclusively to count towards to the total number of bytes.\nThis isn't used except in uncommon circumstances where one field alone should control the\nmicro-batching since its size will impact the amount of time the next pipeline step takes to proces.",
								"tags": [
									{
										"tag": "see",
										"text": "[[`BatchOptions.bytes`]]"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 734,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 619,
							"name": "time",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The amount of time to wait, micro-batching events up before sending them to the next step in the pipeline",
								"text": "Note, this type is any one of the [valid durations the Moment JS library](https://momentjs.com/docs/#/durations/)\ncan take: Duration | number | string | FromTo | DurationInputObject.\n"
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 723,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "moment.DurationInputArg1",
								"package": "moment",
								"name": "DurationInputArg1"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								618,
								617,
								620,
								619
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 704,
							"character": 17
						}
					]
				},
				{
					"id": 590,
					"name": "CommandWrapOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"children": [
						{
							"id": 591,
							"name": "hasCommands",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 105,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 592,
							"name": "ignoreCommands",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 106,
									"character": 1
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								591,
								592
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 104,
							"character": 17
						}
					]
				},
				{
					"id": 593,
					"name": "FromCsvOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "An interface that extends the [fastCSV libraries options](https://c2fo.github.io/fast-csv/docs/parsing/options)\nin case we add our own."
					},
					"children": [
						{
							"id": 601,
							"name": "comment",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 11,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.comment"
							}
						},
						{
							"id": 595,
							"name": "delimiter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 5,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.delimiter"
							}
						},
						{
							"id": 603,
							"name": "discardUnmappedColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.discardUnmappedColumns"
							}
						},
						{
							"id": 607,
							"name": "encoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.encoding"
							}
						},
						{
							"id": 597,
							"name": "escape",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.escape"
							}
						},
						{
							"id": 598,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 8,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"qualifiedName": "HeaderTransformFunction",
										"package": "@fast-csv/parse",
										"name": "HeaderTransformFunction"
									},
									{
										"type": "reference",
										"qualifiedName": "HeaderArray",
										"package": "@fast-csv/parse",
										"name": "HeaderArray"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.headers"
							}
						},
						{
							"id": 600,
							"name": "ignoreEmpty",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.ignoreEmpty"
							}
						},
						{
							"id": 605,
							"name": "ltrim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 15,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.ltrim"
							}
						},
						{
							"id": 608,
							"name": "maxRows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.maxRows"
							}
						},
						{
							"id": 594,
							"name": "objectMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.objectMode"
							}
						},
						{
							"id": 596,
							"name": "quote",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 6,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.quote"
							}
						},
						{
							"id": 599,
							"name": "renameHeaders",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 9,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.renameHeaders"
							}
						},
						{
							"id": 606,
							"name": "rtrim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 16,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.rtrim"
							}
						},
						{
							"id": 609,
							"name": "skipLines",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 19,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.skipLines"
							}
						},
						{
							"id": 610,
							"name": "skipRows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.skipRows"
							}
						},
						{
							"id": 602,
							"name": "strictColumnHandling",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.strictColumnHandling"
							}
						},
						{
							"id": 604,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@fast-csv/parse/build/src/ParserOptions.d.ts",
									"line": 14,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "ParserOptionsArgs.trim"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								601,
								595,
								603,
								607,
								597,
								598,
								600,
								605,
								608,
								594,
								596,
								599,
								606,
								609,
								610,
								602,
								604
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 657,
							"character": 17
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "ParserOptionsArgs",
							"package": "@fast-csv/parse",
							"name": "ParserOptionsArgs"
						}
					]
				},
				{
					"id": 584,
					"name": "ProcessCallbackOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Super powerful and convenient options to override per event should you want them.\nPerhaps doing an enrich and all events are going from\nqueue A to queue B but this one event is an error, so you can specificy that the event should be sent\nto the dead letter queue instead of the queue it would go to normally."
					},
					"children": [
						{
							"id": 588,
							"name": "eid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Lets you set this one event's event ID manually"
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 95,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 587,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Do not use"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 92,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 586,
							"name": "event_source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Lets you set the timestamp of the first event that made it to the bus that eventually led to this event\nbeing created as a derivative in one manner or another."
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 89,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 585,
							"name": "queue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the queue this event should be written to"
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 83,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 589,
							"name": "units",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Lets you set the number of parent events this one event has derived from, aggregating N previous event into this one event where N is `units`"
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 98,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								588,
								587,
								586,
								585,
								589
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 81,
							"character": 17
						}
					]
				},
				{
					"id": 611,
					"name": "ToCsvOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The subset of the options we support from [fastCSV libraries options](https://c2fo.github.io/fast-csv/docs/parsing/options)."
					},
					"children": [
						{
							"id": 612,
							"name": "delimiter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The delimiter that will separate columns. Set this option if your file uses an alternate delimiter such as\n`;`or `\\t`.",
								"tags": [
									{
										"tag": "default",
										"text": "`,`\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 668,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 613,
							"name": "escape",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The character to use to escape quotes inside of a quoted field.",
								"tags": [
									{
										"tag": "default",
										"text": "`\"`\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 675,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 615,
							"name": "nullValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The value to write for null.",
								"tags": [
									{
										"tag": "default",
										"text": "`null`"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 690,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 614,
							"name": "quote",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The character to use to quote fields that contain a delimiter.",
								"tags": [
									{
										"tag": "default",
										"text": "`\"`\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 682,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								612,
								613,
								615,
								614
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 662,
							"character": 17
						}
					]
				},
				{
					"id": 569,
					"name": "CommandWrapFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 52,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 582,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the data to be processed"
							}
						},
						{
							"id": 583,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the data that results from being processed\n"
							},
							"default": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 570,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 52,
									"character": 47
								}
							],
							"signatures": [
								{
									"id": 571,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A function that takes the data to be processed, the callback done function and a push function\nthat can be used to wrap a command to do work.",
										"text": "If the processing succeeded and you don't need to checkpoint\nand you don't want to pass anything on to flow to the next processing step, you can just call this function with no arguments.\n"
									},
									"parameters": [
										{
											"id": 572,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 582,
												"name": "T"
											}
										},
										{
											"id": 573,
											"name": "done",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 574,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/streams.d.ts",
															"line": 64,
															"character": 7
														}
													],
													"signatures": [
														{
															"id": 575,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"shortText": "The callback function to send back an error or the successful processed result."
															},
															"parameters": [
																{
																	"id": 576,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "If processing failed, set this to an Error object representing the failure."
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 577,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"comment": {
																		"shortText": "If processing succeed and you don't need to pass anything to another processing step, you can pass true\n  here which will checkpoint for you for the event being processed.  If processing succeeded and you need to send a result\n  of processing to another processing step, set this to be the data to send.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 583,
																		"name": "U"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										},
										{
											"id": 578,
											"name": "push",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 579,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "lib/streams.d.ts",
															"line": 72,
															"character": 7
														}
													],
													"signatures": [
														{
															"id": 580,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"comment": {
																"shortText": "A convenience method to push the resulting processed data to a queue."
															},
															"parameters": [
																{
																	"id": 581,
																	"name": "data",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"comment": {
																		"shortText": "The data to push to a queue.\n"
																	},
																	"type": {
																		"type": "reference",
																		"id": 583,
																		"name": "U"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 554,
					"name": "ProcessCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 23,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 560,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The data to give to the next processing step, in a pipeline that would be putting the data\n  into the pipeline to flow to the next pipeline step."
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 555,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 23,
									"character": 34
								}
							],
							"signatures": [
								{
									"id": 556,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a standard callback used to tell the SDK that you are done processing something,\neither successfully or not successfully.  If the processing succeeded and you don't need to checkpoint\nand you don't want to pass anything on to flow to the next processing step, you can just call this function with no arguments."
									},
									"parameters": [
										{
											"id": 557,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If processing failed, set this to an Error object representing the failure."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 558,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If processing succeed and you don't need to pass anything to another processing step, you can pass true\n  here which will checkpoint for you for the event being processed.  If processing succeeded and you need to send a result\n  of processing to another processing step, set this to be the data to send."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"id": 560,
														"name": "T"
													}
												]
											}
										},
										{
											"id": 559,
											"name": "opts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "This allows you to override the normal options used by the SDK for this one event that you are saying is now \"done\"."
											},
											"type": {
												"type": "reference",
												"id": 584,
												"name": "ProcessCallbackOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 561,
					"name": "ProcessFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 38,
							"character": 13
						}
					],
					"typeParameter": [
						{
							"id": 567,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the data that is to be processed"
							}
						},
						{
							"id": 568,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the data that will be the result of processing"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 562,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/streams.d.ts",
									"line": 38,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 563,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A function that takes the payload of the event (T) and the wrapper of the entire event (ReadEvent<T>) and then a callback\nthat produces the transformed value U."
									},
									"parameters": [
										{
											"id": 564,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The data to be processed"
											},
											"type": {
												"type": "reference",
												"id": 567,
												"name": "T"
											}
										},
										{
											"id": 565,
											"name": "wrapper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1872,
												"typeArguments": [
													{
														"type": "reference",
														"id": 567,
														"name": "T"
													}
												],
												"name": "ReadEvent"
											}
										},
										{
											"id": 566,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The function to call when done with the result, if any"
											},
											"type": {
												"type": "reference",
												"id": 554,
												"typeArguments": [
													{
														"type": "reference",
														"id": 568,
														"name": "U"
													}
												],
												"name": "ProcessCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 481,
					"name": "batch",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 475,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 482,
							"name": "batch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step to tell the SDK to micro-batch events received in one pipeline step\nbefore sending them to the next pipeline step.  It's useful to control how many events arrive all\nat once, roughly, to the next pipeline step.  It can be helpful for a pipeline step to receive\na micro-batch of events, say 100 at a time, instead of 1 at a time to leverage economies of scale\nwhen writing to a database, e.g. doing one query to the database to get 100 records back all at once\ninstead of having to do a query to the database for each event as it comes in.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"typeParameter": [
								{
									"id": 483,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data being batched from the previous pipeline step before sending to the next pipeline step"
									}
								}
							],
							"parameters": [
								{
									"id": 484,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "If a number, then this is how many events to batch up before sending along.  If [[`BatchOptions`]] then\n  this is fine-grained control to ensure events keep flowing smoothly whether there are a few or many at a given moment."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "Number",
												"package": "typescript",
												"name": "Number"
											},
											{
												"type": "reference",
												"id": 616,
												"name": "BatchOptions"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 483,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 1872,
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 483,
													"name": "T"
												}
											}
										],
										"name": "ReadEvent"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 524,
					"name": "buffer",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 568,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 525,
							"name": "buffer",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 526,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 527,
									"name": "each",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 528,
									"name": "emit",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 529,
									"name": "flush",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "internal.Transform",
								"package": "@types/node",
								"name": "stream.Transform"
							}
						}
					]
				},
				{
					"id": 450,
					"name": "bufferBackoff",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 391,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 451,
							"name": "bufferBackoff",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"typeParameter": [
								{
									"id": 452,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 453,
									"name": "each",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 454,
									"name": "emit",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 455,
									"name": "retryOpts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 456,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 457,
									"name": "flush",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 998,
								"typeArguments": [
									{
										"type": "reference",
										"id": 452,
										"name": "T"
									}
								],
								"name": "WritableStream"
							}
						}
					]
				},
				{
					"id": 444,
					"name": "commandWrap",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 379,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 445,
							"name": "commandWrap",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"typeParameter": [
								{
									"id": 446,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 447,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 448,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 590,
										"name": "CommandWrapOptions"
									}
								},
								{
									"id": 449,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 569,
										"typeArguments": [
											{
												"type": "reference",
												"id": 446,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 447,
												"name": "U"
											}
										],
										"name": "CommandWrapFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1831,
								"name": "TransformFunction"
							}
						}
					]
				},
				{
					"id": 466,
					"name": "counter",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 432,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 467,
							"name": "counter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that takes an event, logs it and then passes the event on to the next pipeline step.\nThe log will include the event ID of the event, if it's present.  This is helpful to get visibility into the pipeline.",
								"returns": "The pipeline step that is ready to be used in a pipeline"
							},
							"typeParameter": [
								{
									"id": 468,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the event that flows in, gets logged and then flows unchanged to the next pipeline step"
									}
								}
							],
							"parameters": [
								{
									"id": 469,
									"name": "label",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "If present, log statements are prefixed with this string"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 470,
									"name": "records",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If present, only log every Nth event that flows through where N is `records`"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 468,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 468,
										"name": "T"
									}
								],
								"name": "TransformStream"
							}
						},
						{
							"id": 471,
							"name": "counter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that takes an event, logs it and then passes the event on to the next pipeline step.\nThe log will include the event ID of the event, if it's present.  This is helpful to get visibility into the pipeline.",
								"returns": "The pipeline step that is ready to be used in a pipeline"
							},
							"typeParameter": [
								{
									"id": 472,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the event that flows in, gets logged and then flows unchanged to the next pipeline step"
									}
								}
							],
							"parameters": [
								{
									"id": 473,
									"name": "records",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If present, only log every Nth event that flows through where N is `records`"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 472,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 472,
										"name": "T"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 462,
					"name": "devnull",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 420,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 463,
							"name": "devnull",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a pipeline step that can act as a noop sink.",
								"text": "Sometimes you don't care to push data anywhere when you have a pipeline, but you need the fine-grained control\nof making your own pipeline.  When that's the case, use this to create a final pipeline step, a sink, to end your pipeline.\n\nPipelines must have a sink or data won't flow through the pipeline since Node streams pull data starting with the sink\nwho asks the previous pipeline step for data and then that previous step asks the one before it for data and so on.\nSo, no sink means no data flows.  This gives you a noop sink.\n",
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"typeParameter": [
								{
									"id": 464,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data sent into this final pipeline step"
									}
								}
							],
							"parameters": [
								{
									"id": 465,
									"name": "shouldLog",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If a string, logs events that come in, prefixing the log statement with the stream.\n  If this is true, logs the event.  Otherwise, does nothing."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 998,
								"typeArguments": [
									{
										"type": "reference",
										"id": 464,
										"name": "T"
									}
								],
								"name": "WritableStream"
							}
						}
					]
				},
				{
					"id": 437,
					"name": "eventIdFromTimestamp",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 361,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 438,
							"name": "eventIdFromTimestamp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Helper function to turn a timestamp into an RStreams event ID.",
								"returns": "The generated event ID"
							},
							"parameters": [
								{
									"id": 439,
									"name": "timestamp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The timestamp you want to turn into an RStreams event ID which can be anything used to construct a Moment object"
									},
									"type": {
										"type": "reference",
										"qualifiedName": "moment.MomentInput",
										"package": "moment",
										"name": "MomentInput"
									}
								},
								{
									"id": 440,
									"name": "granularity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Specify the granularity of the event ID, maybe just year/month or year/month/hour, etc."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 441,
					"name": "eventIdToTimestamp",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 369,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 442,
							"name": "eventIdToTimestamp",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Helper function to turn a an RStreams event ID into a timestamp.",
								"returns": "The timestamp as a time since the epoch\n"
							},
							"parameters": [
								{
									"id": 443,
									"name": "eid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The event ID to turn into an epoch timestamp"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					]
				},
				{
					"id": 539,
					"name": "fromCSV",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 612,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 540,
							"name": "fromCSV",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that will parse events from a CSV file and send them to the next step.\nUnderneath the covers it uses the popular [fast-csv](https://c2fo.github.io/fast-csv) node library.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"parameters": [
								{
									"id": 541,
									"name": "fieldList",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of fields to transform | true builds the header list dynmaically"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 542,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "fastCSV options https://c2fo.github.io/fast-csv/docs/parsing/options"
									},
									"type": {
										"type": "reference",
										"id": 593,
										"name": "FromCsvOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 547,
					"name": "fromS3",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 635,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 548,
							"name": "fromS3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that can act as the first step in a pipeline, the source, which reads data\nfrom an S3 file.",
								"returns": "The pipeline step that is ready to be used in a pipeline"
							},
							"parameters": [
								{
									"id": 549,
									"name": "file",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "What to read from."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 550,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 551,
													"name": "bucket",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The name of the S3 bucket to read from"
													},
													"sources": [
														{
															"fileName": "lib/streams.d.ts",
															"line": 637,
															"character": 1
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 552,
													"name": "key",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The name of the file in the bucket to read from"
													},
													"sources": [
														{
															"fileName": "lib/streams.d.ts",
															"line": 640,
															"character": 1
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 553,
													"name": "range",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Read from a specific range in the file.  This is a string that must look like this:\n`bytes=<startingByteoffset>-<endingByteOffset>` where <startingByteoffset> is the start position to read from\nand <endingByteOffset> is the ending position to read from, exclusive."
													},
													"sources": [
														{
															"fileName": "lib/streams.d.ts",
															"line": 649,
															"character": 1
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														551,
														552,
														553
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 998,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "WritableStream"
							}
						}
					]
				},
				{
					"id": 458,
					"name": "log",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 403,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 459,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a pipeline step that will log events as they pass through which can be helpful for debugging in between streaming operations.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"typeParameter": [
								{
									"id": 460,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data that flows through the step to be logged"
									}
								}
							],
							"parameters": [
								{
									"id": 461,
									"name": "prefix",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If provided, this prefix is included with each log"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 460,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 460,
										"name": "T"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 532,
					"name": "parse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 588,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 533,
							"name": "parse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A pipeline step that will split and parse [JSON lines](https://jsonlines.org/), turning them into events.",
								"returns": "The pipeline step that is ready to be used in a pipeline"
							},
							"parameters": [
								{
									"id": 534,
									"name": "skipErrors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "If true and there's a parse error, the error and the JSON line that couldn't be parsed is skipped.  Defaults to false."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "internal.Transform",
								"package": "@types/node",
								"name": "stream.Transform"
							}
						}
					]
				},
				{
					"id": 485,
					"name": "passthrough",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 477,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 486,
							"name": "passthrough",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 487,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 488,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 489,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "internal.TransformOptions",
										"package": "@types/node",
										"name": "TransformOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 487,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 488,
										"name": "U"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 254,
					"name": "pipe",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 126,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 255,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "The pipeline itself"
							},
							"typeParameter": [
								{
									"id": 256,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								}
							],
							"parameters": [
								{
									"id": 257,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 256,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 258,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 256,
														"name": "T1"
													}
												],
												"name": "WritableStream"
											},
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "Writable"
											}
										]
									}
								},
								{
									"id": 259,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Called if something goes wrong"
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 256,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									},
									{
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								]
							}
						},
						{
							"id": 260,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "The pipeline itself\n"
							},
							"typeParameter": [
								{
									"id": 261,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 262,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 263,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 261,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 264,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 261,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 262,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 265,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "Writable"
											},
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 262,
														"name": "T2"
													}
												],
												"name": "WritableStream"
											}
										]
									}
								},
								{
									"id": 266,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Called if something goes wrong"
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 262,
												"name": "T2"
											}
										],
										"name": "WritableStream"
									},
									{
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								]
							}
						},
						{
							"id": 267,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "The pipeline itself\n"
							},
							"typeParameter": [
								{
									"id": 268,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 269,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 270,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 271,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 268,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 272,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 268,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 269,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 273,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 269,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 270,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 274,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "Writable"
											},
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 270,
														"name": "T3"
													}
												],
												"name": "WritableStream"
											}
										]
									}
								},
								{
									"id": 275,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Called if something goes wrong"
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 270,
												"name": "T3"
											}
										],
										"name": "WritableStream"
									},
									{
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								]
							}
						},
						{
							"id": 276,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "The pipeline itself\n"
							},
							"typeParameter": [
								{
									"id": 277,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 278,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 279,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 280,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 281,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 277,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 282,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 277,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 278,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 283,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 278,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 279,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 284,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 279,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 280,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 285,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 5: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "Writable"
											},
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 280,
														"name": "T4"
													}
												],
												"name": "WritableStream"
											}
										]
									}
								},
								{
									"id": 286,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Called if something goes wrong"
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 280,
												"name": "T4"
											}
										],
										"name": "WritableStream"
									},
									{
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								]
							}
						},
						{
							"id": 287,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "The pipeline itself\n"
							},
							"typeParameter": [
								{
									"id": 288,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 289,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 290,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 291,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 292,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 293,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 288,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 294,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 288,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 289,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 295,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 289,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 290,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 296,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 290,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 291,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 297,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 5: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 291,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 292,
												"name": "T5"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 298,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 6: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "Writable"
											},
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 292,
														"name": "T5"
													}
												],
												"name": "WritableStream"
											}
										]
									}
								},
								{
									"id": 299,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Called if something goes wrong"
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 292,
												"name": "T5"
											}
										],
										"name": "WritableStream"
									},
									{
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								]
							}
						},
						{
							"id": 300,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A callback-based version of [[`pipeAsync`]]. Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "The pipeline itself\n"
							},
							"typeParameter": [
								{
									"id": 301,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 302,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 303,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 304,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 305,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 306,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 307,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 301,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 308,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 301,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 302,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 309,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 302,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 303,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 310,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 303,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 304,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 311,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 5: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 304,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 305,
												"name": "T5"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 312,
									"name": "t5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 6: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 305,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 306,
												"name": "T6"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 313,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 7: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "internal.Writable",
												"package": "@types/node",
												"name": "Writable"
											},
											{
												"type": "reference",
												"id": 998,
												"typeArguments": [
													{
														"type": "reference",
														"id": 306,
														"name": "T6"
													}
												],
												"name": "WritableStream"
											}
										]
									}
								},
								{
									"id": 314,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Called if something goes wrong"
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 306,
												"name": "T6"
											}
										],
										"name": "WritableStream"
									},
									{
										"type": "reference",
										"qualifiedName": "internal.Writable",
										"package": "@types/node",
										"name": "stream.Writable"
									}
								]
							}
						}
					]
				},
				{
					"id": 315,
					"name": "pipeAsync",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 232,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 316,
							"name": "pipeAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async/await-friendly version of [[`pipe`]].  Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "A promise so it can play nice with async/await\n"
							},
							"typeParameter": [
								{
									"id": 317,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								}
							],
							"parameters": [
								{
									"id": 318,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 317,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 319,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 317,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						},
						{
							"id": 320,
							"name": "pipeAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async/await-friendly version of [[`pipe`]].  Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "A promise so it can play nice with async/await\n"
							},
							"typeParameter": [
								{
									"id": 321,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 322,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 323,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 321,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 324,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 321,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 322,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 325,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 322,
												"name": "T2"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						},
						{
							"id": 326,
							"name": "pipeAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async/await-friendly version of [[`pipe`]].  Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "A promise so it can play nice with async/await\n"
							},
							"typeParameter": [
								{
									"id": 327,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 328,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 329,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 330,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 327,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 331,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 327,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 328,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 332,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 328,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 329,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 333,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 329,
												"name": "T3"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						},
						{
							"id": 334,
							"name": "pipeAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async/await-friendly version of [[`pipe`]].  Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "A promise so it can play nice with async/await\n"
							},
							"typeParameter": [
								{
									"id": 335,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 336,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 337,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 338,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 339,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 335,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 340,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 335,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 336,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 341,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 336,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 337,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 342,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 337,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 338,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 343,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 5: The sink that is the last step of the pipe\n"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 338,
												"name": "T4"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						},
						{
							"id": 344,
							"name": "pipeAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async/await-friendly version of [[`pipe`]].  Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "A promise so it can play nice with async/await\n"
							},
							"typeParameter": [
								{
									"id": 345,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 346,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 347,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 348,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 349,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 350,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 345,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 351,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 345,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 346,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 352,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 346,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 347,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 353,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 347,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 348,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 354,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 5: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 348,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 349,
												"name": "T5"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 355,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 6: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 349,
												"name": "T5"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						},
						{
							"id": 356,
							"name": "pipeAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "An async/await-friendly version of [[`pipe`]].  Creates a pipeline of steps where the first step produces the data and then\nit flows to the next step and so on. The first step is the source, producing the content, the final step is the sink.",
								"returns": "A promise so it can play nice with async/await\n"
							},
							"typeParameter": [
								{
									"id": 357,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that is produced by the source"
									}
								},
								{
									"id": 358,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 359,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 360,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 361,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the next step of the pipe"
									}
								},
								{
									"id": 362,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data generated and that moves to the final step of the pipe\n"
									}
								}
							],
							"parameters": [
								{
									"id": 363,
									"name": "read",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 1: The source that produces the data, the first step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 357,
												"name": "T1"
											}
										],
										"name": "ReadableStream"
									}
								},
								{
									"id": 364,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 2: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 357,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 358,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 365,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 3: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 358,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 359,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 366,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 4: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 359,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 360,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 367,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 5: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 360,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 361,
												"name": "T5"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 368,
									"name": "t5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 6: A transformation step that takes data from the previous step and pushes the result to the next step"
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 361,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 362,
												"name": "T6"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 369,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Pipeline step 7: The sink that is the last step of the pipe"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 362,
												"name": "T6"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"qualifiedName": "Promise",
								"package": "typescript",
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 370,
					"name": "pipeline",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 345,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 371,
							"name": "pipeline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Only used in advanced scenarios where you need to wrap multiple pipeline steps into a single writeable stream.\nThis is useful when you need to give some other code access to feed data into your pipeline.  It is not commonly used.",
								"returns": "The single pipeline step that wraps up all the steps passed in into a single step\n"
							},
							"typeParameter": [
								{
									"id": 372,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data that will be written to the\n"
									}
								},
								{
									"id": 373,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 372,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 373,
												"name": "D"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"parameters": [
								{
									"id": 374,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The first step to be wrapped"
									},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 372,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 375,
									"name": "drain",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 373,
										"name": "D"
									}
								},
								{
									"id": 376,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 373,
									"name": "D"
								},
								"extendsType": {
									"type": "reference",
									"id": 622,
									"typeArguments": [
										{
											"type": "inferred",
											"name": "U"
										}
									],
									"name": "ReadableStream"
								},
								"trueType": {
									"type": "reference",
									"id": 1377,
									"typeArguments": [
										{
											"type": "reference",
											"id": 372,
											"name": "T1"
										},
										{
											"type": "reference",
											"name": "U"
										}
									],
									"name": "TransformStream"
								},
								"falseType": {
									"type": "reference",
									"id": 998,
									"typeArguments": [
										{
											"type": "reference",
											"id": 372,
											"name": "T1"
										}
									],
									"name": "WritableStream"
								}
							}
						},
						{
							"id": 377,
							"name": "pipeline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 378,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 379,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 380,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 379,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 380,
												"name": "D"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"parameters": [
								{
									"id": 381,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 378,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 382,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 378,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 379,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 383,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 380,
										"name": "D"
									}
								},
								{
									"id": 384,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 380,
									"name": "D"
								},
								"extendsType": {
									"type": "reference",
									"id": 622,
									"typeArguments": [
										{
											"type": "inferred",
											"name": "U"
										}
									],
									"name": "ReadableStream"
								},
								"trueType": {
									"type": "reference",
									"id": 1377,
									"typeArguments": [
										{
											"type": "reference",
											"id": 378,
											"name": "T1"
										},
										{
											"type": "reference",
											"name": "U"
										}
									],
									"name": "TransformStream"
								},
								"falseType": {
									"type": "reference",
									"id": 998,
									"typeArguments": [
										{
											"type": "reference",
											"id": 378,
											"name": "T1"
										}
									],
									"name": "WritableStream"
								}
							}
						},
						{
							"id": 385,
							"name": "pipeline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 386,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 387,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 388,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 389,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 388,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 389,
												"name": "D"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"parameters": [
								{
									"id": 390,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 386,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 391,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 386,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 387,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 392,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 387,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 388,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 393,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 389,
										"name": "D"
									}
								},
								{
									"id": 394,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 389,
									"name": "D"
								},
								"extendsType": {
									"type": "reference",
									"id": 622,
									"typeArguments": [
										{
											"type": "inferred",
											"name": "U"
										}
									],
									"name": "ReadableStream"
								},
								"trueType": {
									"type": "reference",
									"id": 1377,
									"typeArguments": [
										{
											"type": "reference",
											"id": 386,
											"name": "T1"
										},
										{
											"type": "reference",
											"name": "U"
										}
									],
									"name": "TransformStream"
								},
								"falseType": {
									"type": "reference",
									"id": 998,
									"typeArguments": [
										{
											"type": "reference",
											"id": 386,
											"name": "T1"
										}
									],
									"name": "WritableStream"
								}
							}
						},
						{
							"id": 395,
							"name": "pipeline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 396,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 397,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 398,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 399,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 400,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 399,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 400,
												"name": "D"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"parameters": [
								{
									"id": 401,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 396,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 402,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 396,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 397,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 403,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 397,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 398,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 404,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 398,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 399,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 405,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 400,
										"name": "D"
									}
								},
								{
									"id": 406,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 400,
									"name": "D"
								},
								"extendsType": {
									"type": "reference",
									"id": 622,
									"typeArguments": [
										{
											"type": "inferred",
											"name": "U"
										}
									],
									"name": "ReadableStream"
								},
								"trueType": {
									"type": "reference",
									"id": 1377,
									"typeArguments": [
										{
											"type": "reference",
											"id": 396,
											"name": "T1"
										},
										{
											"type": "reference",
											"name": "U"
										}
									],
									"name": "TransformStream"
								},
								"falseType": {
									"type": "reference",
									"id": 998,
									"typeArguments": [
										{
											"type": "reference",
											"id": 396,
											"name": "T1"
										}
									],
									"name": "WritableStream"
								}
							}
						},
						{
							"id": 407,
							"name": "pipeline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 408,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 409,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 410,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 411,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 412,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 413,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 412,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 413,
												"name": "D"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"parameters": [
								{
									"id": 414,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 408,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 415,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 408,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 409,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 416,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 409,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 410,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 417,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 410,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 411,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 418,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 411,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 412,
												"name": "T5"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 419,
									"name": "t5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 413,
										"name": "D"
									}
								},
								{
									"id": 420,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 413,
									"name": "D"
								},
								"extendsType": {
									"type": "reference",
									"id": 622,
									"typeArguments": [
										{
											"type": "inferred",
											"name": "U"
										}
									],
									"name": "ReadableStream"
								},
								"trueType": {
									"type": "reference",
									"id": 1377,
									"typeArguments": [
										{
											"type": "reference",
											"id": 408,
											"name": "T1"
										},
										{
											"type": "reference",
											"name": "U"
										}
									],
									"name": "TransformStream"
								},
								"falseType": {
									"type": "reference",
									"id": 998,
									"typeArguments": [
										{
											"type": "reference",
											"id": 408,
											"name": "T1"
										}
									],
									"name": "WritableStream"
								}
							}
						},
						{
							"id": 421,
							"name": "pipeline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"typeParameter": [
								{
									"id": 422,
									"name": "T1",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 423,
									"name": "T2",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 424,
									"name": "T3",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 425,
									"name": "T4",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 426,
									"name": "T5",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 427,
									"name": "T6",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								},
								{
									"id": 428,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 427,
												"name": "T6"
											},
											{
												"type": "reference",
												"id": 428,
												"name": "D"
											}
										],
										"name": "WritableStream"
									}
								}
							],
							"parameters": [
								{
									"id": 429,
									"name": "write",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 422,
												"name": "T1"
											}
										],
										"name": "WritableStream"
									}
								},
								{
									"id": 430,
									"name": "t1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 422,
												"name": "T1"
											},
											{
												"type": "reference",
												"id": 423,
												"name": "T2"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 431,
									"name": "t2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 423,
												"name": "T2"
											},
											{
												"type": "reference",
												"id": 424,
												"name": "T3"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 432,
									"name": "t3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 424,
												"name": "T3"
											},
											{
												"type": "reference",
												"id": 425,
												"name": "T4"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 433,
									"name": "t4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 425,
												"name": "T4"
											},
											{
												"type": "reference",
												"id": 426,
												"name": "T5"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 434,
									"name": "t5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 426,
												"name": "T5"
											},
											{
												"type": "reference",
												"id": 427,
												"name": "T6"
											}
										],
										"name": "TransformStream"
									}
								},
								{
									"id": 435,
									"name": "t6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 428,
										"name": "D"
									}
								},
								{
									"id": 436,
									"name": "errorCallback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 1827,
										"name": "ErrorCallback"
									}
								}
							],
							"type": {
								"type": "conditional",
								"checkType": {
									"type": "reference",
									"id": 428,
									"name": "D"
								},
								"extendsType": {
									"type": "reference",
									"id": 622,
									"typeArguments": [
										{
											"type": "inferred",
											"name": "U"
										}
									],
									"name": "ReadableStream"
								},
								"trueType": {
									"type": "reference",
									"id": 1377,
									"typeArguments": [
										{
											"type": "reference",
											"id": 422,
											"name": "T1"
										},
										{
											"type": "reference",
											"name": "U"
										}
									],
									"name": "TransformStream"
								},
								"falseType": {
									"type": "reference",
									"id": 998,
									"typeArguments": [
										{
											"type": "reference",
											"id": 422,
											"name": "T1"
										}
									],
									"name": "WritableStream"
								}
							}
						}
					]
				},
				{
					"id": 474,
					"name": "process",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 460,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 475,
							"name": "process",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that takes events in of type T, allows your code to process it and then\nyou send an event of type U to the the next pipeline step.",
								"returns": "The pipeline step that is ready to be used in a pipeline"
							},
							"typeParameter": [
								{
									"id": 476,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data sent into the function to be processed"
									}
								},
								{
									"id": 477,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data you send on after being processed\n"
									}
								}
							],
							"parameters": [
								{
									"id": 478,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the bot act as"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 479,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The function to process data, getting data of type T and returning data of type U"
									},
									"type": {
										"type": "reference",
										"id": 561,
										"typeArguments": [
											{
												"type": "reference",
												"id": 476,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 477,
												"name": "U"
											}
										],
										"name": "ProcessFunction"
									}
								},
								{
									"id": 480,
									"name": "outQueue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The queue to send the resulting data to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 476,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 477,
										"name": "U"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 530,
					"name": "stringify",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 578,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 531,
							"name": "stringify",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that turns a Javascript object into a [JSON line](https://jsonlines.org/)\n(newline at the end of the stringified JS object). This is used to make it easy to create JSON lines files.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 490,
					"name": "through",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 506,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 491,
							"name": "through",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a callback based pipeline step that will take data in, possibly transform the data or do computation, and then\nsends the result on to the next step in the pipeline.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n",
								"tags": [
									{
										"tag": "see",
										"text": "[[`throughAsync`]]"
									}
								]
							},
							"typeParameter": [
								{
									"id": 492,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data sent in to be passed through this step."
									}
								},
								{
									"id": 493,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data to be sent on to the next step in the pipeline."
									}
								}
							],
							"parameters": [
								{
									"id": 494,
									"name": "transform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A function that does the work of taking the data in, doing something with it and then calling the done function when done.\n  The first arg is stripped off by Javascript since it recognizes that the this arg is just to set the this context\n  so that the `this` keyword will work inside the function and itself be the instance of the transform stream which can be useful.\n  For example, say you want to push to an event in here to a queue.  You could do that by calling\n  `this.push` to push the event to a queue while still sending the queue on the next step in the pipeline afterwards.\n\n  So, the first real argument your function will receive is `obj` which is the data event being sent in to be processed/transformed\n  and sent on to the next pipeline step.  The second arg is `done`.  You call this when you're done.  Call `done()` if there's no error\n  but you want to filter out this event and not pass it on to the next pipeline step.  Call `done(err)` if an error ocurreed where\n  `err` is a string or Error object.  Call `done(null, U)` when no error and you want to pass on an event to the next step in the\n  pipeline where `U` is the type of object being sent on.\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 495,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 496,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 497,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 1377,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 492,
																		"name": "T"
																	},
																	{
																		"type": "reference",
																		"id": 493,
																		"name": "U"
																	}
																],
																"name": "TransformStream"
															}
														},
														{
															"id": 498,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 492,
																"name": "T"
															}
														},
														{
															"id": 499,
															"name": "done",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 1820,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 493,
																		"name": "U"
																	},
																	{
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																],
																"name": "DataCallback"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 500,
									"name": "flush",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A function to be called when the entire pipeline has been flushed to allow for cleanup, perhaps closing a DB connection."
									},
									"type": {
										"type": "reference",
										"id": 1849,
										"typeArguments": [
											{
												"type": "reference",
												"id": 493,
												"name": "U"
											},
											{
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										],
										"name": "FlushCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 492,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 493,
										"name": "U"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 501,
					"name": "throughAsync",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 532,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 502,
							"name": "throughAsync",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates an async/await-friendly pipeline step that will take data in, possibly transform the data or do computation, and then\nsends the result on to the next step in the pipeline.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n",
								"tags": [
									{
										"tag": "see",
										"text": "[[`through`]]"
									}
								]
							},
							"typeParameter": [
								{
									"id": 503,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of the data sent in to be passed through this step."
									}
								},
								{
									"id": 504,
									"name": "U",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"comment": {
										"shortText": "The type of data to be sent on to the next step in the pipeline."
									}
								}
							],
							"parameters": [
								{
									"id": 505,
									"name": "transform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A function that does the work of taking the data in, doing something with it and then rejecting or resolving\n  the promise with the result object type U.  If you resolve with no result data, the event is skipped and not sent to the next pipeline step.\n  The first arg is stripped off by Javascript since it recognizes that the this arg is just to set the this context\n  so that the `this` keyword will work inside the function and itself be the instance of the transform stream which can be useful.\n  For example, say you want to push to an event in here to a queue.  You could do that by calling\n  `this.push` to push the event to a queue while still sending the queue on the next step in the pipeline afterwards.\n\n  So, the first real argument your function will receive is `obj` which is the data event being sent in to be processed/transformed\n  and sent on to the next pipeline step.\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 506,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 507,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 508,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 1377,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 503,
																		"name": "T"
																	},
																	{
																		"type": "reference",
																		"id": 504,
																		"name": "U"
																	}
																],
																"name": "TransformStream"
															}
														},
														{
															"id": 509,
															"name": "obj",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 503,
																"name": "T"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 504,
																"name": "U"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 504,
																		"name": "U"
																	}
																],
																"qualifiedName": "Promise",
																"package": "typescript",
																"name": "Promise"
															}
														]
													}
												}
											]
										}
									}
								},
								{
									"id": 510,
									"name": "flush",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "A function to be called when the entire pipeline has been flushed to allow for cleanup, perhaps closing a DB connection."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 511,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 512,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 513,
															"name": "this",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 1377,
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 503,
																		"name": "T"
																	},
																	{
																		"type": "reference",
																		"id": 504,
																		"name": "U"
																	}
																],
																"name": "TransformStream"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 504,
																"name": "U"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 504,
																		"name": "U"
																	}
																],
																"qualifiedName": "Promise",
																"package": "typescript",
																"name": "Promise"
															}
														]
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "reference",
										"id": 503,
										"name": "T"
									},
									{
										"type": "reference",
										"id": 504,
										"name": "U"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 535,
					"name": "toCSV",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 600,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 536,
							"name": "toCSV",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step that will create a CSV file from the events that flow into this step.\nUnderneath the covers it uses the popular [fast-csv](https://c2fo.github.io/fast-csv) node library.",
								"returns": "The pipeline step that is ready to be used in a pipeline"
							},
							"parameters": [
								{
									"id": 537,
									"name": "fieldList",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "List of fields to transform | true builds the header list dynmaically"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								},
								{
									"id": 538,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "fastCSV options https://c2fo.github.io/fast-csv/docs/parsing/options\n"
									},
									"type": {
										"type": "reference",
										"id": 611,
										"name": "ToCsvOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1377,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "TransformStream"
							}
						}
					]
				},
				{
					"id": 543,
					"name": "toS3",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 625,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 544,
							"name": "toS3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "This creates a pipeline step meant to be the last step in a pipeline, the sink, that writes events that flow into it\ninto S3.  You should micro-batch events before getting to this step to control how many events to write to the file.",
								"returns": "The pipeline step that is ready to be used in a pipeline\n"
							},
							"parameters": [
								{
									"id": 545,
									"name": "Bucket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the AWS S3 bucket to write the file to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 546,
									"name": "File",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The name of the file to write."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 998,
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "WritableStream"
							}
						}
					]
				},
				{
					"id": 514,
					"name": "writeWrapped",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/streams.d.ts",
							"line": 543,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 515,
							"name": "writeWrapped",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Wraps a command function as a WriteableStream.",
								"tags": [
									{
										"tag": "result",
										"text": "todo"
									}
								]
							},
							"typeParameter": [
								{
									"id": 516,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 517,
									"name": "opts",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 518,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 569,
										"typeArguments": [
											{
												"type": "reference",
												"id": 516,
												"name": "T"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "CommandWrapFunction"
									}
								},
								{
									"id": 519,
									"name": "flush",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "FlushCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 998,
								"typeArguments": [
									{
										"type": "reference",
										"id": 516,
										"name": "T"
									}
								],
								"name": "WritableStream"
							}
						},
						{
							"id": 520,
							"name": "writeWrapped",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Wraps a command function as a WriteableStream.",
								"tags": [
									{
										"tag": "result",
										"text": "todo"
									}
								]
							},
							"typeParameter": [
								{
									"id": 521,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {}
								}
							],
							"parameters": [
								{
									"id": 522,
									"name": "func",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 569,
										"typeArguments": [
											{
												"type": "reference",
												"id": 521,
												"name": "T"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "CommandWrapFunction"
									}
								},
								{
									"id": 523,
									"name": "flush",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "FlushCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 998,
								"typeArguments": [
									{
										"type": "reference",
										"id": 521,
										"name": "T"
									}
								],
								"name": "WritableStream"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						616,
						590,
						593,
						584,
						611
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						569,
						554,
						561
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						481,
						524,
						450,
						444,
						466,
						462,
						437,
						441,
						539,
						547,
						458,
						532,
						485,
						254,
						315,
						370,
						474,
						530,
						490,
						501,
						535,
						543,
						514
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/streams.d.ts",
					"line": 2,
					"character": 0
				}
			]
		},
		{
			"id": 621,
			"name": "lib/types",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 3228,
					"name": "BatchOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 9
						}
					],
					"target": 2325
				},
				{
					"id": 3236,
					"name": "BufferOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2355
				},
				{
					"id": 3232,
					"name": "Callback",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2329
				},
				{
					"id": 3240,
					"name": "CheckpointData",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2396
				},
				{
					"id": 3267,
					"name": "CommandWrapFunction",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 569
				},
				{
					"id": 3269,
					"name": "CommandWrapOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 590
				},
				{
					"id": 3238,
					"name": "EnrichOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2368
				},
				{
					"id": 3229,
					"name": "FromCsvOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 23
						}
					],
					"target": 2326
				},
				{
					"id": 3239,
					"name": "OffloadOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2378
				},
				{
					"id": 3266,
					"name": "ProcessCallback",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 554
				},
				{
					"id": 3268,
					"name": "ProcessCallbackOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 584
				},
				{
					"id": 3230,
					"name": "ProcessFunction",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 39
						}
					],
					"target": 2327
				},
				{
					"id": 3235,
					"name": "ReadOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2342
				},
				{
					"id": 3241,
					"name": "StatsStream",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2403
				},
				{
					"id": 3242,
					"name": "StreamUtil",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2865
				},
				{
					"id": 3233,
					"name": "ThroughEvent",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2334
				},
				{
					"id": 3237,
					"name": "ToCheckpointOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2364
				},
				{
					"id": 3231,
					"name": "ToCsvOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/lib.d.ts",
							"line": 9,
							"character": 56
						}
					],
					"target": 2328
				},
				{
					"id": 3234,
					"name": "WriteOptions",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 2336
				},
				{
					"id": 3254,
					"name": "batch",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 481
				},
				{
					"id": 3259,
					"name": "buffer",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 524
				},
				{
					"id": 3249,
					"name": "bufferBackoff",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 450
				},
				{
					"id": 3248,
					"name": "commandWrap",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 444
				},
				{
					"id": 3252,
					"name": "counter",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 466
				},
				{
					"id": 3251,
					"name": "devnull",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 462
				},
				{
					"id": 3246,
					"name": "eventIdFromTimestamp",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 437
				},
				{
					"id": 3247,
					"name": "eventIdToTimestamp",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 441
				},
				{
					"id": 3263,
					"name": "fromCSV",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 539
				},
				{
					"id": 3265,
					"name": "fromS3",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 547
				},
				{
					"id": 3250,
					"name": "log",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 458
				},
				{
					"id": 3261,
					"name": "parse",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 532
				},
				{
					"id": 3255,
					"name": "passthrough",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 485
				},
				{
					"id": 3243,
					"name": "pipe",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 254
				},
				{
					"id": 3244,
					"name": "pipeAsync",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 315
				},
				{
					"id": 3245,
					"name": "pipeline",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 370
				},
				{
					"id": 3253,
					"name": "process",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 474
				},
				{
					"id": 3260,
					"name": "stringify",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 530
				},
				{
					"id": 3256,
					"name": "through",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 490
				},
				{
					"id": 3257,
					"name": "throughAsync",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 501
				},
				{
					"id": 3262,
					"name": "toCSV",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 535
				},
				{
					"id": 3264,
					"name": "toS3",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 543
				},
				{
					"id": 3258,
					"name": "writeWrapped",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 514
				},
				{
					"id": 1892,
					"name": "BotInvocationEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"children": [
						{
							"id": 1894,
							"name": "__cron",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 396,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1895,
								"name": "Cron"
							}
						},
						{
							"id": 1893,
							"name": "botId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 395,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1894,
								1893
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 394,
							"character": 17
						}
					]
				},
				{
					"id": 1912,
					"name": "Checkpoint",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Represents a checkpoint. For queues the bot reads from, the checkpoint is the event ID in a given queue that the bot is known to have\nlast read from. For queues the bot writes to, this is the event ID of the last position written to in that queue.\nIf you read 11 events and then update the checkpoint back to the RStreams bus, then `checkpoint`will be the event ID of the tenth\nevent, `records` would be 11, `started_timestamp` would be the time since the epoch of the first event and `ended_timestamp` would\nbe time since the epock of the 11th event and `source_timestamp` would be the timestamp of the first event that made it to the bus\nthat the 11th event derived from, no matter how far back upstream."
					},
					"children": [
						{
							"id": 1913,
							"name": "checkpoint",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The event ID of the position itself that is being remembered"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 459,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1914,
							"name": "ended_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The timestamp of the last event represented by the checkpoint"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 462,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1915,
							"name": "records",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The number of records that this checkpoint represents, if checkpointing after every event this is 1, if waiting to CP after 10 then is 10"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 465,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1916,
							"name": "source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The timestamp of the first event that made it to the bus that this event eventually derived from, however far back upstream"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 468,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1917,
							"name": "started_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The timestamp of the first event represented by the checkpoint"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 471,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1913,
								1914,
								1915,
								1916,
								1917
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 457,
							"character": 17
						}
					]
				},
				{
					"id": 1903,
					"name": "Checkpoints",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "For queues the bot reads from, the checkpoint is the event ID in a given queue that the bot is known to have last read from. For queues\nthe bot writes to, this is the event ID of the last position written to in that queue."
					},
					"children": [
						{
							"id": 1904,
							"name": "read",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Read checkpoints where the key is the queue and the value is the checkpoint data"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 443,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1905,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 1906,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1907,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1912,
											"name": "Checkpoint"
										}
									}
								}
							}
						},
						{
							"id": 1908,
							"name": "write",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Write checkpoints where the key is the queue and the value is the checkpoint data"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 446,
									"character": 1
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1909,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 1910,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 1911,
												"name": "key",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "reference",
											"id": 1912,
											"name": "Checkpoint"
										}
									}
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1904,
								1908
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 441,
							"character": 17
						}
					]
				},
				{
					"id": 1881,
					"name": "CorrelationId",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "This is data stored in an RStreams queue `Event` to understand where this event came from before it got into the queue it\nis in now, whether that's an external system like Mongo or MS SQL Server or whether this event is a derivative\nevent from an upstream queue.",
						"text": "So, let's say that your bot read from Queue A and got event 123 from it.  Your bot then transformed event 123\nand turned it into some new event that you sent to Queue B as event 789.  Your event 789 should keep track\nof the ancestry of the event, storing here in the correlation information the fact that it came from\nQueue A, the `source`, and event 123 in `start`.\n\nAlso note, that sometimes you will have a bot that reads several events from an upstream queue and then\nwrites exactly one aggregate event to a downstream queue.  In this case, you want to track the ID of the\nfirst upstream event that was aggregated in `start` and the last aggregated event in `end` and set units\nto the number of total events that got turned into this one event.\n\nDevelopers that don't take the time to add this data to an event. do this will regret it in the future.  This information is critical\nto the trace feature for debugging, both manual tracing to understand where an event came from and\nbotmon's automated visual tracing.\n"
					},
					"children": [
						{
							"id": 1884,
							"name": "end",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The ending ID in the parent source this event derived from.  If the parent was an RStreams queue, this will\nbe the event ID.  This being set means this event derived from multiple events in the parent queue and\n`start` is the first and `end` is the last.",
								"tags": [
									{
										"tag": "default",
										"text": "`start`\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 321,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1882,
							"name": "source",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Data that identifies the parent source of this data, often the parent RStreams queue name this event derived from or a\ntable in Mongo or a kinesis stream name, etc."
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 305,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1883,
							"name": "start",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The starting ID in the parent source this event derived from.  If the parent was an RStreams queue, this will\nbe the event ID.  If the parent was a mongo table this would the Mongo tail position, or if from kinesis this\nwill be the kinesis sequence number, etc.  If this event derived from more than one parent event, `end` will be set."
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 312,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1885,
							"name": "units",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "If this event is derived from multiple parent events, this is how many.",
								"tags": [
									{
										"tag": "default",
										"text": "1\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 328,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1884,
								1882,
								1883,
								1885
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 300,
							"character": 17
						}
					]
				},
				{
					"id": 1895,
					"name": "Cron",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "First, remember that for legacy reasons `Cron` really means `Bot`.  This is details\nabout a bot."
					},
					"children": [
						{
							"id": 1902,
							"name": "checkpoints",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "List of read/write positions of sources and destinations for this bot"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 432,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1903,
								"name": "Checkpoints"
							}
						},
						{
							"id": 1900,
							"name": "force",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "For local dev it will ignore the cron locking and force it to run (will run through the handshake and force it to take the lock)"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 424,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1896,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the bot"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 405,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1901,
							"name": "ignore_lock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "For local dev, skip the locking process altogether for guaranteing only one instance of the bot runs"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 427,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1897,
							"name": "iid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The instance ID of the bot, used for fanout.  So, if running multiple instances of the same bot we can tell which this is."
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 408,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1898,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The name of the bot"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 415,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1899,
							"name": "ts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The invocation timestamp token which is what is used to lock on to prevent multiple concurrent invocations to the same bot"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 421,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1902,
								1900,
								1896,
								1901,
								1897,
								1898,
								1899
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 403,
							"character": 17
						}
					]
				},
				{
					"id": 1856,
					"name": "Event",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "The standard RStreams event that is written to and read from RStreams bus queues and thus through Node pipes that work\nwith these queues."
					},
					"children": [
						{
							"id": 1862,
							"name": "correlation_id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Reference the doc on [`CorrelationId`] that describes this well."
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 271,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1881,
								"name": "CorrelationId"
							}
						},
						{
							"id": 1858,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This is the name of the RStreams queue this event is in"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 249,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1860,
							"name": "event_source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The timestamp of the first event that made it to the bus that this event eventually derived from, however far back\nupstream.",
								"tags": [
									{
										"tag": "default",
										"text": "now\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 263,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1857,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the bot that wrote this event to the queue"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 246,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1861,
							"name": "payload",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The RStreams queue-specific data that this event exists to wrap"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 266,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1863,
								"name": "T"
							}
						},
						{
							"id": 1859,
							"name": "timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The millisecond (time since epoch) of when this event was created by the developer.",
								"tags": [
									{
										"tag": "default",
										"text": "now\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 255,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1862,
								1858,
								1860,
								1857,
								1861,
								1859
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 244,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 1863,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data that is the payload of the event, specific to the queue the event is meant for\n"
							}
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 1864,
							"name": "WriteEvent"
						},
						{
							"type": "reference",
							"id": 1872,
							"name": "ReadEvent"
						}
					]
				},
				{
					"id": 1918,
					"name": "RStreamsContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1931,
							"name": "awsRequestId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 100,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.awsRequestId"
							}
						},
						{
							"id": 1920,
							"name": "botId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 477,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1926,
							"name": "callbackWaitsForEmptyEventLoop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 95,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.callbackWaitsForEmptyEventLoop"
							}
						},
						{
							"id": 1935,
							"name": "clientContext",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 104,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "ClientContext",
								"package": "@types/aws-lambda",
								"name": "ClientContext"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.clientContext"
							}
						},
						{
							"id": 1927,
							"name": "functionName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 96,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.functionName"
							}
						},
						{
							"id": 1928,
							"name": "functionVersion",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 97,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.functionVersion"
							}
						},
						{
							"id": 1934,
							"name": "identity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 103,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "CognitoIdentity",
								"package": "@types/aws-lambda",
								"name": "CognitoIdentity"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.identity"
							}
						},
						{
							"id": 1929,
							"name": "invokedFunctionArn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 98,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.invokedFunctionArn"
							}
						},
						{
							"id": 1932,
							"name": "logGroupName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 101,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.logGroupName"
							}
						},
						{
							"id": 1933,
							"name": "logStreamName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 102,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.logStreamName"
							}
						},
						{
							"id": 1930,
							"name": "memoryLimitInMB",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/aws-lambda/handler.d.ts",
									"line": 99,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.memoryLimitInMB"
							}
						},
						{
							"id": 1919,
							"name": "resources",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 476,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"id": 1951,
								"name": "R"
							}
						},
						{
							"id": 1921,
							"name": "sdk",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 478,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"id": 22,
								"name": "RStreamsSdk"
							}
						},
						{
							"id": 1938,
							"name": "done",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1939,
									"name": "done",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use handler callback or promise result"
											}
										]
									},
									"parameters": [
										{
											"id": 1940,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										},
										{
											"id": 1941,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Context.done"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.done"
							}
						},
						{
							"id": 1942,
							"name": "fail",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1943,
									"name": "fail",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use handler callback with first argument or reject a promise result"
											}
										]
									},
									"parameters": [
										{
											"id": 1944,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"qualifiedName": "Error",
														"package": "typescript",
														"name": "Error"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Context.fail"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.fail"
							}
						},
						{
							"id": 1922,
							"name": "getCheckpoint",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 479,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1923,
									"name": "getCheckpoint",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1924,
											"name": "queue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1925,
											"name": "defaultIfNull",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"qualifiedName": "Promise",
										"package": "typescript",
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1936,
							"name": "getRemainingTimeInMillis",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1937,
									"name": "getRemainingTimeInMillis",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Context.getRemainingTimeInMillis"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.getRemainingTimeInMillis"
							}
						},
						{
							"id": 1945,
							"name": "succeed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1946,
									"name": "succeed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use handler callback with second argument or resolve a promise result"
											}
										]
									},
									"parameters": [
										{
											"id": 1947,
											"name": "messageOrObject",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Context.succeed"
									}
								},
								{
									"id": 1948,
									"name": "succeed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use handler callback or promise result"
											}
										]
									},
									"parameters": [
										{
											"id": 1949,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1950,
											"name": "object",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Context.succeed"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Context.succeed"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1931,
								1920,
								1926,
								1935,
								1927,
								1928,
								1934,
								1929,
								1932,
								1933,
								1930,
								1919,
								1921
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1938,
								1942,
								1922,
								1936,
								1945
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 474,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 1951,
							"name": "R",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "Context",
							"package": "@types/aws-lambda",
							"name": "Context"
						}
					]
				},
				{
					"id": 1872,
					"name": "ReadEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1879,
							"name": "correlation_id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Reference the doc on [`CorrelationId`] that describes this well."
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 271,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1881,
								"name": "CorrelationId"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1862,
								"name": "Event.correlation_id"
							}
						},
						{
							"id": 1873,
							"name": "eid",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 278,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1875,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This is the name of the RStreams queue this event is in"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 249,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1858,
								"name": "Event.event"
							}
						},
						{
							"id": 1877,
							"name": "event_source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The timestamp of the first event that made it to the bus that this event eventually derived from, however far back\nupstream.",
								"tags": [
									{
										"tag": "default",
										"text": "now\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 263,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1860,
								"name": "Event.event_source_timestamp"
							}
						},
						{
							"id": 1874,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the bot that wrote this event to the queue"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 246,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1857,
								"name": "Event.id"
							}
						},
						{
							"id": 1878,
							"name": "payload",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The RStreams queue-specific data that this event exists to wrap"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 266,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1880,
								"name": "T"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1861,
								"name": "Event.payload"
							}
						},
						{
							"id": 1876,
							"name": "timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The millisecond (time since epoch) of when this event was created by the developer.",
								"tags": [
									{
										"tag": "default",
										"text": "now\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 255,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1859,
								"name": "Event.timestamp"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1879,
								1873,
								1875,
								1877,
								1874,
								1878,
								1876
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 277,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 1880,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1856,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1880,
									"name": "T"
								}
							],
							"name": "Event"
						}
					]
				},
				{
					"id": 622,
					"name": "ReadableStream",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A ReadableStream produces events as the source of a pipe.  It is an RStreams-specific wrapper\ninterface that inherits from the Node library's fundament `Readable` stream interface,\nthe most abstract source pipeline step definition in Node.  You will see this type in various type\nsignatures.  For example, the first pipeline step in a [[`StreamUtil.pipe`]] is\nalways a `ReadableStream`, since the pipe needs a source to produce events. Another example: you will find\n`ReadableStream` instances that read from files to produce events as the source in a pipe."
					},
					"children": [
						{
							"id": 639,
							"name": "destroyed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Is `true` after `readable.destroy()` has been called.",
								"tags": [
									{
										"tag": "since",
										"text": "v8.0.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 115,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.destroyed"
							}
						},
						{
							"id": 631,
							"name": "readable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Is `true` if it is safe to call `readable.read()`, which means\nthe stream has not been destroyed or emitted `'error'` or `'end'`.",
								"tags": [
									{
										"tag": "since",
										"text": "v11.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 71,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readable"
							}
						},
						{
							"id": 630,
							"name": "readableAborted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Returns whether the stream was destroyed or errored before emitting `'end'`.",
								"tags": [
									{
										"tag": "since",
										"text": "v16.8.0"
									},
									{
										"tag": "experimental",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 65,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableAborted"
							}
						},
						{
							"id": 632,
							"name": "readableDidRead",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Returns whether `'data'` has been emitted.",
								"tags": [
									{
										"tag": "since",
										"text": "v16.7.0"
									},
									{
										"tag": "experimental",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 77,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableDidRead"
							}
						},
						{
							"id": 633,
							"name": "readableEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.7.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 82,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.BufferEncoding",
								"package": "@types/node",
								"name": "BufferEncoding"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableEncoding"
							}
						},
						{
							"id": 634,
							"name": "readableEnded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Becomes `true` when `'end'` event is emitted.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.9.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 87,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableEnded"
							}
						},
						{
							"id": 635,
							"name": "readableFlowing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "This property reflects the current state of a `Readable` stream as described\nin the `Three states` section.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 93,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableFlowing"
							}
						},
						{
							"id": 636,
							"name": "readableHighWaterMark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Returns the value of `highWaterMark` passed when creating this `Readable`.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.3.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 98,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableHighWaterMark"
							}
						},
						{
							"id": 637,
							"name": "readableLength",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "This property contains the number of bytes (or objects) in the queue\nready to be read. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 105,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableLength"
							}
						},
						{
							"id": 638,
							"name": "readableObjectMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Getter for the property `objectMode` of a given `Readable` stream.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.3.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 110,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.readableObjectMode"
							}
						},
						{
							"id": 962,
							"name": "[asyncIterator]",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 479,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 963,
									"name": "[asyncIterator]",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "AsyncIterableIterator",
										"package": "typescript",
										"name": "AsyncIterableIterator"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.__@asyncIterator@21791"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.__@asyncIterator@21791"
							}
						},
						{
							"id": 640,
							"name": "_construct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 117,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 641,
									"name": "_construct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 642,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 643,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 644,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 645,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable._construct"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable._construct"
							}
						},
						{
							"id": 668,
							"name": "_destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 399,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 669,
									"name": "_destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 670,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										},
										{
											"id": 671,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 672,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 673,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 674,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable._destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable._destroy"
							}
						},
						{
							"id": 646,
							"name": "_read",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 118,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 647,
									"name": "_read",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 648,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable._read"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable._read"
							}
						},
						{
							"id": 678,
							"name": "addListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 423,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 679,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Event emitter\nThe defined events on documents including:\n1. close\n2. data\n3. end\n4. error\n5. pause\n6. readable\n7. resume"
									},
									"parameters": [
										{
											"id": 680,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 681,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 682,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 683,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 684,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 685,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 686,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 687,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 688,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 689,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 690,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 691,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 692,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 693,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 694,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 695,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 696,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 697,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 698,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 699,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 700,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 701,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 702,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 703,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 704,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 705,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 706,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 707,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 708,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 709,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 710,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 711,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 712,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 713,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 714,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 715,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								},
								{
									"id": 716,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 717,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 718,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 719,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 720,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 721,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.addListener"
							}
						},
						{
							"id": 675,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 411,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 676,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the readable\nstream will release any internal resources and subsequent calls to `push()`will be ignored.",
										"text": "Once `destroy()` has been called any further calls will be a no-op and no\nfurther errors except from `_destroy()` may be emitted as `'error'`.\n\nImplementors should not override this method, but instead implement `readable._destroy()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v8.0.0"
											}
										]
									},
									"parameters": [
										{
											"id": 677,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Error which will be passed as payload in `'error'` event\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.destroy"
							}
						},
						{
							"id": 722,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 431,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 723,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 724,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 725,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 726,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 727,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 728,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 729,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 730,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 731,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 732,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 733,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 734,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 735,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 736,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 737,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 738,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								},
								{
									"id": 739,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 740,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 741,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.emit"
							}
						},
						{
							"id": 995,
							"name": "eventNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 996,
									"name": "eventNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v6.0.0\n"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.eventNames"
							}
						},
						{
							"id": 984,
							"name": "getMaxListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 985,
									"name": "getMaxListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.",
										"tags": [
											{
												"tag": "since",
												"text": "v1.0.0\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.getMaxListeners"
							}
						},
						{
							"id": 656,
							"name": "isPaused",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 278,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 657,
									"name": "isPaused",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.isPaused()` method returns the current operating state of the`Readable`. This is used primarily by the mechanism that underlies the`readable.pipe()` method. In most\ntypical cases, there will be no reason to\nuse this method directly.",
										"text": "```js\nconst readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.11.14\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.isPaused"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.isPaused"
							}
						},
						{
							"id": 992,
							"name": "listenerCount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 993,
									"name": "listenerCount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns the number of listeners listening to the event named `eventName`.",
										"tags": [
											{
												"tag": "since",
												"text": "v3.2.0"
											}
										]
									},
									"parameters": [
										{
											"id": 994,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "The name of the event being listened for\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.listenerCount"
							}
						},
						{
							"id": 986,
							"name": "listeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 987,
									"name": "listeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns a copy of the array of listeners for the event named `eventName`.",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.1.26\n"
											}
										]
									},
									"parameters": [
										{
											"id": 988,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Function",
											"package": "typescript",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.listeners"
							}
						},
						{
							"id": 971,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 972,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Alias for `emitter.removeListener()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v10.0.0\n"
											}
										]
									},
									"parameters": [
										{
											"id": 973,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 974,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 975,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 976,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 977,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.off"
							}
						},
						{
							"id": 742,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 439,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 743,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 744,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 745,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 746,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 747,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 748,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 749,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 750,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 751,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 752,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 753,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 754,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 755,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 756,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 757,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 758,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 759,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 760,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 761,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 762,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 763,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 764,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 765,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 766,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 767,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 768,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 769,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 770,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 771,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 772,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 773,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 774,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 775,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 776,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 777,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 778,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 779,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								},
								{
									"id": 780,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 781,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 782,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 783,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 784,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 785,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.on"
							}
						},
						{
							"id": 786,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 447,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 787,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 788,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 789,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 790,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 791,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 792,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 793,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 794,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 795,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 796,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 797,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 798,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 799,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 800,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 801,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 802,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 803,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 804,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 805,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 806,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 807,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 808,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 809,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 810,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 811,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 812,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 813,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 814,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 815,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 816,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 817,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 818,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 819,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 820,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 821,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 822,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 823,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								},
								{
									"id": 824,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 825,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 826,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 827,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 828,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 829,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.once"
							}
						},
						{
							"id": 652,
							"name": "pause",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 242,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 653,
									"name": "pause",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.pause()` method will cause a stream in flowing mode to stop\nemitting `'data'` events, switching out of flowing mode. Any data that\nbecomes available will remain in the internal buffer.",
										"text": "```js\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log('There will be no additional data for 1 second.');\n  setTimeout(() => {\n    console.log('Now data will start flowing again.');\n    readable.resume();\n  }, 1000);\n});\n```\n\nThe `readable.pause()` method has no effect if there is a `'readable'`event listener.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.pause"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.pause"
							}
						},
						{
							"id": 964,
							"name": "pipe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 24,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 965,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 966,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 966,
														"qualifiedName": "T",
														"package": "@types/node",
														"name": "T"
													}
												],
												"qualifiedName": "NodeJS.WritableStream",
												"package": "@types/node",
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 967,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"id": 966,
												"qualifiedName": "T",
												"package": "@types/node",
												"name": "T"
											}
										},
										{
											"id": 968,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 969,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 970,
															"name": "end",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/stream.d.ts",
																	"line": 27,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																970
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 966,
										"qualifiedName": "T",
										"package": "@types/node",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.pipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.pipe"
							}
						},
						{
							"id": 830,
							"name": "prependListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 455,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 831,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 832,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 833,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 834,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 835,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 836,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 837,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 838,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 839,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 840,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 841,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 842,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 843,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 844,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 845,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 846,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 847,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 848,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 849,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 850,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 851,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 852,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 853,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 854,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 855,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 856,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 857,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 858,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 859,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 860,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 861,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 862,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 863,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 864,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 865,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 866,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 867,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								},
								{
									"id": 868,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 869,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 870,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 871,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 872,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 873,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.prependListener"
							}
						},
						{
							"id": 874,
							"name": "prependOnceListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 463,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 875,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 876,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 877,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 878,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 879,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 880,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 881,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 882,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 883,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 884,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 885,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 886,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 887,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 888,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 889,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 890,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 891,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 892,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 893,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 894,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 895,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 896,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 897,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 898,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 899,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 900,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 901,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 902,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 903,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 904,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 905,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 906,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 907,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 908,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 909,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 910,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 911,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								},
								{
									"id": 912,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 913,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 914,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 915,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 916,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 917,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.prependOnceListener"
							}
						},
						{
							"id": 623,
							"name": "push",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 624,
									"name": "push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Push produced data downstream toward the next pipeline step."
									},
									"parameters": [
										{
											"id": 625,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The data to push, in RStreams this will be a JS object"
											},
											"type": {
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										},
										{
											"id": 626,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The encoding of the data being pushed, not relevant since RStreams uses\n `object mode` meaning we push JSobjects not raw data\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Readable.push"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Readable.push"
							}
						},
						{
							"id": 989,
							"name": "rawListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 990,
									"name": "rawListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v9.4.0\n"
											}
										]
									},
									"parameters": [
										{
											"id": 991,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Function",
											"package": "typescript",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.rawListeners"
							}
						},
						{
							"id": 627,
							"name": "read",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 628,
									"name": "read",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Read data from the stream"
									},
									"parameters": [
										{
											"id": 629,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If in object mode then this is the number of objects to read from the stream, otherwise\n it's the number of bytes to read from the stream.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 997,
										"name": "T"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Readable.read"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Readable.read"
							}
						},
						{
							"id": 978,
							"name": "removeAllListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 979,
									"name": "removeAllListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Removes all listeners, or those of the specified `eventName`.",
										"text": "It is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.1.26\n"
											}
										]
									},
									"parameters": [
										{
											"id": 980,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.removeAllListeners"
							}
						},
						{
							"id": 918,
							"name": "removeListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 471,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 919,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 920,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 921,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 922,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 923,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 924,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 925,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 926,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 927,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 928,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 929,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 930,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 931,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 932,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 933,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 934,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 935,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 936,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 937,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 938,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 939,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 940,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 941,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 942,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 943,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 944,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 945,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 946,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 947,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 948,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 949,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 950,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 951,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 952,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 953,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 954,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 955,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								},
								{
									"id": 956,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 957,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 958,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 959,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 960,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 961,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.removeListener"
							}
						},
						{
							"id": 654,
							"name": "resume",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 261,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 655,
									"name": "resume",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.resume()` method causes an explicitly paused `Readable` stream to\nresume emitting `'data'` events, switching the stream into flowing mode.",
										"text": "The `readable.resume()` method can be used to fully consume the data from a\nstream without actually processing any of that data:\n\n```js\ngetReadableStreamSomehow()\n  .resume()\n  .on('end', () => {\n    console.log('Reached the end, but did not read anything.');\n  });\n```\n\nThe `readable.resume()` method has no effect if there is a `'readable'`event listener.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.resume"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.resume"
							}
						},
						{
							"id": 649,
							"name": "setEncoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 220,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 650,
									"name": "setEncoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.setEncoding()` method sets the character encoding for\ndata read from the `Readable` stream.",
										"text": "By default, no encoding is assigned and stream data will be returned as`Buffer` objects. Setting an encoding causes the stream data\nto be returned as strings of the specified encoding rather than as `Buffer`objects. For instance, calling `readable.setEncoding('utf8')` will cause the\noutput data to be interpreted as UTF-8 data, and passed as strings. Calling`readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\nstring format.\n\nThe `Readable` stream will properly handle multi-byte characters delivered\nthrough the stream that would otherwise become improperly decoded if simply\npulled from the stream as `Buffer` objects.\n\n```js\nconst readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) => {\n  assert.equal(typeof chunk, 'string');\n  console.log('Got %d characters of string data:', chunk.length);\n});\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4"
											}
										]
									},
									"parameters": [
										{
											"id": 651,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "The encoding to use.\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.setEncoding"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.setEncoding"
							}
						},
						{
							"id": 981,
							"name": "setMaxListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 982,
									"name": "setMaxListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.",
										"text": "Returns a reference to the `EventEmitter`, so that calls can be chained.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.3.5\n"
											}
										]
									},
									"parameters": [
										{
											"id": 983,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.setMaxListeners"
							}
						},
						{
							"id": 658,
							"name": "unpipe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 305,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 659,
									"name": "unpipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.unpipe()` method detaches a `Writable` stream previously attached\nusing the {@link pipe} method.",
										"text": "If the `destination` is not specified, then _all_ pipes are detached.\n\nIf the `destination` is specified, but no pipe is set up for it, then\nthe method does nothing.\n\n```js\nconst fs = require('fs');\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second.\nreadable.pipe(writable);\nsetTimeout(() => {\n  console.log('Stop writing to file.txt.');\n  readable.unpipe(writable);\n  console.log('Manually close the file stream.');\n  writable.end();\n}, 1000);\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4"
											}
										]
									},
									"parameters": [
										{
											"id": 660,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Optional specific stream to unpipe\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "NodeJS.WritableStream",
												"package": "@types/node",
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.unpipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.unpipe"
							}
						},
						{
							"id": 661,
							"name": "unshift",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 371,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 662,
									"name": "unshift",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\nsame as `readable.push(null)`, after which no more data can be written. The EOF\nsignal is put at the end of the buffer and any buffered data will still be\nflushed.",
										"text": "The `readable.unshift()` method pushes a chunk of data back into the internal\nbuffer. This is useful in certain situations where a stream is being consumed by\ncode that needs to \"un-consume\" some amount of data that it has optimistically\npulled out of the source, so that the data can be passed on to some other party.\n\nThe `stream.unshift(chunk)` method cannot be called after the `'end'` event\nhas been emitted or a runtime error will be thrown.\n\nDevelopers using `stream.unshift()` often should consider switching to\nuse of a `Transform` stream instead. See the `API for stream implementers` section for more information.\n\n```js\n// Pull off a header delimited by \\n\\n.\n// Use unshift() if we get too much.\n// Call the callback with (error, header, stream).\nconst { StringDecoder } = require('string_decoder');\nfunction parseHeader(stream, callback) {\n  stream.on('error', callback);\n  stream.on('readable', onReadable);\n  const decoder = new StringDecoder('utf8');\n  let header = '';\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // Found the header boundary.\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n        stream.removeListener('error', callback);\n        // Remove the 'readable' listener before unshifting.\n        stream.removeListener('readable', onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // Now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // Still reading the header.\n        header += str;\n      }\n    }\n  }\n}\n```\n\nUnlike {@link push}, `stream.unshift(chunk)` will not\nend the reading process by resetting the internal reading state of the stream.\nThis can cause unexpected results if `readable.unshift()` is called during a\nread (i.e. from within a {@link _read} implementation on a\ncustom stream). Following the call to `readable.unshift()` with an immediate {@link push} will reset the reading state appropriately,\nhowever it is best to simply avoid calling `readable.unshift()` while in the\nprocess of performing a read.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.11"
											}
										]
									},
									"parameters": [
										{
											"id": 663,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer`, `Uint8Array` or `null`. For object mode\nstreams, `chunk` may be any JavaScript value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 664,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`.\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.unshift"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.unshift"
							}
						},
						{
							"id": 665,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 397,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 666,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Prior to Node.js 0.10, streams did not implement the entire `stream` module API\nas it is currently defined. (See `Compatibility` for more information.)",
										"text": "When using an older Node.js library that emits `'data'` events and has a {@link pause} method that is advisory only, the`readable.wrap()` method can be used to create a `Readable`\nstream that uses\nthe old stream as its data source.\n\nIt will rarely be necessary to use `readable.wrap()` but the method has been\nprovided as a convenience for interacting with older Node.js applications and\nlibraries.\n\n```js\nconst { OldReader } = require('./old-api-module.js');\nconst { Readable } = require('stream');\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on('readable', () => {\n  myReader.read(); // etc.\n});\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4"
											}
										]
									},
									"parameters": [
										{
											"id": 667,
											"name": "stream",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "An \"old style\" readable stream\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "NodeJS.ReadableStream",
												"package": "@types/node",
												"name": "ReadableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 622,
										"typeArguments": [
											{
												"type": "reference",
												"id": 997,
												"name": "T"
											}
										],
										"name": "ReadableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Readable.wrap"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Readable.wrap"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								639,
								631,
								630,
								632,
								633,
								634,
								635,
								636,
								637,
								638
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								962,
								640,
								668,
								646,
								678,
								675,
								722,
								995,
								984,
								656,
								992,
								986,
								971,
								742,
								786,
								652,
								964,
								830,
								874,
								623,
								989,
								627,
								978,
								918,
								654,
								649,
								981,
								658,
								661,
								665
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 24,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 997,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data the source will produce and make available for the next pipeline step"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "internal.Readable",
							"package": "@types/node",
							"name": "Readable"
						}
					]
				},
				{
					"id": 1377,
					"name": "TransformStream",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A stream that is a readable and writeable.  This is used when you want to have pipe steps in between the source that is\nproducing events and the sink that is consuming events, maybe to take in an event and transform it and then\nsend on down the pipe to the next step.  Conceptually, a `TransformStream` is like a mini-pipe of its own,\nwhere the first step in the pipe is a `Writeable` that can consume events from the previous pipeline step\nthat is then connected to the final step which is a `Readable` which can produce events to flow down the\npipe to the next step.  Thus, events can be consumed in and then flow out."
					},
					"children": [
						{
							"id": 1411,
							"name": "allowHalfOpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "If `false` then the stream will automatically end the writable side when the\nreadable side ends. Set initially by the `allowHalfOpen` constructor option,\nwhich defaults to `false`.",
								"text": "This can be changed manually to change the half-open behavior of an existing`Duplex` stream instance, but must be changed before the `'end'` event is\nemitted.",
								"tags": [
									{
										"tag": "since",
										"text": "v0.9.4\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 819,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.allowHalfOpen"
							}
						},
						{
							"id": 1467,
							"name": "destroyed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Is `true` after `readable.destroy()` has been called.",
								"tags": [
									{
										"tag": "since",
										"text": "v8.0.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 115,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.destroyed"
							}
						},
						{
							"id": 1459,
							"name": "readable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Is `true` if it is safe to call `readable.read()`, which means\nthe stream has not been destroyed or emitted `'error'` or `'end'`.",
								"tags": [
									{
										"tag": "since",
										"text": "v11.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 71,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readable"
							}
						},
						{
							"id": 1458,
							"name": "readableAborted",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Returns whether the stream was destroyed or errored before emitting `'end'`.",
								"tags": [
									{
										"tag": "since",
										"text": "v16.8.0"
									},
									{
										"tag": "experimental",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 65,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableAborted"
							}
						},
						{
							"id": 1460,
							"name": "readableDidRead",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Returns whether `'data'` has been emitted.",
								"tags": [
									{
										"tag": "since",
										"text": "v16.7.0"
									},
									{
										"tag": "experimental",
										"text": "\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 77,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableDidRead"
							}
						},
						{
							"id": 1461,
							"name": "readableEncoding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Getter for the property `encoding` of a given `Readable` stream. The `encoding`property can be set using the `readable.setEncoding()` method.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.7.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 82,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.BufferEncoding",
								"package": "@types/node",
								"name": "BufferEncoding"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableEncoding"
							}
						},
						{
							"id": 1462,
							"name": "readableEnded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Becomes `true` when `'end'` event is emitted.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.9.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 87,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableEnded"
							}
						},
						{
							"id": 1463,
							"name": "readableFlowing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "This property reflects the current state of a `Readable` stream as described\nin the `Three states` section.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 93,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableFlowing"
							}
						},
						{
							"id": 1464,
							"name": "readableHighWaterMark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Returns the value of `highWaterMark` passed when creating this `Readable`.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.3.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 98,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableHighWaterMark"
							}
						},
						{
							"id": 1465,
							"name": "readableLength",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "This property contains the number of bytes (or objects) in the queue\nready to be read. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 105,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableLength"
							}
						},
						{
							"id": 1466,
							"name": "readableObjectMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Getter for the property `objectMode` of a given `Readable` stream.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.3.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 110,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.readableObjectMode"
							}
						},
						{
							"id": 1404,
							"name": "writable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 803,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writable"
							}
						},
						{
							"id": 1410,
							"name": "writableCorked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 809,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writableCorked"
							}
						},
						{
							"id": 1405,
							"name": "writableEnded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 804,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writableEnded"
							}
						},
						{
							"id": 1406,
							"name": "writableFinished",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 805,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writableFinished"
							}
						},
						{
							"id": 1407,
							"name": "writableHighWaterMark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 806,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writableHighWaterMark"
							}
						},
						{
							"id": 1408,
							"name": "writableLength",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 807,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writableLength"
							}
						},
						{
							"id": 1409,
							"name": "writableObjectMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 808,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.writableObjectMode"
							}
						},
						{
							"id": 1783,
							"name": "[asyncIterator]",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 479,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1784,
									"name": "[asyncIterator]",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "AsyncIterableIterator",
										"package": "typescript",
										"name": "AsyncIterableIterator"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.__@asyncIterator@21791"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.__@asyncIterator@21791"
							}
						},
						{
							"id": 1468,
							"name": "_construct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 117,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1469,
									"name": "_construct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1470,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1471,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1472,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1473,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex._construct"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex._construct"
							}
						},
						{
							"id": 1422,
							"name": "_destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 851,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1423,
									"name": "_destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1424,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										},
										{
											"id": 1425,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1426,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1427,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1428,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex._destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex._destroy"
							}
						},
						{
							"id": 1429,
							"name": "_final",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 852,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1430,
									"name": "_final",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1431,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1432,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1433,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1434,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex._final"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex._final"
							}
						},
						{
							"id": 1474,
							"name": "_read",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 118,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1475,
									"name": "_read",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1476,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex._read"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex._read"
							}
						},
						{
							"id": 1378,
							"name": "_write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1379,
									"name": "_write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An internal function.  Don't use it."
									},
									"parameters": [
										{
											"id": 1380,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1818,
												"name": "T"
											}
										},
										{
											"id": 1381,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1382,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "\n"
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Duplex._write"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Duplex._write"
							}
						},
						{
							"id": 1412,
							"name": "_writev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 844,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1413,
									"name": "_writev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1414,
											"name": "chunks",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reflection",
													"declaration": {
														"id": 1415,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {
															"isExternal": true
														},
														"children": [
															{
																"id": 1416,
																"name": "chunk",
																"kind": 1024,
																"kindString": "Property",
																"flags": {
																	"isExternal": true
																},
																"sources": [
																	{
																		"fileName": "node_modules/@types/node/stream.d.ts",
																		"line": 846,
																		"character": 20
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															},
															{
																"id": 1417,
																"name": "encoding",
																"kind": 1024,
																"kindString": "Property",
																"flags": {
																	"isExternal": true
																},
																"sources": [
																	{
																		"fileName": "node_modules/@types/node/stream.d.ts",
																		"line": 847,
																		"character": 20
																	}
																],
																"type": {
																	"type": "reference",
																	"qualifiedName": "global.BufferEncoding",
																	"package": "@types/node",
																	"name": "BufferEncoding"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"kind": 1024,
																"children": [
																	1416,
																	1417
																]
															}
														]
													}
												}
											}
										},
										{
											"id": 1418,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1419,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1420,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1421,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex._writev"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex._writev"
							}
						},
						{
							"id": 1499,
							"name": "addListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 423,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1500,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Event emitter\nThe defined events on documents including:\n1. close\n2. data\n3. end\n4. error\n5. pause\n6. readable\n7. resume"
									},
									"parameters": [
										{
											"id": 1501,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1502,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1503,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1504,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1505,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1506,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1507,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1508,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1509,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1510,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1511,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1512,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 1513,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1514,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1515,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1516,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1517,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1518,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1519,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1520,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1521,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1522,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1523,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 1524,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1525,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1526,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1527,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1528,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 1529,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1530,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1531,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1532,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1533,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 1534,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1535,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1536,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								},
								{
									"id": 1537,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1538,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1539,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1540,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1541,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1542,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.addListener"
							}
						},
						{
							"id": 1454,
							"name": "cork",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 859,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1455,
									"name": "cork",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.cork"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.cork"
							}
						},
						{
							"id": 1496,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 411,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1497,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the readable\nstream will release any internal resources and subsequent calls to `push()`will be ignored.",
										"text": "Once `destroy()` has been called any further calls will be a no-op and no\nfurther errors except from `_destroy()` may be emitted as `'error'`.\n\nImplementors should not override this method, but instead implement `readable._destroy()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v8.0.0"
											}
										]
									},
									"parameters": [
										{
											"id": 1498,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Error which will be passed as payload in `'error'` event\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.destroy"
							}
						},
						{
							"id": 1543,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 431,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1544,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1545,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1546,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1547,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1548,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1549,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1550,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1551,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1552,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1553,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1554,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1555,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1556,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1557,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1558,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1559,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								},
								{
									"id": 1560,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1561,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1562,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.emit"
							}
						},
						{
							"id": 1438,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 856,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1439,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1440,
											"name": "cb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1441,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1442,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.end"
									}
								},
								{
									"id": 1443,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1444,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1445,
											"name": "cb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1446,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1447,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.end"
									}
								},
								{
									"id": 1448,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1449,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1450,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1451,
											"name": "cb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1452,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1453,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.end"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.end"
							}
						},
						{
							"id": 1816,
							"name": "eventNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1817,
									"name": "eventNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v6.0.0\n"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.eventNames"
							}
						},
						{
							"id": 1805,
							"name": "getMaxListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1806,
									"name": "getMaxListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.",
										"tags": [
											{
												"tag": "since",
												"text": "v1.0.0\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.getMaxListeners"
							}
						},
						{
							"id": 1484,
							"name": "isPaused",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 278,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1485,
									"name": "isPaused",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.isPaused()` method returns the current operating state of the`Readable`. This is used primarily by the mechanism that underlies the`readable.pipe()` method. In most\ntypical cases, there will be no reason to\nuse this method directly.",
										"text": "```js\nconst readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.11.14\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.isPaused"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.isPaused"
							}
						},
						{
							"id": 1813,
							"name": "listenerCount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1814,
									"name": "listenerCount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns the number of listeners listening to the event named `eventName`.",
										"tags": [
											{
												"tag": "since",
												"text": "v3.2.0"
											}
										]
									},
									"parameters": [
										{
											"id": 1815,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "The name of the event being listened for\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.listenerCount"
							}
						},
						{
							"id": 1807,
							"name": "listeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1808,
									"name": "listeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns a copy of the array of listeners for the event named `eventName`.",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.1.26\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1809,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Function",
											"package": "typescript",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.listeners"
							}
						},
						{
							"id": 1792,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1793,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Alias for `emitter.removeListener()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v10.0.0\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1794,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1795,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1796,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1797,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1798,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.off"
							}
						},
						{
							"id": 1563,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 439,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1564,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1565,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1566,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1567,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1568,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1569,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1570,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1571,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1572,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1573,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1574,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1575,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1576,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 1577,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1578,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1579,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1580,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1581,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1582,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1583,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1584,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1585,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1586,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1587,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 1588,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1589,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1590,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1591,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1592,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 1593,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1594,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1595,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1596,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1597,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 1598,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1599,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1600,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								},
								{
									"id": 1601,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1602,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1603,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1604,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1605,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1606,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.on"
							}
						},
						{
							"id": 1607,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 447,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1608,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1609,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1610,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1611,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1612,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1613,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1614,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1615,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1616,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1617,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1618,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1619,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1620,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 1621,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1622,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1623,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1624,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1625,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1626,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1627,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1628,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1629,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1630,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1631,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 1632,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1633,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1634,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1635,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1636,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 1637,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1638,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1639,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1640,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1641,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 1642,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1643,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1644,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								},
								{
									"id": 1645,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1646,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1647,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1648,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1649,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1650,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.once"
							}
						},
						{
							"id": 1480,
							"name": "pause",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 242,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1481,
									"name": "pause",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.pause()` method will cause a stream in flowing mode to stop\nemitting `'data'` events, switching out of flowing mode. Any data that\nbecomes available will remain in the internal buffer.",
										"text": "```js\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log('There will be no additional data for 1 second.');\n  setTimeout(() => {\n    console.log('Now data will start flowing again.');\n    readable.resume();\n  }, 1000);\n});\n```\n\nThe `readable.pause()` method has no effect if there is a `'readable'`event listener.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.pause"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.pause"
							}
						},
						{
							"id": 1785,
							"name": "pipe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 24,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1786,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 1787,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 966,
														"qualifiedName": "T",
														"package": "@types/node",
														"name": "T"
													}
												],
												"qualifiedName": "NodeJS.WritableStream",
												"package": "@types/node",
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 1788,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"id": 966,
												"qualifiedName": "T",
												"package": "@types/node",
												"name": "T"
											}
										},
										{
											"id": 1789,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1790,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 1791,
															"name": "end",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/stream.d.ts",
																	"line": 27,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1791
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 966,
										"qualifiedName": "T",
										"package": "@types/node",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.pipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.pipe"
							}
						},
						{
							"id": 1651,
							"name": "prependListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 455,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1652,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1653,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1654,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1655,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1656,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1657,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1658,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1659,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1660,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1661,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1662,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1663,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1664,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 1665,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1666,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1667,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1668,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1669,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1670,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1671,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1672,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1673,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1674,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1675,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 1676,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1677,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1678,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1679,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1680,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 1681,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1682,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1683,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1684,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1685,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 1686,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1687,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1688,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								},
								{
									"id": 1689,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1690,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1691,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1692,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1693,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1694,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.prependListener"
							}
						},
						{
							"id": 1695,
							"name": "prependOnceListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 463,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1696,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1697,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1698,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1699,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1700,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1701,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1702,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1703,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1704,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1705,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1706,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1707,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1708,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 1709,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1710,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1711,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1712,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1713,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1714,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1715,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1716,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1717,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1718,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1719,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 1720,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1721,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1722,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1723,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1724,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 1725,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1726,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1727,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1728,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1729,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 1730,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1731,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1732,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								},
								{
									"id": 1733,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1734,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1735,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1736,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1737,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1738,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.prependOnceListener"
							}
						},
						{
							"id": 1397,
							"name": "push",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1398,
									"name": "push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "The chunk of data to push out of the `TransformStream` to be made available to the next step in the pipe."
									},
									"parameters": [
										{
											"id": 1399,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The data to send on to the next step in the pipe"
											},
											"type": {
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										},
										{
											"id": 1400,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Not needed due to object mode\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Duplex.push"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Duplex.push"
							}
						},
						{
							"id": 1810,
							"name": "rawListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1811,
									"name": "rawListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v9.4.0\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1812,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Function",
											"package": "typescript",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.rawListeners"
							}
						},
						{
							"id": 1401,
							"name": "read",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1402,
									"name": "read",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Read data from the stream"
									},
									"parameters": [
										{
											"id": 1403,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If in object mode then this is the number of objects to read from the stream, otherwise\n it's the number of bytes to read from the stream.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1819,
										"name": "U"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Duplex.read"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Duplex.read"
							}
						},
						{
							"id": 1799,
							"name": "removeAllListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1800,
									"name": "removeAllListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Removes all listeners, or those of the specified `eventName`.",
										"text": "It is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.1.26\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1801,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.removeAllListeners"
							}
						},
						{
							"id": 1739,
							"name": "removeListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 471,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1740,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1741,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1742,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1743,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1744,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1745,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1746,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "data"
											}
										},
										{
											"id": 1747,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1748,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1749,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1750,
																	"name": "chunk",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1751,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1752,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "end"
											}
										},
										{
											"id": 1753,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1754,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1755,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1756,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1757,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1758,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1759,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1760,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1761,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1762,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1763,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pause"
											}
										},
										{
											"id": 1764,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1765,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1766,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1767,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1768,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "readable"
											}
										},
										{
											"id": 1769,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1770,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1771,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1772,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1773,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "resume"
											}
										},
										{
											"id": 1774,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1775,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1776,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								},
								{
									"id": 1777,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1778,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1779,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1780,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1781,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1782,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.removeListener"
							}
						},
						{
							"id": 1482,
							"name": "resume",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 261,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1483,
									"name": "resume",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.resume()` method causes an explicitly paused `Readable` stream to\nresume emitting `'data'` events, switching the stream into flowing mode.",
										"text": "The `readable.resume()` method can be used to fully consume the data from a\nstream without actually processing any of that data:\n\n```js\ngetReadableStreamSomehow()\n  .resume()\n  .on('end', () => {\n    console.log('Reached the end, but did not read anything.');\n  });\n```\n\nThe `readable.resume()` method has no effect if there is a `'readable'`event listener.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.resume"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.resume"
							}
						},
						{
							"id": 1435,
							"name": "setDefaultEncoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 855,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1436,
									"name": "setDefaultEncoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1437,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.setDefaultEncoding"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.setDefaultEncoding"
							}
						},
						{
							"id": 1477,
							"name": "setEncoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 220,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1478,
									"name": "setEncoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.setEncoding()` method sets the character encoding for\ndata read from the `Readable` stream.",
										"text": "By default, no encoding is assigned and stream data will be returned as`Buffer` objects. Setting an encoding causes the stream data\nto be returned as strings of the specified encoding rather than as `Buffer`objects. For instance, calling `readable.setEncoding('utf8')` will cause the\noutput data to be interpreted as UTF-8 data, and passed as strings. Calling`readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\nstring format.\n\nThe `Readable` stream will properly handle multi-byte characters delivered\nthrough the stream that would otherwise become improperly decoded if simply\npulled from the stream as `Buffer` objects.\n\n```js\nconst readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) => {\n  assert.equal(typeof chunk, 'string');\n  console.log('Got %d characters of string data:', chunk.length);\n});\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4"
											}
										]
									},
									"parameters": [
										{
											"id": 1479,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "The encoding to use.\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.setEncoding"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.setEncoding"
							}
						},
						{
							"id": 1802,
							"name": "setMaxListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1803,
									"name": "setMaxListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.",
										"text": "Returns a reference to the `EventEmitter`, so that calls can be chained.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.3.5\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1804,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.setMaxListeners"
							}
						},
						{
							"id": 1456,
							"name": "uncork",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 860,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1457,
									"name": "uncork",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.uncork"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.uncork"
							}
						},
						{
							"id": 1486,
							"name": "unpipe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 305,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1487,
									"name": "unpipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `readable.unpipe()` method detaches a `Writable` stream previously attached\nusing the {@link pipe} method.",
										"text": "If the `destination` is not specified, then _all_ pipes are detached.\n\nIf the `destination` is specified, but no pipe is set up for it, then\nthe method does nothing.\n\n```js\nconst fs = require('fs');\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second.\nreadable.pipe(writable);\nsetTimeout(() => {\n  console.log('Stop writing to file.txt.');\n  readable.unpipe(writable);\n  console.log('Manually close the file stream.');\n  writable.end();\n}, 1000);\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4"
											}
										]
									},
									"parameters": [
										{
											"id": 1488,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Optional specific stream to unpipe\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "NodeJS.WritableStream",
												"package": "@types/node",
												"name": "WritableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.unpipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.unpipe"
							}
						},
						{
							"id": 1489,
							"name": "unshift",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 371,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1490,
									"name": "unshift",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\nsame as `readable.push(null)`, after which no more data can be written. The EOF\nsignal is put at the end of the buffer and any buffered data will still be\nflushed.",
										"text": "The `readable.unshift()` method pushes a chunk of data back into the internal\nbuffer. This is useful in certain situations where a stream is being consumed by\ncode that needs to \"un-consume\" some amount of data that it has optimistically\npulled out of the source, so that the data can be passed on to some other party.\n\nThe `stream.unshift(chunk)` method cannot be called after the `'end'` event\nhas been emitted or a runtime error will be thrown.\n\nDevelopers using `stream.unshift()` often should consider switching to\nuse of a `Transform` stream instead. See the `API for stream implementers` section for more information.\n\n```js\n// Pull off a header delimited by \\n\\n.\n// Use unshift() if we get too much.\n// Call the callback with (error, header, stream).\nconst { StringDecoder } = require('string_decoder');\nfunction parseHeader(stream, callback) {\n  stream.on('error', callback);\n  stream.on('readable', onReadable);\n  const decoder = new StringDecoder('utf8');\n  let header = '';\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.match(/\\n\\n/)) {\n        // Found the header boundary.\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n        stream.removeListener('error', callback);\n        // Remove the 'readable' listener before unshifting.\n        stream.removeListener('readable', onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // Now the body of the message can be read from the stream.\n        callback(null, header, stream);\n      } else {\n        // Still reading the header.\n        header += str;\n      }\n    }\n  }\n}\n```\n\nUnlike {@link push}, `stream.unshift(chunk)` will not\nend the reading process by resetting the internal reading state of the stream.\nThis can cause unexpected results if `readable.unshift()` is called during a\nread (i.e. from within a {@link _read} implementation on a\ncustom stream). Following the call to `readable.unshift()` with an immediate {@link push} will reset the reading state appropriately,\nhowever it is best to simply avoid calling `readable.unshift()` while in the\nprocess of performing a read.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.11"
											}
										]
									},
									"parameters": [
										{
											"id": 1491,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must be a string, `Buffer`, `Uint8Array` or `null`. For object mode\nstreams, `chunk` may be any JavaScript value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1492,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`.\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.unshift"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.unshift"
							}
						},
						{
							"id": 1493,
							"name": "wrap",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 397,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1494,
									"name": "wrap",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Prior to Node.js 0.10, streams did not implement the entire `stream` module API\nas it is currently defined. (See `Compatibility` for more information.)",
										"text": "When using an older Node.js library that emits `'data'` events and has a {@link pause} method that is advisory only, the`readable.wrap()` method can be used to create a `Readable`\nstream that uses\nthe old stream as its data source.\n\nIt will rarely be necessary to use `readable.wrap()` but the method has been\nprovided as a convenience for interacting with older Node.js applications and\nlibraries.\n\n```js\nconst { OldReader } = require('./old-api-module.js');\nconst { Readable } = require('stream');\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on('readable', () => {\n  myReader.read(); // etc.\n});\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.9.4"
											}
										]
									},
									"parameters": [
										{
											"id": 1495,
											"name": "stream",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "An \"old style\" readable stream\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "NodeJS.ReadableStream",
												"package": "@types/node",
												"name": "ReadableStream"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 1377,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1818,
												"name": "T"
											},
											{
												"type": "reference",
												"id": 1819,
												"name": "U"
											}
										],
										"name": "TransformStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Duplex.wrap"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Duplex.wrap"
							}
						},
						{
							"id": 1383,
							"name": "write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1384,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes a chunk to the `Writeable` to send data into the `TransformStream` from the previous step."
									},
									"parameters": [
										{
											"id": 1385,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1818,
												"name": "T"
											}
										},
										{
											"id": 1386,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Will call callback if there's an error\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1387,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1388,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1389,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Duplex.write"
									}
								},
								{
									"id": 1390,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes a chunk to the `Writeable` to send data into the `TransformStream` from the previous step."
									},
									"parameters": [
										{
											"id": 1391,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1818,
												"name": "T"
											}
										},
										{
											"id": 1392,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Not needed due to object mode"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1393,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Will call callback if there's an error\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1394,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1395,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1396,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Duplex.write"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Duplex.write"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1411,
								1467,
								1459,
								1458,
								1460,
								1461,
								1462,
								1463,
								1464,
								1465,
								1466,
								1404,
								1410,
								1405,
								1406,
								1407,
								1408,
								1409
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1783,
								1468,
								1422,
								1429,
								1474,
								1378,
								1412,
								1499,
								1454,
								1496,
								1543,
								1438,
								1816,
								1805,
								1484,
								1813,
								1807,
								1792,
								1563,
								1607,
								1480,
								1785,
								1651,
								1695,
								1397,
								1810,
								1401,
								1799,
								1739,
								1482,
								1435,
								1477,
								1802,
								1456,
								1486,
								1489,
								1493,
								1383
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 134,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 1818,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data that will flow into the `TransformStream` from the previous pipe step"
							}
						},
						{
							"id": 1819,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data that will flow out of the `TransformStream` and continue on to the next pipe step"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "internal.Duplex",
							"package": "@types/node",
							"name": "Duplex"
						}
					]
				},
				{
					"id": 998,
					"name": "WritableStream",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "A `WriteableStream` consume events as the last step of the pipeline, ending the pipe.\nIt is an RStreams-specific wrapper interface that inherits from the Node library's fundament `Writable`\nstream interface, the most abstract sink pipeline step definition in Node.  You will see this\ntype in various type signatures.  For example, the last pipeline step in a [[`StreamUtil.pipe`]] is\nalways a `WriteableStream`, since the pipe needs a sink or nothing will flow in the pipe (sinks\npull from previous pipe steps, causing flow in the pipe)."
					},
					"children": [
						{
							"id": 1041,
							"name": "destroyed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Is `true` after `writable.destroy()` has been called.",
								"tags": [
									{
										"tag": "since",
										"text": "v8.0.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 543,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.destroyed"
							}
						},
						{
							"id": 1034,
							"name": "writable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Is `true` if it is safe to call `writable.write()`, which means\nthe stream has not been destroyed, errored or ended.",
								"tags": [
									{
										"tag": "since",
										"text": "v11.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 504,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writable"
							}
						},
						{
							"id": 1040,
							"name": "writableCorked",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Number of times `writable.uncork()` needs to be\ncalled in order to fully uncork the stream.",
								"tags": [
									{
										"tag": "since",
										"text": "v13.2.0, v12.16.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 538,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writableCorked"
							}
						},
						{
							"id": 1035,
							"name": "writableEnded",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Is `true` after `writable.end()` has been called. This property\ndoes not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.9.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 510,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writableEnded"
							}
						},
						{
							"id": 1036,
							"name": "writableFinished",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Is set to `true` immediately before the `'finish'` event is emitted.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.6.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 515,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writableFinished"
							}
						},
						{
							"id": 1037,
							"name": "writableHighWaterMark",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Return the value of `highWaterMark` passed when creating this `Writable`.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.3.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 520,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writableHighWaterMark"
							}
						},
						{
							"id": 1038,
							"name": "writableLength",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "This property contains the number of bytes (or objects) in the queue\nready to be written. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
								"tags": [
									{
										"tag": "since",
										"text": "v9.4.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 527,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writableLength"
							}
						},
						{
							"id": 1039,
							"name": "writableObjectMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"shortText": "Getter for the property `objectMode` of a given `Writable` stream.",
								"tags": [
									{
										"tag": "since",
										"text": "v12.3.0\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 532,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.writableObjectMode"
							}
						},
						{
							"id": 1052,
							"name": "_construct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 553,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1053,
									"name": "_construct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1054,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1055,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1056,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1057,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable._construct"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable._construct"
							}
						},
						{
							"id": 1058,
							"name": "_destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 554,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1059,
									"name": "_destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1060,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										},
										{
											"id": 1061,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1062,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1063,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1064,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable._destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable._destroy"
							}
						},
						{
							"id": 1065,
							"name": "_final",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 555,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1066,
									"name": "_final",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1067,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1068,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1069,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1070,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable._final"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable._final"
							}
						},
						{
							"id": 999,
							"name": "_write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1000,
									"name": "_write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Internal write method for stream buffer. Don't use."
									},
									"parameters": [
										{
											"id": 1001,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										},
										{
											"id": 1002,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Not needed due to object mode"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1003,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Will call callback if there's an error\n"
											},
											"type": {
												"type": "reference",
												"id": 1827,
												"name": "ErrorCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Writable._write"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Writable._write"
							}
						},
						{
							"id": 1042,
							"name": "_writev",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 546,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1043,
									"name": "_writev",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1044,
											"name": "chunks",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reflection",
													"declaration": {
														"id": 1045,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {
															"isExternal": true
														},
														"children": [
															{
																"id": 1046,
																"name": "chunk",
																"kind": 1024,
																"kindString": "Property",
																"flags": {
																	"isExternal": true
																},
																"sources": [
																	{
																		"fileName": "node_modules/@types/node/stream.d.ts",
																		"line": 548,
																		"character": 20
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															},
															{
																"id": 1047,
																"name": "encoding",
																"kind": 1024,
																"kindString": "Property",
																"flags": {
																	"isExternal": true
																},
																"sources": [
																	{
																		"fileName": "node_modules/@types/node/stream.d.ts",
																		"line": 549,
																		"character": 20
																	}
																],
																"type": {
																	"type": "reference",
																	"qualifiedName": "global.BufferEncoding",
																	"package": "@types/node",
																	"name": "BufferEncoding"
																}
															}
														],
														"groups": [
															{
																"title": "Properties",
																"kind": 1024,
																"children": [
																	1046,
																	1047
																]
															}
														]
													}
												}
											}
										},
										{
											"id": 1048,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1049,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1050,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1051,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isOptional": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable._writev"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable._writev"
							}
						},
						{
							"id": 1081,
							"name": "addListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 721,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1082,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Event emitter\nThe defined events on documents including:\n1. close\n2. drain\n3. error\n4. finish\n5. pipe\n6. unpipe"
									},
									"parameters": [
										{
											"id": 1083,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1084,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1085,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1086,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								},
								{
									"id": 1087,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1088,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										},
										{
											"id": 1089,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1090,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1091,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								},
								{
									"id": 1092,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1093,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1094,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1095,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1096,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1097,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								},
								{
									"id": 1098,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1099,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										},
										{
											"id": 1100,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1101,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1102,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								},
								{
									"id": 1103,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1104,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1105,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1106,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1107,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1108,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								},
								{
									"id": 1109,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1110,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1111,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1112,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1113,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1114,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								},
								{
									"id": 1115,
									"name": "addListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1116,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1117,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1118,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1119,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1120,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.addListener"
							}
						},
						{
							"id": 1074,
							"name": "cork",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 659,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1075,
									"name": "cork",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `writable.cork()` method forces all written data to be buffered in memory.\nThe buffered data will be flushed when either the {@link uncork} or {@link end} methods are called.",
										"text": "The primary intent of `writable.cork()` is to accommodate a situation in which\nseveral small chunks are written to the stream in rapid succession. Instead of\nimmediately forwarding them to the underlying destination, `writable.cork()`buffers all the chunks until `writable.uncork()` is called, which will pass them\nall to `writable._writev()`, if present. This prevents a head-of-line blocking\nsituation where data is being buffered while waiting for the first small chunk\nto be processed. However, use of `writable.cork()` without implementing`writable._writev()` may have an adverse effect on throughput.\n\nSee also: `writable.uncork()`, `writable._writev()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.11.2\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.cork"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.cork"
							}
						},
						{
							"id": 1078,
							"name": "destroy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 710,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1079,
									"name": "destroy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'`event (unless `emitClose` is set to `false`). After this call, the writable\nstream has ended and subsequent calls to `write()` or `end()` will result in\nan `ERR_STREAM_DESTROYED` error.\nThis is a destructive and immediate way to destroy a stream. Previous calls to`write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.\nUse `end()` instead of destroy if data should flush before close, or wait for\nthe `'drain'` event before destroying the stream.",
										"text": "Once `destroy()` has been called any further calls will be a no-op and no\nfurther errors except from `_destroy()` may be emitted as `'error'`.\n\nImplementors should not override this method,\nbut instead implement `writable._destroy()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v8.0.0"
											}
										]
									},
									"parameters": [
										{
											"id": 1080,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Optional, an error to emit with `'error'` event.\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.destroy"
							}
						},
						{
							"id": 1121,
							"name": "emit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 728,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1122,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1123,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								},
								{
									"id": 1124,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1125,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								},
								{
									"id": 1126,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1127,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1128,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "Error",
												"package": "typescript",
												"name": "Error"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								},
								{
									"id": 1129,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1130,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								},
								{
									"id": 1131,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1132,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1133,
											"name": "src",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "internal.Readable",
												"package": "@types/node",
												"name": "Readable"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								},
								{
									"id": 1134,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1135,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1136,
											"name": "src",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"qualifiedName": "internal.Readable",
												"package": "@types/node",
												"name": "Readable"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								},
								{
									"id": 1137,
									"name": "emit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1138,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1139,
											"name": "args",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.emit"
							}
						},
						{
							"id": 1018,
							"name": "end",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1019,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Call this to end the stream and a callback is called when the stream is flushed, meaning everything\nhas finished clearing out of the pipe."
									},
									"parameters": [
										{
											"id": 1020,
											"name": "cb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The function to call when the pipe has been flushed"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1021,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1022,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Writable.end"
									}
								},
								{
									"id": 1023,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This allows a developer to write one final chunk to the stream and then immediately close the pipe, causing\nthe pipe to flush with this last event in it, meaning everything has finished traveling through\nand out the pipe."
									},
									"parameters": [
										{
											"id": 1024,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										},
										{
											"id": 1025,
											"name": "cb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The function to call when the pipe has been flushed\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1026,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1027,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Writable.end"
									}
								},
								{
									"id": 1028,
									"name": "end",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This allows a developer to write one final chunk to the stream and then immediately close the pipe, causing\nthe pipe to flush with this last event in it, meaning everything has finished traveling through\nand out the pipe."
									},
									"parameters": [
										{
											"id": 1029,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										},
										{
											"id": 1030,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Not needed due to object mode of stream"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1031,
											"name": "cb",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "The function to call when the pipe has been flushed\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1032,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1033,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Writable.end"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Writable.end"
							}
						},
						{
							"id": 1371,
							"name": "eventNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1372,
									"name": "eventNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or `Symbol`s.",
										"text": "```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v6.0.0\n"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.eventNames"
							}
						},
						{
							"id": 1360,
							"name": "getMaxListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1361,
									"name": "getMaxListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns the current max listener value for the `EventEmitter` which is either\nset by `emitter.setMaxListeners(n)` or defaults to {@link defaultMaxListeners}.",
										"tags": [
											{
												"tag": "since",
												"text": "v1.0.0\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.getMaxListeners"
							}
						},
						{
							"id": 1368,
							"name": "listenerCount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1369,
									"name": "listenerCount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns the number of listeners listening to the event named `eventName`.",
										"tags": [
											{
												"tag": "since",
												"text": "v3.2.0"
											}
										]
									},
									"parameters": [
										{
											"id": 1370,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "The name of the event being listened for\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.listenerCount"
							}
						},
						{
							"id": 1362,
							"name": "listeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1363,
									"name": "listeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns a copy of the array of listeners for the event named `eventName`.",
										"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v0.1.26\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1364,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Function",
											"package": "typescript",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.listeners"
							}
						},
						{
							"id": 1347,
							"name": "off",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1348,
									"name": "off",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Alias for `emitter.removeListener()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v10.0.0\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1349,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1350,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1351,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1352,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1353,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.off"
							}
						},
						{
							"id": 1140,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 735,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1141,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1142,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1143,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1144,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1145,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								},
								{
									"id": 1146,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1147,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										},
										{
											"id": 1148,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1149,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1150,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								},
								{
									"id": 1151,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1152,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1153,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1154,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1155,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1156,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								},
								{
									"id": 1157,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1158,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										},
										{
											"id": 1159,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1160,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1161,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								},
								{
									"id": 1162,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1163,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1164,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1165,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1166,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1167,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								},
								{
									"id": 1168,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1169,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1170,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1171,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1172,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1173,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								},
								{
									"id": 1174,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1175,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1176,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1177,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1178,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1179,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.on"
							}
						},
						{
							"id": 1180,
							"name": "once",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 742,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1181,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1182,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1183,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1184,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1185,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								},
								{
									"id": 1186,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1187,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										},
										{
											"id": 1188,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1189,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1190,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								},
								{
									"id": 1191,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1192,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1193,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1194,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1195,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1196,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								},
								{
									"id": 1197,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1198,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										},
										{
											"id": 1199,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1200,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1201,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								},
								{
									"id": 1202,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1203,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1204,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1205,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1206,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1207,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								},
								{
									"id": 1208,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1209,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1210,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1211,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1212,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1213,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								},
								{
									"id": 1214,
									"name": "once",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1215,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1216,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1217,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1218,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1219,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.once"
							}
						},
						{
							"id": 1340,
							"name": "pipe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 24,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1341,
									"name": "pipe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"typeParameter": [
										{
											"id": 1342,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 966,
														"qualifiedName": "T",
														"package": "@types/node",
														"name": "T"
													}
												],
												"qualifiedName": "NodeJS.WritableStream",
												"package": "@types/node",
												"name": "WritableStream"
											}
										}
									],
									"parameters": [
										{
											"id": 1343,
											"name": "destination",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"id": 966,
												"qualifiedName": "T",
												"package": "@types/node",
												"name": "T"
											}
										},
										{
											"id": 1344,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1345,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"children": [
														{
															"id": 1346,
															"name": "end",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isExternal": true,
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/stream.d.ts",
																	"line": 27,
																	"character": 16
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																1346
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 966,
										"qualifiedName": "T",
										"package": "@types/node",
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.pipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.pipe"
							}
						},
						{
							"id": 1220,
							"name": "prependListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 749,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1221,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1222,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1223,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1224,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1225,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								},
								{
									"id": 1226,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1227,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										},
										{
											"id": 1228,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1229,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1230,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								},
								{
									"id": 1231,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1232,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1233,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1234,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1235,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1236,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								},
								{
									"id": 1237,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1238,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										},
										{
											"id": 1239,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1240,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1241,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								},
								{
									"id": 1242,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1243,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1244,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1245,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1246,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1247,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								},
								{
									"id": 1248,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1249,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1250,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1251,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1252,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1253,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								},
								{
									"id": 1254,
									"name": "prependListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1255,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1256,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1257,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1258,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1259,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.prependListener"
							}
						},
						{
							"id": 1260,
							"name": "prependOnceListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 756,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1261,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1262,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1263,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1264,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1265,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								},
								{
									"id": 1266,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1267,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										},
										{
											"id": 1268,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1269,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1270,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								},
								{
									"id": 1271,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1272,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1273,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1274,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1275,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1276,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								},
								{
									"id": 1277,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1278,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										},
										{
											"id": 1279,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1280,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1281,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								},
								{
									"id": 1282,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1283,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1284,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1285,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1286,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1287,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								},
								{
									"id": 1288,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1289,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1290,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1291,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1292,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1293,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								},
								{
									"id": 1294,
									"name": "prependOnceListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1295,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1296,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1297,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1298,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1299,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.prependOnceListener"
							}
						},
						{
							"id": 1365,
							"name": "rawListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1366,
									"name": "rawListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Returns a copy of the array of listeners for the event named `eventName`,\nincluding any wrappers (such as those created by `.once()`).",
										"text": "```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```",
										"tags": [
											{
												"tag": "since",
												"text": "v9.4.0\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1367,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"qualifiedName": "Function",
											"package": "typescript",
											"name": "Function"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.rawListeners"
							}
						},
						{
							"id": 1354,
							"name": "removeAllListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1355,
									"name": "removeAllListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "Removes all listeners, or those of the specified `eventName`.",
										"text": "It is bad practice to remove listeners added elsewhere in the code,\nparticularly when the `EventEmitter` instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the `EventEmitter`, so that calls can be chained.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.1.26\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1356,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.removeAllListeners"
							}
						},
						{
							"id": 1300,
							"name": "removeListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 763,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1301,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1302,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "close"
											}
										},
										{
											"id": 1303,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1304,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1305,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								},
								{
									"id": 1306,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1307,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "drain"
											}
										},
										{
											"id": 1308,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1309,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1310,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								},
								{
									"id": 1311,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1312,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "error"
											}
										},
										{
											"id": 1313,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1314,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1315,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1316,
																	"name": "err",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								},
								{
									"id": 1317,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1318,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "finish"
											}
										},
										{
											"id": 1319,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1320,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1321,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								},
								{
									"id": 1322,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1323,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "pipe"
											}
										},
										{
											"id": 1324,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1325,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1326,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1327,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								},
								{
									"id": 1328,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1329,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "literal",
												"value": "unpipe"
											}
										},
										{
											"id": 1330,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1331,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1332,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1333,
																	"name": "src",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "internal.Readable",
																		"package": "@types/node",
																		"name": "Readable"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								},
								{
									"id": 1334,
									"name": "removeListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 1335,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1336,
											"name": "listener",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1337,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 1338,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 1339,
																	"name": "args",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.removeListener"
							}
						},
						{
							"id": 1071,
							"name": "setDefaultEncoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 619,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1072,
									"name": "setDefaultEncoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.11.15"
											}
										]
									},
									"parameters": [
										{
											"id": 1073,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"comment": {
												"shortText": "The new default encoding\n"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.setDefaultEncoding"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.setDefaultEncoding"
							}
						},
						{
							"id": 1357,
							"name": "setMaxListeners",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"signatures": [
								{
									"id": 1358,
									"name": "setMaxListeners",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "By default `EventEmitter`s will print a warning if more than `10` listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The `emitter.setMaxListeners()` method allows the limit to be\nmodified for this specific `EventEmitter` instance. The value can be set to`Infinity` (or `0`) to indicate an unlimited number of listeners.",
										"text": "Returns a reference to the `EventEmitter`, so that calls can be chained.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.3.5\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1359,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 998,
										"typeArguments": [
											{
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										],
										"name": "WritableStream"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.setMaxListeners"
							}
						},
						{
							"id": 1076,
							"name": "uncork",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/stream.d.ts",
									"line": 693,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 1077,
									"name": "uncork",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"comment": {
										"shortText": "The `writable.uncork()` method flushes all data buffered since {@link cork} was called.",
										"text": "When using `writable.cork()` and `writable.uncork()` to manage the buffering\nof writes to a stream, it is recommended that calls to `writable.uncork()` be\ndeferred using `process.nextTick()`. Doing so allows batching of all`writable.write()` calls that occur within a given Node.js event loop phase.\n\n```js\nstream.cork();\nstream.write('some ');\nstream.write('data ');\nprocess.nextTick(() => stream.uncork());\n```\n\nIf the `writable.cork()` method is called multiple times on a stream, the\nsame number of calls to `writable.uncork()` must be called to flush the buffered\ndata.\n\n```js\nstream.cork();\nstream.write('some ');\nstream.cork();\nstream.write('data ');\nprocess.nextTick(() => {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\n```\n\nSee also: `writable.cork()`.",
										"tags": [
											{
												"tag": "since",
												"text": "v0.11.2\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "stream.Writable.uncork"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "stream.Writable.uncork"
							}
						},
						{
							"id": 1004,
							"name": "write",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 1005,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes data to the stream.",
										"returns": "??"
									},
									"parameters": [
										{
											"id": 1006,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										},
										{
											"id": 1007,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Will call callback if there's an error"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1008,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1009,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1010,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Writable.write"
									}
								},
								{
									"id": 1011,
									"name": "write",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Writes data to the stream.",
										"returns": "??"
									},
									"parameters": [
										{
											"id": 1012,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The object to push into the stream"
											},
											"type": {
												"type": "reference",
												"id": 1373,
												"name": "T"
											}
										},
										{
											"id": 1013,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Not needed due to object mode of stream"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1014,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Optional for RStreams, will call callback if there's an error."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1015,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 1016,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1017,
																	"name": "error",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"qualifiedName": "Error",
																		"package": "typescript",
																		"name": "Error"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"overwrites": {
										"type": "reference",
										"name": "stream.Writable.write"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "stream.Writable.write"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1041,
								1034,
								1040,
								1035,
								1036,
								1037,
								1038,
								1039
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1052,
								1058,
								1065,
								999,
								1042,
								1081,
								1074,
								1078,
								1121,
								1018,
								1371,
								1360,
								1368,
								1362,
								1347,
								1140,
								1180,
								1340,
								1220,
								1260,
								1365,
								1354,
								1300,
								1071,
								1357,
								1076,
								1004
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 53,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 1373,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data being pushed into the WriteableStream sink to be consumed"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"qualifiedName": "internal.Writable",
							"package": "@types/node",
							"name": "Writable"
						}
					]
				},
				{
					"id": 1864,
					"name": "WriteEvent",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1870,
							"name": "correlation_id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Reference the doc on [`CorrelationId`] that describes this well."
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 271,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1881,
								"name": "CorrelationId"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1862,
								"name": "Event.correlation_id"
							}
						},
						{
							"id": 1866,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "This is the name of the RStreams queue this event is in"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 249,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1858,
								"name": "Event.event"
							}
						},
						{
							"id": 1868,
							"name": "event_source_timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The timestamp of the first event that made it to the bus that this event eventually derived from, however far back\nupstream.",
								"tags": [
									{
										"tag": "default",
										"text": "now\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 263,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1860,
								"name": "Event.event_source_timestamp"
							}
						},
						{
							"id": 1865,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The ID of the bot that wrote this event to the queue"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 246,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1857,
								"name": "Event.id"
							}
						},
						{
							"id": 1869,
							"name": "payload",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The RStreams queue-specific data that this event exists to wrap"
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 266,
									"character": 1
								}
							],
							"type": {
								"type": "reference",
								"id": 1871,
								"name": "T"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1861,
								"name": "Event.payload"
							}
						},
						{
							"id": 1867,
							"name": "timestamp",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "The millisecond (time since epoch) of when this event was created by the developer.",
								"tags": [
									{
										"tag": "default",
										"text": "now\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 255,
									"character": 1
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1859,
								"name": "Event.timestamp"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1870,
								1866,
								1868,
								1865,
								1869,
								1867
							]
						}
					],
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 274,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 1871,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1856,
							"typeArguments": [
								{
									"type": "reference",
									"id": 1871,
									"name": "T"
								}
							],
							"name": "Event"
						}
					]
				},
				{
					"id": 1886,
					"name": "BotInvocationEvent2",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "The RStreams bus will create this event and pass it to your bot when it is invoked.  It tells you the ID of the\nbot your code is running as, so you don't have to hard-code it or so you can do complex things with fanout.\nIt also sends you detail on the bot itself, including checkpoints and so on.  Finally,\nthe event will include your own custom-defined config you registered that you wanted passed into your bot when invoked."
					},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 384,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 1891,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "Your registered config data that will be mixed in with the event when sent to you\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"default": {
								"type": "reflection",
								"declaration": {
									"id": 1890,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "lib/types.d.ts",
											"line": 384,
											"character": 48
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 1891,
								"name": "T"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 1887,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 1889,
											"name": "__cron",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "Details about the bot including checkpoints and so on"
											},
											"sources": [
												{
													"fileName": "lib/types.d.ts",
													"line": 389,
													"character": 1
												}
											],
											"type": {
												"type": "reference",
												"id": 1895,
												"name": "Cron"
											}
										},
										{
											"id": 1888,
											"name": "botId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "The ID of the bot this code is running as"
											},
											"sources": [
												{
													"fileName": "lib/types.d.ts",
													"line": 386,
													"character": 1
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1889,
												1888
											]
										}
									],
									"sources": [
										{
											"fileName": "lib/types.d.ts",
											"line": 384,
											"character": 58
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 1820,
					"name": "DataCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 198,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 1825,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the data to be returned from the operation, if any"
							},
							"default": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1826,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the Error object if the operation fails"
							},
							"default": {
								"type": "reference",
								"qualifiedName": "Error",
								"package": "typescript",
								"name": "Error"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1821,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 198,
									"character": 55
								}
							],
							"signatures": [
								{
									"id": 1822,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A standard callback function supporting operation success with optional data returned and fail with Error.",
										"text": "```javascript\n// Operation failed, returns an error from the callback\ncallback(new Error())\n\n// Operation succeeded, return data from this operation\ncallback(null, data)\n\n// Operation succeeded but don't want to forward any data from this operation\ncallback()\n```"
									},
									"parameters": [
										{
											"id": 1823,
											"name": "err",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If present, the operation failed and this is the error"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"id": 1826,
														"name": "E"
													},
													{
														"type": "literal",
														"value": null
													}
												]
											}
										},
										{
											"id": 1824,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "If present, this is the data to return from the operation\n"
											},
											"type": {
												"type": "reference",
												"id": 1825,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 1374,
					"name": "DuplexStream",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Don't use. Will be removed.\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 120,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 1375,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 1376,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"type": {
						"type": "reference",
						"id": 1377,
						"typeArguments": [
							{
								"type": "reference",
								"id": 1375,
								"name": "T"
							},
							{
								"type": "reference",
								"id": 1376,
								"name": "U"
							}
						],
						"name": "TransformStream"
					}
				},
				{
					"id": 1827,
					"name": "ErrorCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 205,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1828,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 205,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 1829,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A standard callback indicating the operation failed if error is present"
									},
									"parameters": [
										{
											"id": 1830,
											"name": "error",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "If present, an error occurred and this is it\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"qualifiedName": "Error",
														"package": "typescript",
														"name": "Error"
													},
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 1849,
					"name": "FlushCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 236,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 1854,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {},
							"default": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1855,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of an error, if there is one"
							},
							"default": {
								"type": "reference",
								"qualifiedName": "Error",
								"package": "typescript",
								"name": "Error"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1850,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 236,
									"character": 56
								}
							],
							"signatures": [
								{
									"id": 1851,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This is a flush event callback function.  When a stream is closed, the pipe is flushed meaning all events flow out of\nthe pipe until it's empty.  Once it's empty, the `FlushCallabck` will be called, allowing the developer to do cleanup\nlike close open database connections or whatever."
									},
									"parameters": [
										{
											"id": 1852,
											"name": "this",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Node will consume this argument and use it to set the context of the function to be the `TransformStream` itself\n  so you can call methods on `this` in the function which will be the `TransformStream` instance"
											},
											"type": {
												"type": "reference",
												"qualifiedName": "internal.Transform",
												"package": "@types/node",
												"name": "stream.Transform"
											}
										},
										{
											"id": 1853,
											"name": "flushCallback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The function to call when the flush is complete"
											},
											"type": {
												"type": "reference",
												"id": 1820,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1854,
														"name": "T"
													},
													{
														"type": "reference",
														"id": 1855,
														"name": "E"
													}
												],
												"name": "DataCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						}
					}
				},
				{
					"id": 1840,
					"name": "RStreamsTransformFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 222,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 1846,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data to be sent into the pipe step"
							}
						},
						{
							"id": 1847,
							"name": "U",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of data that will be produced by this pipe step and sent to the next pipe step"
							}
						},
						{
							"id": 1848,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of error produced if something goes wrong"
							},
							"default": {
								"type": "reference",
								"qualifiedName": "Error",
								"package": "typescript",
								"name": "Error"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1841,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 222,
									"character": 65
								}
							],
							"signatures": [
								{
									"id": 1842,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a `TransformStream` pipe step. The doc on [[`TransformStream`]] is very helpful."
									},
									"parameters": [
										{
											"id": 1843,
											"name": "this",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Node will consume this argument and use it to set the context of the function to be the `TransformStream` itself\n  so you can call methods on `this` in the function which will be the `TransformStream` instance"
											},
											"type": {
												"type": "reference",
												"id": 1377,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1846,
														"name": "T"
													},
													{
														"type": "reference",
														"id": 1847,
														"name": "U"
													}
												],
												"name": "TransformStream"
											}
										},
										{
											"id": 1844,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1846,
												"name": "T"
											}
										},
										{
											"id": 1845,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "A standard callback to return an error or data to send to the next pipe step\n"
											},
											"type": {
												"type": "reference",
												"id": 1820,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1847,
														"name": "U"
													},
													{
														"type": "reference",
														"id": 1848,
														"name": "E"
													}
												],
												"name": "DataCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 1831,
					"name": "TransformFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "lib/types.d.ts",
							"line": 210,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 1838,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1839,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reference",
								"qualifiedName": "Error",
								"package": "typescript",
								"name": "Error"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 1832,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "lib/types.d.ts",
									"line": 210,
									"character": 60
								}
							],
							"signatures": [
								{
									"id": 1833,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "internal",
												"text": "Don't use.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1834,
											"name": "this",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "internal.Transform",
												"package": "@types/node",
												"name": "stream.Transform"
											}
										},
										{
											"id": 1835,
											"name": "chunk",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1838,
												"name": "T"
											}
										},
										{
											"id": 1836,
											"name": "encoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"qualifiedName": "global.BufferEncoding",
												"package": "@types/node",
												"name": "BufferEncoding"
											}
										},
										{
											"id": 1837,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 1820,
												"typeArguments": [
													{
														"type": "reference",
														"id": 1838,
														"name": "T"
													},
													{
														"type": "reference",
														"id": 1839,
														"name": "E"
													}
												],
												"name": "DataCallback"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						3228,
						3236,
						3232,
						3240,
						3267,
						3269,
						3238,
						3229,
						3239,
						3266,
						3268,
						3230,
						3235,
						3241,
						3242,
						3233,
						3237,
						3231,
						3234,
						3254,
						3259,
						3249,
						3248,
						3252,
						3251,
						3246,
						3247,
						3263,
						3265,
						3250,
						3261,
						3255,
						3243,
						3244,
						3245,
						3253,
						3260,
						3256,
						3257,
						3262,
						3264,
						3258
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1892,
						1912,
						1903,
						1881,
						1895,
						1856,
						1918,
						1872,
						622,
						1377,
						998,
						1864
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1886,
						1820,
						1374,
						1827,
						1849,
						1840,
						1831
					]
				}
			],
			"sources": [
				{
					"fileName": "lib/types.d.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				1,
				107,
				1952,
				2048,
				2270,
				253,
				621
			]
		}
	]
}